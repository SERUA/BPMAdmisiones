package com.anahuac.rest.api.DB

class NuevoStatements {

    public static final String WHERE_LISTA_REPORTE_OV="WHERE sda.iseliminado=false and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false ) AND (sda.ESTATUSSOLICITUD != 'Solicitud rechazada') AND (sda.ESTATUSSOLICITUD != 'Solicitud lista roja') AND (sda.ESTATUSSOLICITUD != 'Aspirantes registrados sin validación de cuenta') AND (sda.ESTATUSSOLICITUD !='Aspirantes registrados con validación de cuenta') AND (sda.ESTATUSSOLICITUD != 'Solicitud en proceso') AND (sda.ESTATUSSOLICITUD != 'Solicitud recibida' ) AND (sda.ESTATUSSOLICITUD != 'Solicitud en espera de pago' ) AND (sda.ESTATUSSOLICITUD != 'Validación pago condonado' ) AND (sda.ESTATUSSOLICITUD != 'Autodescripción en proceso' ) AND (sda.ESTATUSSOLICITUD != 'Solicitud a modificar' ) AND (sda.ESTATUSSOLICITUD != 'Solicitud modificada' ) AND (sda.ESTATUSSOLICITUD != 'Solicitud vencida')  AND (sda.ESTATUSSOLICITUD != 'Validación descuento 100%') AND (sda.ESTATUSSOLICITUD != 'Solicitud con pago aceptado') [EXTRA]";
	
	public static final String GET_LISTA_REPORTE_OV = "SELECT sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.ESTATUSSOLICITUD, sda.caseid, da.idbanner, campus.grupoBonita, Sesion.nombre AS sesion, Sesion.persistenceid AS idsesion, RD.responsableid, CAST(TO_CHAR(Pruebas.aplicacion, 'DD-MM-YYYY') AS varchar) AS fechaentrevista, Pruebas.lugar, tp.finalizado, sda.countrechazos, campusEstudio.descripcion AS campus, sda.curp, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, periodo.fechafin AS periodofin FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid = sda.CATCAMPUS_PID LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid = sda.catcampusestudio_pid INNER JOIN detallesolicitud da ON sda.caseid::INTEGER = da.caseid::INTEGER AND da.vencido IS NOT true AND ( SDA.estatusSolicitud = 'Carga y consulta de resultados' OR SDA.estatussolicitud = 'Aspirantes en proceso resultados' OR SDA.estatussolicitud = 'Ya se imprimió su credencial' OR SDA.estatussolicitud = 'No se ha impreso credencial' OR SDA.estatussolicitud = 'Elección de pruebas no calendarizado' OR SDA.estatussolicitud = 'Resultado final del comité' OR SDA.estatussolicitud = 'Autodescripción concluida' OR SDA.estatussolicitud = 'Rechazado por comité' OR SDA.estatussolicitud = 'Elección de pruebas calendarizado' ) LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid AND tp.countRechazo = CASE WHEN sda.countrechazos IS NULL THEN 0 ELSE sda.countrechazos END LEFT JOIN ASPIRANTESPRUEBAS AS AP ON AP.caseid = sda.caseid AND ap.cattipoprueba_pid = 1 AND ap.responsabledisponible_pid IS NOT NULL LEFT JOIN SESIONASPIRANTE AS SA ON SA.CASEID = AP.CASEID AND SA.sesiones_pid = ap.sesiones_pid LEFT JOIN sesiones AS Sesion ON Sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible AS RD ON RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas AS Pruebas ON Pruebas.persistenceid = AP.prueba_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid = sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID = sda.CATPERIODO_PID [WHERE] [CAMPUS] GROUP BY sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, campus.descripcion, sda.estatussolicitud, sda.caseid, da.idbanner, campus.grupobonita, sda.persistenceid, Sesion.nombre, Sesion.persistenceid, RD.responsableid, Pruebas.aplicacion, tp.finalizado, sda.countrechazos, campusEstudio.descripcion, gestionescolar.NOMBRE, periodo.DESCRIPCION, periodo.fechafin, Pruebas.lugar [ORDERBY] [LIMITOFFSET];";
	
	public static final String GET_ASPIRANTES_SESIONES_COUNT_TODOS = "SELECT COUNT(DISTINCT(creg.caseid)) AS total_registros FROM catregistro AS creg INNER JOIN ( SELECT ( CASE WHEN pali.prueba_pid IS NULL THEN aspr.prueba_pid WHEN pali.prueba_pid IS NOT NULL THEN pali.prueba_pid END ) AS prueba_pid, creg.correoelectronico AS username, ctpr.descripcion AS tipo_prueba, ctpr.persistenceid AS id_tipo_prueba, sesi.nombre, sesi.persistenceid AS sesiones_pid, prue.nombre AS nombre_prueba, prue.descripcion AS descripcion_prueba FROM catregistro AS creg LEFT JOIN aspirantespruebas AS aspr ON aspr.username = creg.correoelectronico AND ( SELECT COUNT(persistenceid) > 0 AS existe FROM pruebas WHERE sesion_pid = ? ) LEFT JOIN paselista AS pali ON pali.username = creg.correoelectronico AND pali.prueba_pid IN ( SELECT prue1.persistenceid FROM pruebas AS prue1 INNER JOIN cattipoprueba  AS ctpr1 ON ctpr1.persistenceid = prue1.cattipoprueba_pid WHERE prue1.sesion_pid = ? AND ctpr1.descripcion = 'Examen Psicométrico'  ) INNER JOIN pruebas AS prue ON ( CASE WHEN pali.persistenceid IS NULL THEN aspr.prueba_pid = prue.persistenceid WHEN pali.persistenceid IS NOT NULL THEN prue.persistenceid = pali.prueba_pid END ) INNER JOIN cattipoprueba AS ctpr ON ( CASE WHEN pali.persistenceid IS NULL THEN aspr.cattipoprueba_pid = ctpr.persistenceid WHEN pali.persistenceid IS NOT NULL THEN ctpr.persistenceid = prue.cattipoprueba_pid END ) INNER JOIN sesiones AS sesi ON sesi.persistenceid = prue.sesion_pid WHERE ( ctpr.descripcion = 'Examen Psicométrico' AND prue.sesion_pid = ? ) ) AS sesq on sesq.username = creg.correoelectronico LEFT JOIN cattipoprueba AS ctpr ON ctpr.persistenceid = sesq.id_tipo_prueba LEFT JOIN solicituddeadmision AS sdad ON sdad.caseid = creg.caseid AND sdad.iseliminado <> true  LEFT JOIN idiomainvpusuario AS idio ON idio.username = sdad.correoelectronico LEFT JOIN invpexamenterminado AS extr ON ( ( extr.username = creg.correoelectronico AND sesq.sesiones_pid = extr.idsesion AND idio.istemporal = false AND extr.persistenceid = ( SELECT extrq.persistenceid FROM invpexamenterminado AS extrq WHERE username = creg.correoelectronico ORDER BY persistenceid DESC limit 1 ) ) OR ( extr.username = creg.correoelectronico AND idio.istemporal = true AND extr.persistenceid = ( SELECT extrq.persistenceid FROM invpexamenterminado AS extrq WHERE username = creg.correoelectronico ORDER BY persistenceid DESC limit 1 ) ) ) LEFT JOIN catcampus AS ccam ON ccam.persistenceid = sdad.catcampusestudio_pid LEFT JOIN detallesolicitud AS dets ON dets.caseid::bigint = sdad.caseid LEFT JOIN infoaspirantetemporal AS temp ON temp.username = creg.correoelectronico LEFT JOIN sesiones AS ses_temp ON temp.idprueba = ses_temp.persistenceid LEFT JOIN instanciainvp AS invp ON (invp.username = creg.correoelectronico AND ( invp.idsesion = sesq.sesiones_pid OR ( idio.istemporal = true AND temp.idprueba = ? ) ) )";
	
	public static final String GET_CONTEO_REPORTE_OV = "SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid  INNER JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true AND (SDA.estatusSolicitud = 'Carga y consulta de resultados' OR SDA.estatussolicitud = 'Aspirantes en proceso resultados' OR SDA.estatussolicitud = 'Ya se imprimió su credencial' OR SDA.estatussolicitud = 'No se ha impreso credencial' OR SDA.estatussolicitud = 'Elección de pruebas no calendarizado' OR SDA.estatussolicitud = 'Resultado final del comité' OR SDA.estatussolicitud = 'Autodescripción concluida' OR SDA.estatussolicitud = 'Rechazado por comité' )   LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid and tp.countRechazo = CASE WHEN sda.countrechazos IS NULL THEN 0 ELSE sda.countrechazos END LEFT JOIN ASPIRANTESPRUEBAS as AP on AP.caseid = sda.caseid AND ap.cattipoprueba_pid = 1 and ap.responsabledisponible_pid is not null LEFT JOIN SESIONASPIRANTE AS SA ON SA.CASEID = AP.CASEID AND SA.sesiones_pid = ap.sesiones_pid LEFT JOIN sesiones as Sesion on Sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible as RD on RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas as Pruebas ON Pruebas.persistenceid = AP.prueba_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID  [WHERE]  ";

	public static final String ORDERBY_LISTA_REPORTE_OV_BY_SESION = "group by Pruebas.nombre, Pruebas.aplicacion, Pruebas.persistenceid, Sesion.persistenceid, Pruebas.lugar, Pruebas.registrados, Sesion.nombre,  Pruebas.cupo, Pruebas.entrada,Pruebas.salida, campus.descripcion";

	public static final String EXT_LISTA_REPORTE_OV_BY_SESION = "(SELECT COUNT (AP.persistenceid) from ASPIRANTESPRUEBAS AS AP  INNER JOIN solicituddeadmision sda ON ap.caseid::INTEGER=sda.caseid::INTEGER INNER JOIN detallesolicitud da ON ap.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true AND (SDA.estatusSolicitud = 'Carga y consulta de resultados' OR SDA.estatussolicitud = 'Aspirantes en proceso resultados' OR SDA.estatussolicitud = 'Ya se imprimió su credencial' OR SDA.estatussolicitud = 'No se ha impreso credencial' OR SDA.estatussolicitud = 'Elección de pruebas no calendarizado' OR SDA.estatussolicitud = 'Resultado final del comité' OR SDA.estatussolicitud = 'Autodescripción concluida' OR SDA.estatussolicitud = 'Rechazado por comité' )  where AP.PRUEBA_PID = Pruebas.persistenceid ) as registrados";

	public static final String GET_LISTA_REPORTE_OV_BY_SESION = "SELECT * FROM (SELECT Pruebas.nombre, TO_CHAR(Pruebas.aplicacion, 'DD-MM-YYYY') as aplicacion, Pruebas.persistenceid as pruebas_id, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, campus.descripcion AS campus,(select String_AGG(distinct rd.responsableid::varchar,',') from responsabledisponible as rd where rd.isEliminado = false and rd.prueba_pid = Pruebas.persistenceid) as responsables, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN PaseLista as PaseLista on PaseLista.prueba_pid = Pruebas.persistenceid LEFT JOIN catcampus campus ON campus.persistenceid= Sesion.campus_pid [CAMPUS] WHERE Pruebas.ISELIMINADO = FALSE and Pruebas.cattipoprueba_pid = 1 AND campus.descripcion is not null [WHERE] [GROUPBY] [ORDERBY] ) as datos [REGISTRADOS] [LIMITOFFSET]";

	public static final String GET_LISTA_REPORTE_OV_USUARIOS_BY_SESION = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.ESTATUSSOLICITUD, sda.caseid, da.idbanner, Sesion.nombre AS sesion, Sesion.persistenceid AS idsesion, RD.responsableid, RD.horario, CAST(TO_CHAR(Pruebas.aplicacion, 'DD-MM-YYYY') AS varchar) AS fechaentrevista, tp.finalizado, tp.countrechazo, periodo.DESCRIPCION AS ingreso, catgestionescolar.NOMBRE AS licenciatura FROM SOLICITUDDEADMISION AS sda LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid LEFT JOIN catcampus campus ON campus.persistenceid = sda.CATCAMPUS_PID INNER JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true AND (SDA.estatusSolicitud = 'Carga y consulta de resultados' OR SDA.estatussolicitud = 'Aspirantes en proceso resultados' OR SDA.estatussolicitud = 'Ya se imprimió su credencial' OR SDA.estatussolicitud = 'No se ha impreso credencial' OR SDA.estatussolicitud = 'Elección de pruebas no calendarizado' OR SDA.estatussolicitud = 'Resultado final del comité' OR SDA.estatussolicitud = 'Autodescripción concluida' OR SDA.estatussolicitud = 'Rechazado por comité' OR SDA.estatussolicitud = 'Elección de pruebas calendarizado') LEFT JOIN ASPIRANTESPRUEBAS AS AP ON AP.caseid = sda.caseid AND ap.cattipoprueba_pid = 1 AND ap.responsabledisponible_pid IS NOT NULL LEFT JOIN sesiones AS Sesion ON Sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible AS RD ON RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas AS Pruebas ON Pruebas.persistenceid = AP.prueba_pid LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID = sda.CATPERIODO_PID LEFT JOIN catgestionescolar ON catgestionescolar.PERSISTENCEID = sda.CATGESTIONESCOLAR_PID WHERE sda.iseliminado = false AND (sda.isAspiranteMigrado IS NULL OR sda.isAspiranteMigrado = false) [WHERE] GROUP BY sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.estatussolicitud, sda.caseid, da.idbanner, sda.persistenceid, Sesion.nombre, Sesion.persistenceid, RD.responsableid, RD.horario, Pruebas.aplicacion, tp.finalizado, tp.countrechazo, periodo.DESCRIPCION, catgestionescolar.NOMBRE [ORDERBY]";

	public static final String COUNT_LISTA_REPORTE_OV_USUARIOS_BY_SESION = "SELECT  to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.ESTATUSSOLICITUD, sda.caseid, da.idbanner, Sesion.nombre as sesion,Sesion.persistenceid as idsesion,RD.responsableid,CAST(TO_CHAR(Pruebas.aplicacion, 'DD-MM-YYYY') as varchar) as fechaentrevista, tp.finalizado,tp.countrechazo  FROM SOLICITUDDEADMISION as sda LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID INNER JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  INNER JOIN ASPIRANTESPRUEBAS as AP on AP.caseid = sda.caseid and ap.cattipoprueba_pid = 1 and ap.responsabledisponible_pid is not null LEFT JOIN sesiones as Sesion on Sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible as RD on RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas as Pruebas ON Pruebas.persistenceid = AP.prueba_pid WHERE  sda.iseliminado=false and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false ) [WHERE] GROUP BY  sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.estatussolicitud,sda.caseid,da.idbanner, sda.persistenceid, Sesion.nombre, Sesion.persistenceid, RD.responsableid, Pruebas.aplicacion,tp.finalizado,tp.countrechazo  [ORDERBY]";
	
	public static final String CONFIGURACIONESSSA="SELECT * FROM CATCONFIGURACION WHERE CLAVE = 'SASAzure'";

	public static final String GET_FOTO_BY_CASEID_INTENTO = "SELECT urlfoto FROM SOLICITUDDEADMISION ";

	public static final String GET_LISTA_REPORTE_OV_EXPECIFICO = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, periodo.fechafin AS periodofin, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision, R.descripcion AS residensia, TAL.descripcion AS tipoDeAlumno, catcampus.descripcion AS transferencia, sesion.nombre AS sesion, sesion.persistenceid AS idsesion, RD.responsableid, RD.horario, CAST(TO_CHAR(Pruebas.aplicacion, 'DD-MM-YYYY') AS VARCHAR) AS fechaentrevista, tp.finalizado, tp.countrechazo FROM SOLICITUDDEADMISION AS sda LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid LEFT JOIN catcampus campus ON campus.persistenceid = sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid = sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid = sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID = sda.CATPERIODO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID = sda.CATBACHILLERATOS_PID INNER JOIN detallesolicitud da ON sda.caseid::INTEGER = da.caseid::INTEGER AND da.vencido IS NOT true AND (SDA.estatusSolicitud = 'Carga y consulta de resultados' OR SDA.estatussolicitud = 'Aspirantes en proceso resultados' OR SDA.estatussolicitud = 'Ya se imprimió su credencial' OR SDA.estatussolicitud = 'No se ha impreso credencial' OR SDA.estatussolicitud = 'Elección de pruebas no calendarizado' OR SDA.estatussolicitud = 'Resultado final del comité' OR SDA.estatussolicitud = 'Autodescripción concluida' OR SDA.estatussolicitud = 'Rechazado por comité' OR SDA.estatussolicitud = 'Elección de pruebas calendarizado') AND da.vencido IS NOT true LEFT JOIN CatTipoAdmision AS TA ON TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia AS R ON R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno AS TAL ON TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus.persistenceid = sda.CATCAMPUS_PID LEFT JOIN ASPIRANTESPRUEBAS AS AP ON AP.caseid = sda.caseid AND ap.cattipoprueba_pid = 1 AND ap.responsabledisponible_pid IS NOT NULL LEFT JOIN sesiones AS sesion ON sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible AS RD ON RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas AS Pruebas ON Pruebas.persistenceid = AP.prueba_pid WHERE sda.iseliminado = false AND (sda.isAspiranteMigrado IS NULL OR sda.isAspiranteMigrado = false) [WHERE] GROUP BY sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, periodo.fechafin, sda.bachillerato, sda.promediogeneral, sda.estatussolicitud, da.tipoalumno, sda.caseid, sda.telefonocelular, da.idbanner, campus.grupobonita, ta.descripcion, r.descripcion, tal.descripcion, prepa.descripcion, catcampus.descripcion, gestionescolar.clave, sda.persistenceid, sesion.nombre, sesion.persistenceid, RD.responsableid, RD.horario, Pruebas.aplicacion, tp.finalizado, tp.countrechazo [ORDERBY] [LIMITOFFSET];";

	public static final String GET_LISTA_REPORTE_OV_EXPECIFICO_EXCEL = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, periodo.fechafin AS periodofin, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision, R.descripcion AS residensia, TAL.descripcion AS tipoDeAlumno, catcampus.descripcion AS transferencia, sesion.nombre AS sesion, sesion.persistenceid AS idsesion, RD.responsableid, RD.horario, CAST(TO_CHAR(Pruebas.aplicacion, 'DD-MM-YYYY') as varchar) as fechaentrevista, tp.finalizado, tp.countrechazo FROM SOLICITUDDEADMISION as sda LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID = sda.CATPERIODO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID INNER JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true LEFT JOIN CatTipoAdmision as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus.persistenceid=sda.CATCAMPUS_PID INNER JOIN ASPIRANTESPRUEBAS as AP on AP.caseid = sda.caseid and ap.cattipoprueba_pid = 1 and ap.responsabledisponible_pid is not null LEFT JOIN sesiones as sesion on sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible as RD on RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas as Pruebas ON Pruebas.persistenceid = AP.prueba_pid WHERE sda.iseliminado=false and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false ) [WHERE] GROUP BY sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, periodo.fechafin, sda.bachillerato, sda.promediogeneral, sda.estatussolicitud, da.tipoalumno, sda.caseid, sda.telefonocelular, da.idbanner, campus.grupobonita, ta.descripcion, r.descripcion, tal.descripcion, prepa.descripcion, catcampus.descripcion, gestionescolar.clave, sda.persistenceid, sesion.nombre, sesion.persistenceid, RD.responsableid, RD.horario, Pruebas.aplicacion, tp.finalizado, tp.countrechazo [ORDERBY]";
	
	public static final String COUNT_LISTA_REPORTE_OV_EXPECIFICO  = "SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION as sda LEFT JOIN testpsicometrico AS tp  ON tp.caseid::INTEGER = sda.caseid  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID INNER JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true AND (SDA.estatusSolicitud = 'Carga y consulta de resultados' OR SDA.estatussolicitud = 'Aspirantes en proceso resultados' OR SDA.estatussolicitud = 'Ya se imprimió su credencial' OR SDA.estatussolicitud = 'No se ha impreso credencial' OR SDA.estatussolicitud = 'Elección de pruebas no calendarizado' OR SDA.estatussolicitud = 'Resultado final del comité' OR SDA.estatussolicitud = 'Autodescripción concluida') AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN ASPIRANTESPRUEBAS as AP on AP.caseid = sda.caseid and ap.cattipoprueba_pid = 1 and ap.responsabledisponible_pid is not null  LEFT JOIN sesiones as sesion on sesion.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible as RD on RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas as Pruebas ON Pruebas.persistenceid = AP.prueba_pid  WHERE sda.iseliminado=false and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false ) [WHERE] "
	
	public static final String GET_CARRERAS_BY_CAMPUS = "SELECT nombre,persistenceid FROM catgestionescolar where campus = ? and  isEliminado is false ORDER BY nombre ASC";
	
	public static final String GET_CARRERAS_BY_CAMPUSMULTIPLE = "SELECT nombre,persistenceid FROM catgestionescolar where [CAMPUS] and isEliminado is false ORDER BY nombre ASC";
	
	public static final String GET_PERIODOS = "SELECT descripcion, persistenceid, clave FROM catperiodo WHERE isEliminado is false ORDER BY SUBSTRING(descripcion, POSITION(' ' IN descripcion) + 1, 4) DESC, CASE WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Enero' THEN 1 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Febrero' THEN 2 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Marzo' THEN 3 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Abril' THEN 4 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Mayo' THEN 5 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Junio' THEN 6 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Julio' THEN 7 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Agosto' THEN 8 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Septiembre' THEN 9 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Octubre' THEN 10 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Noviembre' THEN 11 WHEN SUBSTRING(descripcion, 1, POSITION(' ' IN descripcion) - 1) = 'Diciembre' THEN 12 END DESC;";
}

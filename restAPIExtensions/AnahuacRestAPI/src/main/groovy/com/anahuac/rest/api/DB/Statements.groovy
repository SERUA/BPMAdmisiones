package com.anahuac.rest.api.DB

class Statements {

	public static final String CONFIGURACIONES="SELECT * FROM CATCONFIGURACION";

	public static final String CONFIGURACIONESSSA="SELECT * FROM CATCONFIGURACION WHERE CLAVE = 'SASAzure'";

	public static final String DELETE_CATGESTIONESCOLAR="UPDATE CATGESTIONESCOLAR SET ISELIMINADO=true WHERE persistenceid=?";

	public static final String INSERT_CATLICENCIATURA="INSERT INTO CATLICENCIATURA (CLAVE,DESCRIPCION,FECHACREACION,ISELIMINADO,PERSISTENCEVERSION,USUARIOCREACION,PERSISTENCEID) VALUES (?,?,?,?,?,?,?);"

	public static final String GET_DETALLESOLICITUD="select IdBanner,ObservacionesRechazo,ObservacionesListaRoja,ObservacionesCambio,ordenpago  from detallesolicitud where caseid=(select concat(caseid,'') from SOLICITUDDEADMISION where correoelectronico=?  ORDER BY persistenceid desc limit 1)"

	public static final String GET_CAT_NOTIFICACIONES_CAMPUS_PROCESO_CODIGO="SELECT * from catnotificaciones where caseid=(SELECT max(caseid) FROM procesocaso where campus = ? and proceso='CatNotificaciones') and codigo=?"

	public static final String GET_FIRMA_PERSISTENCEID="SELECT * FROM CATNOTIFICACIONESFIRMA where persistenceId=?"

	public static final String GET_TASK_USERID_NAME="WITH filter (userid,taskname ) AS (VALUES (?,? ) ) SELECT DISTINCT pi.tenantid, pi.id, pi.name, pi.startedby, fi.name AS taskname FROM process_instance pi INNER JOIN public.flownode_instance fi ON pi.id = fi.rootcontainerid AND fi.name=(SELECT taskname FROM filter) AND (fi.assigneeid=0 OR fi.assigneeid=(SELECT userid FROM filter)) AND fi.statename = 'ready'LEFT JOIN public.actor actor ON actor.id=fi.actorid LEFT JOIN public.actormember amember ON amember.actorid=actor.id LEFT JOIN public.role rol ON rol.id=amember.roleid LEFT JOIN public.group_ grupo ON grupo.id=amember.groupid LEFT JOIN public.user_ usuario ON usuario.id=amember.userid INNER JOIN public.user_membership um ON (um.roleid=rol.id OR  grupo.id=um.groupid) AND (amember.groupid>0 OR  amember.roleid>0) AND um.userid= (SELECT userid FROM filter)"

	public static final String INSERT_CAT_NOTIFICACIONES_FIRMA="INSERT INTO CATNOTIFICACIONESFIRMA (PERSISTENCEID, CARGO, CORREO, GRUPO, NOMBRECOMPLETO, PERSISTENCEVERSION, SHOWCARGO, SHOWCORREO, SHOWGRUPO, SHOWTELEFONO, SHOWTITULO, TELEFONO, TITULO, CAMPUS, FACEBOOK, TWITTER, APELLIDO, BANNER, isEliminar) VALUES ((SELECT count(persistenceid)+1 from CATNOTIFICACIONESFIRMA ), ?, ?, ?, ?, 0, ?, ?, ?, ?, ?, ?, ?, ? ,?,?,?,?,false) RETURNING persistenceid;";

	public static final String UPDATE_CAT_NOTIFICACIONES_FIRMA="UPDATE CATNOTIFICACIONESFIRMA SET  CARGO = ?, CORREO = ?, GRUPO = ?, NOMBRECOMPLETO = ?,  SHOWCARGO = ?, SHOWCORREO = ?, SHOWGRUPO = ?, SHOWTELEFONO = ?, SHOWTITULO = ?, TELEFONO = ?, TITULO = ?, CAMPUS = ?, FACEBOOK = ?, TWITTER = ?, APELLIDO = ?, BANNER = ? WHERE PERSISTENCEID = ?;"

	public static final String DELETE_CAT_NOTIFICACIONES_FIRMA="UPDATE CATNOTIFICACIONESFIRMA SET  ISELIMINAR = true WHERE PERSISTENCEID = ?;"

	public static final String UPDATE_CAT_NOTIFICACIONES ="update catnotificaciones set anguloImagenFooter = ?, anguloImagenHeader = ?, asunto = ?, comentarioLeon = ?, contenido  = ?, contenidoCorreo = ?, contenidoLeonel = ?, descripcion = ?, docGuiaEstudio = ?, enlaceBanner = ?, enlaceContacto = ?, enlaceFacebook = ?, enlaceFooter = ?, enlaceInstagram = ?, enlaceTwitter = ?, nombreImagenFooter = ?, textoFooter  = ?, tipoCorreo = ?, titulo = ?, urlImgFooter = ?, urlImgHeader = ? WHERE codigo = ? AND caseid= ?"

	public static final String INSERT_CAT_NOTIFICACIONES ="INSERT INTO catnotificaciones  (anguloImagenFooter , anguloImagenHeader , asunto , comentarioLeon , contenido  , contenidoCorreo , contenidoLeonel , descripcion , docGuiaEstudio , enlaceBanner , enlaceContacto , enlaceFacebook , enlaceFooter , enlaceInstagram , enlaceTwitter , nombreImagenFooter , textoFooter  , tipoCorreo , titulo , urlImgFooter , urlImgHeader   codigo   caseid) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

	public static final String GET_CARTAS_NOTIFICACIONES="SELECT c.* FROM catnotificaciones c INNER JOIN procesocaso pc on pc.caseid=c.caseid and pc.campus=? WHERE c.tipoCorreo = 'Carta'"

	public static final String GET_CAT_NOTIFICACION_FIRMA="SELECT PERSISTENCEID, CARGO, CORREO, GRUPO, NOMBRECOMPLETO, PERSISTENCEVERSION, SHOWCARGO, SHOWCORREO, SHOWGRUPO, SHOWTELEFONO, SHOWTITULO, TELEFONO, TITULO, CAMPUS, FACEBOOK, TWITTER, APELLIDO, BANNER FROM CATNOTIFICACIONESFIRMA [WHERE] [ORDERBY] [LIMITOFFSET];"

	public static final String GET_CAMPUS_ID_FROM_CLAVE="SELECT persistenceid as campus_id FROM CATCAMPUS where grupoBonita=? limit 1 "

	public static final String GET_VALIDACION_PAIS=  "SELECT COUNT(PERSISTENCEID) as total FROM [TABLA] WHERE clave=? AND isEliminado=false";

	public static final String GET_IDBANNER_BY_IDBANNER="SELECT idbanner FROM DETALLESOLICITUD where idbanner=?;"

	//	public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	public static final String GET_ASPIRANTES_EN_RED = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as NombreVPD, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID  LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID  LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID  WHERE sda.iseliminado=false  AND (sda.ESTATUSSOLICITUD != 'Solicitud rechazada') AND (sda.ESTATUSSOLICITUD != 'Solicitud lista roja') AND (sda.ESTATUSSOLICITUD != 'Aspirantes registrados sin validación de cuenta') AND (sda.ESTATUSSOLICITUD !='Aspirantes registrados con validación de cuenta') AND (sda.ESTATUSSOLICITUD != 'Solicitud en proceso') AND (sda.ESTATUSSOLICITUD != 'Solicitud recibida' ) AND (sda.ESTATUSSOLICITUD != 'Solicitud a modificar' ) AND (sda.ESTATUSSOLICITUD != 'Solicitud modificada' ) [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid [ORDERBY] [LIMITOFFSET]"

	public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, sda.telefono, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,sda.telefono,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid [ORDERBY] [LIMITOFFSET] ";

	public static final String GET_ASPIRANTES_EN_PROCESO_RED = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado end AS procedencia, To_char(CURRENT_TIMESTAMP - To_timestamp(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.nombre AS licenciatura, periodo.descripcion AS ingreso, CASE WHEN estado.descripcion isnull THEN sda.estadoextranjero ELSE estado.descripcion end AS estado, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion end AS preparatoria, sda.promediogeneral, sda.estatussolicitud, da.tipoalumno, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, ta.descripcion AS tipoadmision , r.descripcion AS residensia, tal.descripcion AS tipodealumno, catcampus.descripcion AS transferencia, campusestudio.clave AS clavecampus, gestionescolar.clave AS clavelicenciatura, sea.sesiones_pid FROM solicituddeadmision sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.catcampus_pid [CAMPUS] LEFT JOIN catcampus campusestudio ON campusestudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catgestionescolar gestionescolar ON gestionescolar.persistenceid=sda.catgestionescolar_pid [PROGRAMA] LEFT JOIN catperiodo periodo ON periodo.persistenceid =sda.catperiodo_pid [INGRESO] LEFT JOIN catestados estado ON estado.persistenceid =sda.catestado_pid [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.persistenceid =sda.catbachilleratos_pid [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.CASEID::INTEGER=da.CASEID::INTEGER AND da.vencido IS NOT TRUE LEFT JOIN cattipoadmision AS ta ON ta.persistenceid = da.cattipoadmision_pid LEFT JOIN catresidencia AS r ON r.persistenceid = da.catresidencia_pid LEFT JOIN cattipoalumno AS tal ON tal.persistenceid = da.cattipoalumno_pid LEFT JOIN catcampus catcampus ON catcampus .persistenceid=sda.catcampus_pid LEFT JOIN catpais AS catpais ON catpais.persistenceid=sda.catpais_pid [TIPOALUMNO] LEFT JOIN sesionaspirante AS sea ON sea.username = sda.correoelectronico [WHERE] GROUP BY prepa.descripcion, sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero, sda.bachillerato, sda.promediogeneral, sda.estatussolicitud, da.tipoalumno, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, ta.descripcion, r.descripcion, tal.descripcion, catcampus.descripcion, campusestudio.clave, gestionescolar.clave, sea.sesiones_pid, sda.persistenceid [ORDERBY] [LIMITOFFSET]"
	
	public static final String GET_ASPIRANTES_SMART_CAMPUS = "SELECT idbanner,concat(apellidopaterno,' ',apellidomaterno,' ',nombre,' ',segundonombre) as nombre, curp, vpd, campusDestino as campus, licenciatura as programa, periodo, estadoPreparatoria as procedencia, concat(clavePreparatoria,' - ',preparatoria) as preparatoria, promedio, residencia, estatus, fechaEnvioSolicitud, fechaUltimaModificacion, correo, fechaPago, rutaPago, rutaSolicitud, foto FROM AspirantesSmartCampus [WHERE] [ORDERBY] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid [ORDERBY] [LIMITOFFSET] ";
	//public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid [ORDERBY] [LIMITOFFSET] ";
	//public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_ASPIRANTES_EN_PROCESO_COUNT = "SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN sesionaspirante AS sea ON sea.username = sda.correoelectronico LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID  WHERE sda.iseliminado=false and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false)"

	//	public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE as licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, sda.urlFoto, sda.urlConstancia,sda.urlActaNacimiento,sda.urlCartaAA, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] INNER JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catRegistro Registro on Registro.caseId= sda.caseId LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=Registro.catgestionescolar_pid   [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE as licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, sda.urlFoto, sda.urlConstancia,sda.urlActaNacimiento,sda.urlCartaAA, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] INNER JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catRegistro Registro on Registro.caseId= sda.caseId LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=Registro.catgestionescolar_pid   [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE as licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, sda.urlFoto, sda.urlConstancia,sda.urlActaNacimiento, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] INNER JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catRegistro Registro on Registro.caseId= sda.caseId LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=Registro.catgestionescolar_pid   [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE as licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] INNER JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catRegistro Registro on Registro.caseId= sda.caseId LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=Registro.catgestionescolar_pid   [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE as licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catRegistro Registro on Registro.caseId= sda.caseId LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=Registro.catgestionescolar_pid  [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS="SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, catcampus.descripcion as transferencia, STRING_AGG( tipo.descripcion || '  ' || to_char( p.aplicacion , 'DD/MM/YYYY') || '   ' || case when tipo.persistenceid=1 then rd.horario  else p.entrada ||' - '||p.salida end, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes,(select String_AGG( concat,',' ) as asistencia from ( select  distinct on (AP.cattipoprueba_pid) AP.cattipoprueba_pid,(concat(count( CASE WHEN (AP.asistencia IS TRUE OR AP.acreditado IS TRUE )  THEN 1 END),'-',  tipo.descripcion) ) from aspirantespruebas as AP INNER JOIN cattipoprueba as tipo on  tipo.persistenceid = AP.cattipoprueba_pid  where username = sda.correoelectronico  group by tipo.descripcion,ap.persistenceid,AP.cattipoprueba_pid order by AP.cattipoprueba_pid,ap.persistenceid desc limit 3) datos) as asistencia, da.cbcoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid and (p.cattipoprueba_pid!=1 OR p.persistenceid=rd.prueba_pid AND p.cattipoprueba_pid=1) [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, prepa.estado, da.cbcoincide [TIPOALUMNO]  [ORDERBY] [LIMITOFFSET]"

	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS="SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, catcampus.descripcion as transferencia, STRING_AGG( tipo.descripcion || '  ' || to_char( p.aplicacion , 'DD/MM/YYYY') || '   ' || case when tipo.persistenceid=1 then rd.horario  else p.entrada ||' - '||p.salida end, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes,STRING_AGG((select concat(count( CASE WHEN paseL.asistencia THEN 1 END),'-', CASE WHEN tipo.descripcion IS NULL THEN 'Entrevista' ELSE tipo.descripcion END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia, da.cbcoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid and (p.cattipoprueba_pid!=1 OR p.persistenceid=rd.prueba_pid AND p.cattipoprueba_pid=1) [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, prepa.estado, da.cbcoincide [TIPOALUMNO]  [ORDERBY] [LIMITOFFSET]"

	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS="SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, catcampus.descripcion as transferencia, STRING_AGG( tipo.descripcion || '  ' || to_char( p.aplicacion , 'DD/MM/YYYY') || '   ' || case when tipo.persistenceid=1 then rd.horario  else p.entrada ||' - '||p.salida end, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre [TIPOALUMNO]  [ORDERBY] [LIMITOFFSET]"

	public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS2="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID   [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID  [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  left join sesionaspirante saw  on  saw.username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid [WHERE]"

	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES=" SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]"

	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES = "SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.fechasolicitudenviada, sda.fechaultimamodificacion,  sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion,STRING_AGG((select concat(count(CASE WHEN paseL.asistencia THEN 1 END),'-', CASE WHEN tipo.descripcion IS NULL THEN 'Entrevista' ELSE tipo.descripcion END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia, da.cbcoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid and (p.cattipoprueba_pid!=1 OR p.persistenceid=rd.prueba_pid AND p.cattipoprueba_pid=1) [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio ,prepa.estado,da.cbcoincide [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]";

	public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES = "SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.fechasolicitudenviada, sda.fechaultimamodificacion,  sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE CASE WHEN s.tipo LIKE '%E,R%'OR s.tipo LIKE '%R,E%' THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) ELSE NULL  END END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion,(select String_AGG( concat,',' ) as asistencia from ( select  distinct on (AP.cattipoprueba_pid) AP.cattipoprueba_pid,(concat(count( CASE WHEN (AP.asistencia IS TRUE OR AP.acreditado IS TRUE )  THEN 1 END),'-',  tipo.descripcion) ) from aspirantespruebas as AP INNER JOIN cattipoprueba as tipo on  tipo.persistenceid = AP.cattipoprueba_pid  where username = sda.correoelectronico  group by tipo.descripcion,ap.persistenceid,AP.cattipoprueba_pid order by AP.cattipoprueba_pid,ap.persistenceid desc limit 3) datos) as asistencia, da.cbcoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid and (p.cattipoprueba_pid!=1 OR p.persistenceid=rd.prueba_pid AND p.cattipoprueba_pid=1) [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio ,prepa.estado,da.cbcoincide [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES = "SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.fechasolicitudenviada, sda.fechaultimamodificacion,  sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE CASE WHEN s.tipo LIKE '%E,R%'OR s.tipo LIKE '%R,E%' THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) ELSE NULL  END END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion,STRING_AGG((select concat(count(CASE WHEN paseL.asistencia THEN 1 END),'-', CASE WHEN tipo.descripcion IS NULL THEN 'Entrevista' ELSE tipo.descripcion END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia, da.cbcoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid and (p.cattipoprueba_pid!=1 OR p.persistenceid=rd.prueba_pid AND p.cattipoprueba_pid=1) [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio ,prepa.estado,da.cbcoincide [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]";

	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES = "SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion,STRING_AGG((select concat(count(CASE WHEN paseL.asistencia THEN 1 END),'-', tipo.descripcion) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]";

	public static final String GET_ASPIRANTE_TRANSFERENCIA="SELECT campusanterior, campusnuevo FROM catbitacoratransferencias where correoaspirante=? order by persistenceid desc  limit 1"

	public static final String GET_ASPIRANTE_ASISTENCIA="WITH FILTER (username) as (values(?)) SELECT paselista.persistenceid, paselista.asistencia, pruebas.cattipoprueba_pid, ctp.descripcion FROM paselista paselista INNER JOIN pruebas pruebas ON pruebas.persistenceid=paselista.prueba_pid INNER JOIN cattipoprueba ctp ON ctp.persistenceid=pruebas.cattipoprueba_pid WHERE username=(SELECT username from filter) and paselista.asistencia=true"

	public static final String GET_INFOCARTA_PLANTILLA="WITH FILTER (correo) as (values(LOWER(?)))select * from infocarta where curp=(SELECT curp from SOLICITUDDEADMISION where LOWER(correoelectronico)=(SELECT correo from filter) limit 1) OR  numerodematricula=(SELECT idbanner from detallesolicitud d left join SOLICITUDDEADMISION s on s.caseid=d.caseid::bigint where LOWER(s.correoelectronico)=(SELECT correo from filter) limit 1)"

	public static final String GET_INFOCARTATEMPORAL_PLANTILLA="WITH FILTER (correo) as (values(LOWER(?)))select * from infocartatemporal where curp=(SELECT curp from SOLICITUDDEADMISION where LOWER(correoelectronico)=(SELECT correo from filter) limit 1) OR  numerodematricula=(SELECT idbanner from detallesolicitud d left join SOLICITUDDEADMISION s on s.caseid=d.caseid::bigint where LOWER(s.correoelectronico)=(SELECT correo from filter) limit 1)"

	public static final String GET_DOCUMENTOSTEXTOS_BY_CAMPUSPID="SELECT * FROM catdocumentostextos where campus_pid=(SELECT persistenceid FROM catcampus where grupobonita=? and iseliminado=false limit 1)"

	//	public static final String GET_SOLICITUDES_EN_PROCESO=    "SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_SOLICITUDES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, REGISTRO.numeroContacto FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATREGISTRO AS REGISTRO ON REGISTRO.CASEID = sda.caseid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NULL [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_SOLICITUDES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	/*************DANIEL CERVANTES***********************/
	//public static final String GET_CATCAMPUS="SELECT * FROM CATCAMPUS [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATCAMPUS="SELECT  c.*, p.descripcion as pais, e.clave as cEstado, e.descripcion as dEstado FROM CATCAMPUS c left join CATPAIS p ON c.PAIS_PID  = p.PERSISTENCEID  left join CATESTADOS e ON  e.PERSISTENCEID  = c.ESTADO_PID  [WHERE] [ORDERBY] [LIMITOFFSET]"
	//public static final String GET_CATCAMPUS="SELECT * FROM CATCAMPUS c left join CATPAIS p ON c.PAIS_PID  = p.PERSISTENCEID  left join CATESTADOS e ON  e.PERSISTENCEID  = c.ESTADO_PID  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPAIS="SELECT * FROM CATPAIS [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATESTADOS="SELECT * FROM CATESTADOS [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATBACHILLERATO="SELECT * FROM CATBACHILLERATOS  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATCIUDAD="SELECT c.*, b.descripcion as campus FROM CATCIUDAD c left join CATCAMPUS b on b.PERSISTENCEID = c.CAMPUS_PID  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATFILTRADOCATALOGOSAUTODESCRIPCION = "SELECT * FROM [CATALOGOAD] [WHERE] [ORDERBY] [LIMITOFFSET]"
	/*************DANIEL CERVANTES FIN*******************/
	/*************JUAN ESQUER***********************/
	public static final String GET_CATTITULO="SELECT * FROM CATTITULO  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATESTADOCIVIL ="SELECT * FROM CATESTADOCIVIL  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATTIPOPRUEBA = "SELECT * FROM CATTIPOPRUEBA [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPSICOLOGO = "SELECT * FROM CATPSICOLOGO  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_USER_BONITA = "SELECT DISTINCT u.id, u.firstname, u.lastname FROM user_ u INNER JOIN user_membership um ON um.userid=u.id INNER JOIN role r ON r.id=um.roleid [ROLE] INNER JOIN group_ g ON g.id=um.groupid [GROUP] [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATGESTIONESCOLAR = "SELECT GE.*, campus.descripcion as nombreCampus FROM CATGESTIONESCOLAR as GE  LEFT JOIN catcampus campus ON campus.grupoBonita = GE.campus [CAMPUS]  [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String INSERT_SESION="INSERT INTO SESIONES ( persistenceid,persistenceversion,NOMBRE, DESCRIPCION, FECHA_INICIO, ISMEDICINA, PREPARATORIA_PID, ESTADO_PID, PAIS_PID, BORRADOR, CAMPUS_PID, TIPO,CIUDAD_PID,Ultimo_dia_inscripcion, isEliminado,periodo_pid,usuarios_lst_id,estado_preparatoria) VALUES ( case when (SELECT max(persistenceId)+1 from SESIONES ) is null then 1 else (SELECT max(persistenceId)+1 from SESIONES) end,0,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?, ?);";
	public static final String UPDATE_SESION="UPDATE SESIONES set NOMBRE=?, DESCRIPCION=?, FECHA_INICIO=?, ISMEDICINA=?, PREPARATORIA_PID=?, ESTADO_PID=?, PAIS_PID=?, BORRADOR=?, CAMPUS_PID=?, TIPO=?, CIUDAD_PID=?, Ultimo_dia_inscripcion=?, isEliminado=?, periodo_pid=?, usuarios_lst_id=?, estado_preparatoria = ?  WHERE persistenceId=?"
	public static final String INSERT_PRUEBA="INSERT INTO PRUEBAS ( persistenceid,NOMBRE, APLICACION, ENTRADA, SALIDA, REGISTRADOS, ULTIMO_DIA_INSCRIPCION, CUPO, LUGAR, CAMPUS_PID, CALLE, NUMERO_INT, NUMERO_EXT, COLONIA, CODIGO_POSTAL, MUNICIPIO, PAIS_PID, ESTADO_PID, ISELIMINADO, SESION_PID, DURACION, DESCRIPCION, cattipoprueba_pid, online) VALUES ( case when (SELECT max(persistenceId)+1 from PRUEBAS ) is null then 1 else (SELECT max(persistenceId)+1 from PRUEBAS) end,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?);"
	public static final String UPDATE_PRUEBA="UPDATE PRUEBAS SET NOMBRE=?, APLICACION=?, ENTRADA=?, SALIDA=?, REGISTRADOS=?, ULTIMO_DIA_INSCRIPCION=?, CUPO=?, LUGAR=?, CAMPUS_PID=?, CALLE=?, NUMERO_INT=?, NUMERO_EXT=?, COLONIA=?, CODIGO_POSTAL=?, MUNICIPIO=?, PAIS_PID=?, ESTADO_PID=?, ISELIMINADO=?, SESION_PID=?, DURACION=?, DESCRIPCION=?, cattipoprueba_pid=?, online=? WHERE PERSISTENCEID=?"
	public static final String VALIDAR_FECHA_PRUEBA_REGISTRADOS="SELECT * FROM pruebas where registrados>0 and persistenceid=?"
	public static final String INSERT_RESPONSABLEDISPONIBLE="INSERT INTO RESPONSABLEDISPONIBLE ( persistenceid,persistenceversion,HORARIO, DISPONIBLE, RESPONSABLEID, PRUEBA_PID, licenciaturas) VALUES ( case when (SELECT max(persistenceId)+1 from RESPONSABLEDISPONIBLE ) is null then 1 else (SELECT max(persistenceId)+1 from RESPONSABLEDISPONIBLE) end,0,?, ?, ?, ?, ?);"
	public static final String UPDATE_RESPONSABLEDISPONIBLE="UPDATE RESPONSABLEDISPONIBLE SET HORARIO=?, DISPONIBLE=?, RESPONSABLEID=?, PRUEBA_PID=?, licenciaturas=?, iseliminado=? WHERE PERSISTENCEID=?";
	public static final String DELETEIFBEFORECREATED="UPDATE responsabledisponible  set iseliminado=true where prueba_pid=? and responsableid=?"
	public static final String UPDATE_SESION_FECHA="UPDATE SESIONES SET FECHA_INICIO=(SELECT MIN(aplicacion) FROM PRUEBAS p WHERE p.SESION_PID = ? and p.iseliminado=false) WHERE persistenceid=?"
	public static final String UPDATE_PRUEBA_FECHA="UPDATE pruebas pruebas set ultimo_dia_inscripcion=(SELECT max(ultimo_dia_inscripcion) FROM pruebas where sesion_pid=? and iseliminado=false) where sesion_pid=?"
	public static final String DELETE_IF_CAMBIO_DURACION="DELETE FROM RESPONSABLEDISPONIBLE WHERE PRUEBA_PID=?"
	public static final String DELETEHORARIOSRESPONSABLE="DELETE FROM RESPONSABLEDISPONIBLE WHERE persistenceId=?"
	public static final String GET_SESIONES_CALENDARIO="SELECT s.persistenceid AS id, CASE WHEN p.entrada IS NULL THEN concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' 00:00' ) ELSE concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.entrada ) END AS start_date, CASE WHEN p.entrada IS NULL THEN concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' 23:00' ) ELSE concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.salida) END AS end_date, CASE WHEN s.BORRADOR THEN concat(s.nombre, ' <i class=\"small material-icons\">do_not_disturb</i>' ) ELSE concat(s.nombre, ' <i class=\"small material-icons\">language</i>' ) END AS text, CASE WHEN TO_TIMESTAMP(s.ultimo_dia_inscripcion, 'YYYY-MM-DD HH24:MI:SS')<=now() THEN '#969696'ELSE CASE WHEN s.tipo LIKE '%R,F,E%'OR  s.tipo LIKE '%R,E,F%'OR  s.tipo LIKE '%F,R,E%'OR  s.tipo LIKE '%F,E,R%'OR  s.tipo LIKE '%E,F,R%'OR  s.tipo LIKE '%E,R,F%'THEN '#660066'ELSE CASE WHEN s.tipo LIKE '%R,F%'OR  s.tipo LIKE '%F,R%'THEN '#33cc33'ELSE CASE WHEN s.tipo LIKE '%E,F%'OR  s.tipo LIKE '%F,E%'THEN '#0099ff'ELSE CASE WHEN s.tipo LIKE '%R%'THEN '#cc3300'ELSE CASE WHEN s.tipo LIKE '%E%'THEN '#cc6600'ELSE CASE WHEN s.tipo LIKE '%F%'THEN '#ff3300'ELSE'#ff5900'END END END END END END END AS color FROM SESIONES s LEFT JOIN PRUEBAS p ON p.SESION_PID =s.persistenceid AND (SELECT fa.persistenceid FROM pruebas fa WHERE fa.sesion_pid= s.persistenceid LIMIT 1 )=p.persistenceid [WHERE]"
	public static final String GET_SESIONES_CALENDARIOASPIRANTE="SELECT s.persistenceid as id, case when p.entrada is null then  concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' 00:00' ) else concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.entrada ) end as start_date, case when p.entrada is null then  concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' 23:00' ) else concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.salida) end as end_date, case when s.BORRADOR then concat(s.nombre, '' ) else concat(s.nombre, '' ) end as text, case when s.fecha_inicio<now() then '#969696'else '#ff5900' end as color FROM SESIONES s INNER JOIN PRUEBAS p on p.SESION_PID =s.persistenceid and p.iseliminado=false and (SELECT fa.persistenceid FROM pruebas fa WHERE fa.sesion_pid= s.persistenceid AND fa.iseliminado=false and fa.cattipoprueba_pid!=1 LIMIT 1 )=p.persistenceid and p.registrados<p.cupo and p.cattipoprueba_pid!=1 LEFT JOIN catcampus AS cc ON S.campus_pid = cc.persistenceid [WHERE]"
	public static final String GET_SESION_ID="SELECT s.* FROM SESIONES s WHERE persistenceId=? and s.iseliminado!=true"
	public static final String GET_PRUEBAS_SESION_PID="SELECT p.*, r.horario, r.RESPONSABLEID , r.DISPONIBLE, c.descripcion as tipo, r.persistenceId as rid, r.ocupado, r.licenciaturas  FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE  r on r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid where p.SESION_PID =? AND p.iseliminado=false ORDER BY r.horario"
	public static final String GET_REGISTRADOS_CUPO="SELECT p.registrados, p.cupo from pruebas p where p.sesion_pid=? and cattipoprueba_pid!=1"
	public static final String UPDATE_REGISTRADOS="UPDATE PRUEBAS SET REGISTRADOS=(SELECT registrados+1 FROM pruebas WHERE sesion_pid=? and cattipoprueba_pid!=1 LIMIT 1) where  sesion_pid=? and cattipoprueba_pid!=1"
	public static final String UPDATE_REGISTRADOS_INV="UPDATE PRUEBAS SET REGISTRADOS=(SELECT registrados-1 FROM pruebas WHERE sesion_pid=? and cattipoprueba_pid!=1 LIMIT 1) where  sesion_pid=? and cattipoprueba_pid!=1"
	public static final String INSERT_sesionaspirante="INSERT INTO sesionaspirante (persistenceid,persistenceversion,username,sesiones_pid,responsabledisponible_pid) VALUES ( case when (SELECT max(persistenceId)+1 from sesionaspirante ) is null then 1 else (SELECT max(persistenceId)+1 from sesionaspirante) end,0,?,?,?)"
	public static final String UPDATE_sesionaspirante="UPDATE sesionaspirante SET username=?,sesiones_pid=?,responsabledisponible_pid=? WHERE persistenceid=?"
	public static final String GET_SESIONASPIRANTE="SELECT * FROM sesionaspirante where username=?"
	public static final String GET_PRUEBAS_ASPIRANTE="SELECT p.persistenceid as prueba_pid FROM sesionaspirante sa inner join pruebas p on p.sesion_pid=sa.sesiones_pid and p.iseliminado=false  where username=?"
	public static final String GET_ASISTENCIA_PRUEBA_FALTA="SELECT asistencia, fecha, prueba_pid FROM paselista where username=? and prueba_pid=?"
	public static final String UPDATE_OCUPADO_RESPONSABLE_DISPONIBLE="update RESPONSABLEDISPONIBLE set OCUPADO=true where persistenceid=?"
	public static final String UPDATE_OCUPADO_RESPONSABLE_DISPONIBLE_INV="update RESPONSABLEDISPONIBLE set OCUPADO=false where persistenceid=?"
	public static final String GET_OCUPADO_RESPONSABLE_DISPONIBLE="SELECT persistenceId FROM RESPONSABLEDISPONIBLE where persistenceid=? and ocupado=true"
	public static final String GET_DATOS_SESION_USERNAME="select p.aplicacion,  tipo.descripcion, p.lugar, case when tipo.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, s.nombre as snombre, s.descripcion as sdescripcion, p.nombre as pnombre, p.descripcion as pdescripcion, p.municipio, p.colonia, p.codigo_postal,p.numero_int,p.calle, p.online from sesionaspirante sa LEFT JOIN sesiones s on s.persistenceid= sa.sesiones_pid left join pruebas p on p.sesion_pid=sa.sesiones_pid and p.iseliminado=false left join responsabledisponible rd on rd.persistenceid=sa.responsabledisponible_pid  left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid and (p.cattipoprueba_pid!=1 OR p.persistenceid=rd.prueba_pid AND p.cattipoprueba_pid=1)  where sa.username=? and tipo.descripcion is not null "
	public static final String UPDATE_REGISTRADOS_PRUEBAS="UPDATE PRUEBAS set registrados=(SELECT registrados+1 FROM pruebas where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?) ) where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?)"
	public static final String UPDATE_REGISTRADOS_PRUEBAS_INV="UPDATE PRUEBAS set registrados=(SELECT registrados-1 FROM pruebas where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?) ) where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?)"
	public static final String GET_PRUEBAS_SESION_PID_ASPIRANTE="SELECT p.*, r.horario, r.RESPONSABLEID , r.DISPONIBLE, c.descripcion as tipo, r.persistenceId as rid, r.ocupado, r.licenciaturas  FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE  r on r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid where p.SESION_PID =? AND p.iseliminado=false AND p.cattipoprueba_pid!=1 ORDER BY r.horario"
	public static final String GET_PRUEBAS_SESION_ENTREVISTA_ASPIRANTE="SELECT p.*, r.horario, r.RESPONSABLEID , r.DISPONIBLE, c.descripcion   AS tipo, r.persistenceId AS rid, r.ocupado, r.licenciaturas, disponibles.disponibles FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE r ON r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false LEFT JOIN cattipoprueba c ON c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN (SELECT p.persistenceid  AS prueba_pid, COUNT(r.ocupado) AS disponibles FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE r ON r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false WHERE p.SESION_PID =? AND p.iseliminado=false AND p.cattipoprueba_pid=1 AND r.disponible=true AND ocupado=false AND  (r.licenciaturas ='' or r.licenciaturas is null or r.licenciaturas like '%' || (SELECT g.descripcion from solicituddeadmision sda LEFT JOIN CATGESTIONESCOLAR g ON g.persistenceid=sda.CATGESTIONESCOLAR_PID where sda.correoelectronico=? limit 1) ||'%') GROUP BY p.persistenceid ORDER BY p.registrados ASC) disponibles ON disponibles.prueba_pid=p.persistenceid WHERE p.SESION_PID =? AND  (r.licenciaturas ='' or r.licenciaturas is null or r.licenciaturas like '%' || (SELECT g.descripcion from solicituddeadmision sda LEFT JOIN CATGESTIONESCOLAR g ON g.persistenceid=sda.CATGESTIONESCOLAR_PID where sda.correoelectronico=? limit 1) ||'%') AND p.iseliminado=false AND p.cattipoprueba_pid=1 AND r.disponible=true AND ocupado=false ORDER BY p.registrados ASC, disponibles.disponibles DESC";
	public static final String GET_HORARIOS_PRUEBAS_ENTREVISTA_ASPIRANTE="WITH FILTER (prueba_pid,aspirante) as (values (?,?)) SELECT r.horario, max(r.RESPONSABLEID) AS RESPONSABLEID , r.DISPONIBLE, max(r.persistenceId) AS rid, r.ocupado, '' AS licenciaturas FROM RESPONSABLEDISPONIBLE r WHERE r.PRUEBA_PID = (SELECT prueba_pid from filter) AND r.iseliminado=false AND r.ocupado=false AND r.disponible=true AND (r.licenciaturas =''OR  r.licenciaturas IS NULL OR  r.licenciaturas LIKE '%' || (SELECT g.nombre FROM solicituddeadmision sda LEFT JOIN CATGESTIONESCOLAR g ON g.persistenceid=sda.CATGESTIONESCOLAR_PID WHERE sda.correoelectronico=(SELECT aspirante from filter) limit 1) ||'%') GROUP BY r.horario, r.DISPONIBLE, r.ocupado ORDER BY r.horario ASC"
	public static final String INSERT_CATBITACORACORREOS="INSERT INTO CATBITACORACORREOS  (persistenceid, persistenceversion,codigo,de,estatus,fechacreacion,mensaje,para,campus) values (case when (SELECT max(persistenceId)+1 from CATBITACORACORREOS ) is null then 1 else (SELECT max(persistenceId)+1 from CATBITACORACORREOS ) end,0,?,?,?,now(),?,?,?)"
	public static final String PALETTE_COLOR_1="SELECT  '#660066' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND  (clave='E' OR  clave='R' OR  clave='F')"
	public static final String PALETTE_COLOR_2="SELECT  '#33cc33' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND    (clave='R' OR  clave='F')"
	public static final String PALETTE_COLOR_3="SELECT  '#0099ff' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND    (clave='E' OR  clave='F')"
	public static final String PALETTE_COLOR_4="SELECT  '#ff5900' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND    (clave='E' OR  clave='R')"
	public static final String PALETTE_COLOR_5="SELECT  '#cc3300' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND     clave='R'"
	public static final String PALETTE_COLOR_6="SELECT  '#cc6600' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND     clave='E'";
	public static final String PALETTE_COLOR_7="SELECT  '#ff3300' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND     clave='F'"
	public static final String REVISAR_DISPONIBLE_RESPONSABLE="WITH FILTER (aplicacion, responsable, prueba, fi, ff ) AS (VALUES (?, ?, ?, ?, ? ) ) SELECT p.aplicacion, p.entrada, p.salida, rd.RESPONSABLEID FROM SESIONES s INNER JOIN PRUEBAS p ON p.sesion_pid=s.persistenceid INNER JOIN RESPONSABLEDISPONIBLE rd ON rd.PRUEBA_PID=p.persistenceid WHERE aplicacion= TO_DATE((SELECT aplicacion FROM filter),'YYYY-MM-DD') AND RESPONSABLEID= (SELECT responsable FROM filter) AND P.persistenceid!= (SELECT prueba FROM filter) AND ((TO_TIMESTAMP((SELECT fi FROM filter), 'YYYY-MM-DD HH24:MI') >= TO_TIMESTAMP(p.aplicacion||' '||p.entrada, 'YYYY-MM-DD HH24:MI') AND TO_TIMESTAMP((SELECT fi FROM filter), 'YYYY-MM-DD HH24:MI') <TO_TIMESTAMP(p.aplicacion||' '||p.salida, 'YYYY-MM-DD HH24:MI')) OR  (TO_TIMESTAMP((SELECT ff FROM filter), 'YYYY-MM-DD HH24:MI') > TO_TIMESTAMP(p.aplicacion||' '||p.entrada, 'YYYY-MM-DD HH24:MI') AND TO_TIMESTAMP((SELECT ff FROM filter), 'YYYY-MM-DD HH24:MI')<=TO_TIMESTAMP(p.aplicacion||' '||p.salida, 'YYYY-MM-DD HH24:MI'))) AND P.ISELIMINADO = FALSE AND rd.iseliminado=false and p.cattipoprueba_pid=1 limit 1"

	public static final String GET_PSICOLOGOS_SESIONES="WITH FILTER ( responsable ) AS (VALUES ( ? ) ) SELECT distinct s.nombre,p.nombre as prueba,p.aplicacion, rd.RESPONSABLEID FROM SESIONES s INNER JOIN PRUEBAS p ON p.sesion_pid=s.persistenceid INNER JOIN RESPONSABLEDISPONIBLE rd ON rd.PRUEBA_PID=p.persistenceid WHERE RESPONSABLEID= (SELECT responsable FROM filter)  AND P.ISELIMINADO = FALSE AND rd.iseliminado=false and p.aplicacion>=current_date and p.cattipoprueba_pid=1";
	/*************JUAN ESQUER FIN*******************/
	/***********************JESUS OSUNA********************************/
	public static final String GET_CATESCOLARIDAD = "SELECT * FROM CATESCOLARIDAD [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATSEXO = "SELECT * FROM CATSEXO [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPARENTESCO = "SELECT * FROM CATPARENTESCO [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATDESCUENTOS = "SELECT c.*, b.descripcion as bachilleratos FROM CATDESCUENTOS c left join CATBACHILLERATOS b on b.PERSISTENCEID = c.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN CATCAMPUS a on a.grupobonita=c.campus [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATNACIONALIDAD = "SELECT * FROM CATNACIONALIDAD [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATGENERICO = "SELECT * FROM [CATALOGO] [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CORREO_BY_CASEID = " SELECT correoelectronico from solicituddeadmision where caseid = ?"

	/*************************JOSECARLOSFELIXIBARRA********************/
	public static final String GET_CATPARENTESCTO = "SELECT * FROM CATPARENTESCO  [WHERE] [ORDERBY] [LIMITOFFSET]"

	public static final String GET_INFO_CONSULTA_RESULTADOS = " SELECT SOLAD.urlFoto, CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER AND DETSOL.vencido IS NOT true  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion, inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion, campus.descripcion, estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_INFO_CONSULTA_RESULTADOS = " SELECT CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion, inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_INFO_CONSULTA_RESULTADOS = " SELECT SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion, inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion [ORDERBY] [LIMITOFFSET]";

	public static final String GET_INFO_CONSULTA_SIN_RESULTADOS = " SELECT SOLAD.urlFoto, CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, SOLAD.ESTATUSSOLICITUD, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus, campus.descripcion AS campussede,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) AND DETSOL.vencido IS NOT true  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion,  r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,campus.descripcion, estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";

	//public static final String GET_INFO_CONSULTA_SIN_RESULTADOS = " SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, SOLAD.ESTATUSSOLICITUD, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion,  r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_INFO_CONSULTA_SIN_RESULTADOS = " SELECT SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, SOLAD.ESTATUSSOLICITUD, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion,  r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion [ORDERBY] [LIMITOFFSET]";
	//v3 public static final String GET_INFO_CONSULTA_RESULTADOS = "SELECT STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion [ORDERBY] [LIMITOFFSET]";

	public static final String GET_INFO_CONSULTA_RESULTADOS_COUNT = "SELECT COUNT(*) AS registros FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER AND DETSOL.vencido IS NOT true  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE]";
	public static final String GET_INFO_CONSULTA_SIN_RESULTADOS_COUNT = "SELECT  COUNT(*) AS registros FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) AND DETSOL.vencido IS NOT true  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] ";
	//v1public static final String GET_INFO_CONSULTA_RESULTADOS_COUNT = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid  [WHERE]";

	/*************************JOSECARLOSFELIXIBARRA FIN****************/

	public static final String GET_TIPOPRUEBA = "SELECT c.persistenceid as tipoprueba_pid FROM PRUEBAS AS P LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid WHERE P.persistenceid = ?";

	public static final String GET_SESIONESASPIRANTE = "SELECT * from ( SELECT SA.*,RD.responsableid,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE SA.sesiones_pid = ? AND P.persistenceid = ? AND rd.responsableid = ?  AND (CAST( P.aplicacion AS DATE) >= CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(P.aplicacion as DATE) + integer '1') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)) [ENTREVISTA]  [WHERE] [ORDERBY] ) as datos where tieneOtraAsistencia = 0 [LIMITOFFSET]"

	//public static final String GET_SESIONESCALENDARIZADAS = "select * from (SELECT DISTINCT(P.persistenceid)  as pruebas_id,   P.nombre, P.aplicacion, ( CASE WHEN s.tipo LIKE '%R,F,E%'OR  s.tipo LIKE '%R,E,F%'OR  s.tipo LIKE '%F,R,E%'OR  s.tipo LIKE '%F,E,R%'OR  s.tipo LIKE '%E,F,R%'OR  s.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR  s.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR  s.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN s.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, S.persistenceid as sesiones_id, P.lugar, P.registrados as alumnos_generales, S.nombre as nombre_sesion, c.descripcion as tipo_prueba, P.cupo, P.entrada,P.salida FROM PRUEBAS as P  LEFT JOIN SESIONES as S on P.sesion_pid = S.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as RD on RD.prueba_pid = P.persistenceid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid WHERE P.ISELIMINADO = FALSE AND RD.responsableid = ? AND ( CAST(P.aplicacion AS DATE) >= CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(P.aplicacion as DATE) + integer '1') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)) [WHERE] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESCALENDARIZADAS_REGISTRADOS = "select * from (SELECT DISTINCT(Pruebas.persistenceid)  as pruebas_id,   Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR  Sesion.tipo LIKE '%R,E,F%'OR  Sesion.tipo LIKE '%F,R,E%'OR  Sesion.tipo LIKE '%F,E,R%'OR  Sesion.tipo LIKE '%E,F,R%'OR  Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR  Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR  Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion, ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as ResponsableD on ResponsableD.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid WHERE Pruebas.ISELIMINADO = FALSE AND ResponsableD.responsableid = ?  [WHERE] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	//public static final String EXT_SESIONESCALENDARIZADAS_REGISTRADOS = "(SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid AND rd.responsableid = ResponsableD.responsableid  GROUP BY sa.persistenceid,sda.caseid,p.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid,sa.username   ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME  LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid  GROUP BY sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid, sda.caseid,p.persistenceid,sa.username   ORDER BY SA.persistenceid) as asistencia  ) as CONTEO ) as registrados"
	public static final String EXT_SESIONESCALENDARIZADAS_REGISTRADOS = "(SELECT COUNT (AP.persistenceid) from ASPIRANTESPRUEBAS AS AP where AP.PRUEBA_PID = Pruebas.persistenceid and  CASE WHEN AP.CATTIPOPRUEBA_PID = 1 THEN  AP.responsabledisponible_pid  IN ((select persistenceid from responsabledisponible where responsableid = [RESPONSABLE] AND PRUEBA_PID = Pruebas.persistenceid and ocupado = true))  ELSE AP.responsabledisponible_pid  IS NULL END) as registrados,(SELECT P3.APLICACION FROM SESIONES S3 LEFT JOIN PRUEBAS P3 ON P3.SESION_PID = S3.PERSISTENCEID WHERE S3.PERSISTENCEID = Sesion.persistenceid  ORDER BY P3.APLICACION::DATE DESC LIMIT 1) as ultimaaplicacion";
	//public static final String EXT_SESIONESCALENDARIZADAS_REGISTRADOS = "(SELECT COUNT(persistenceid) as registros from( SELECT persistenceid from ( SELECT distinct on (SA.persistenceid) SA.persistenceid,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid and P.iseliminado = false LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid and c.isEliminado = false LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid and S.isEliminado = false LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false)  WHERE RD.responsableid = ResponsableD.responsableid and sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid AND ( CASE WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)    GROUP BY sa.persistenceid,sda.caseid,p.persistenceid,sa.sesiones_pid,sa.responsabledisponible_pid HAVING ((select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) = 0) ORDER BY SA.persistenceid ASC   ) as datos where tieneOtraAsistencia = 0 UNION  select persistenceid from (SELECT distinct on (SA.persistenceid) SA.persistenceid,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false)   LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END) and RD.responsableid = ResponsableD.responsableid and sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid GROUP BY sa.persistenceid,sa.responsabledisponible_pid, sda.caseid,p.persistenceid,sa.username   ORDER BY SA.persistenceid) as asistencia  ) as CONTEO ) as registrados,(SELECT P3.APLICACION FROM SESIONES S3 LEFT JOIN PRUEBAS P3 ON P3.SESION_PID = S3.PERSISTENCEID WHERE S3.PERSISTENCEID = Sesion.persistenceid  ORDER BY P3.APLICACION::DATE DESC LIMIT 1) as ultimaaplicacion";
	public static final String COUNT_SESIONESCALENDARIZADAS_REGISTRADOS = " Select COUNT(*) AS registros from(select DISTINCT(Pruebas.persistenceid), ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR  Sesion.tipo LIKE '%R,E,F%'OR  Sesion.tipo LIKE '%F,R,E%'OR  Sesion.tipo LIKE '%F,E,R%'OR  Sesion.tipo LIKE '%E,F,R%'OR  Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR  Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR  Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia,ctipoprueba.descripcion as tipo_prueba,[COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as ResponsableD on ResponsableD.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid WHERE Pruebas.ISELIMINADO = FALSE AND ResponsableD.responsableid = ? [WHERE] ) as datos [RESIDENCIA] "
	public static final String GET_ASPIRANTESDELASESION = "SELECT sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  prepa.DESCRIPCION AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid   WHERE sda.correoelectronico = ?";


	public static final String INSERT_PASEDELISTA = "INSERT INTO PaseLista (persistenceid,prueba_pid,username,asistencia,fecha,usuarioPaseLista) VALUES ( case when (SELECT max(persistenceId)+1 from PaseLista ) is null then 1 else (SELECT max(persistenceId)+1 from PaseLista) end,?,?,?,CAST(NOW() as varchar),?) "
	public static final String UPDATE_PASEDELISTA = "update PaseLista set asistencia = ?, fecha = CAST(NOW() as varchar), usuarioPaseLista = ? where prueba_pid = ? and username = ?"



	public static final String INSERT_ASPIRANTESPRUEBAS = "INSERT INTO ASPIRANTESPRUEBAS (persistenceid,username,PRUEBA_PID,asistencia,countRechazo,sesiones_pid,cattipoprueba_pid,responsabledisponible_pid,acreditado) VALUES ( case when (SELECT max(persistenceId)+1 from ASPIRANTESPRUEBAS ) is null then 1 else (SELECT max(persistenceId)+1 from ASPIRANTESPRUEBAS) end,?,?,?,?,?,?,?,?)"

	public static final String UPDATE_ASPIRANTESPRUEBAS = "UPDATE ASPIRANTESPRUEBAS set  asistencia = ?    where prueba_pid = ? and username = ?";

	public static final String DELETE_ASPIRANTESPRUEBAS = "DELETE FROM ASPIRANTESPRUEBAS WHERE SESIONES_PID = ? AND USERNAME = ?"

	public static final String UPDATEPREPASOLICITUDDEADMISION = "UPDATE SOLICITUDDEADMISION  SET catbachilleratos_pid = ? WHERE persistenceid = ?";
	
	public static final String UPDATE_BITACORAASPIRANTESPRUEBAS = "UPDATE CatBitacoraSesiones set  asistencia = ?  where prueba_pid = ? and username = ?";
	
	public static final String INSERT_BITACORAASPIRANTESPRUEBAS = "INSERT INTO CatBitacoraSesiones (persistenceid,username,PRUEBA_PID,asistencia,sesiones_pid,cattipoprueba_pid,responsabledisponible_pid,acreditado,fechareagendacion) VALUES ( case when (SELECT max(persistenceId)+1 from CatBitacoraSesiones ) is null then 1 else (SELECT max(persistenceId)+1 from CatBitacoraSesiones) end,?,?,?,?,?,?,?,now())";


	public static final String GET_SESIONESCALENDARIZADASPASADAS = "select * from (SELECT P.nombre, P.aplicacion, ( CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN s.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, P.persistenceid as pruebas_id, S.persistenceid as sesiones_id, P.lugar, P.registrados as alumnos_generales, S.nombre as nombre_sesion, c.descripcion as tipo_prueba, P.cupo, P.entrada,P.salida, campus.descripcion AS campus, count(CASE WHEN PL.asistencia THEN 1 END) as asistencias, (select String_AGG(distinct rd.responsableid::varchar,',') from responsabledisponible as rd where rd.isEliminado = false and rd.prueba_pid = P.persistenceid) as responsables FROM PRUEBAS as P LEFT JOIN SESIONES as S on P.sesion_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.prueba_pid = P.persistenceid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN catcampus campus ON campus.persistenceid=s.campus_pid [CAMPUS] WHERE P.ISELIMINADO = FALSE AND campus.descripcion is not null AND CAST(P.aplicacion AS DATE) [ORDEN] CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)  [WHERE] [GROUPBY] [HAVING] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESCALENDARIZADASPASADAS_REGISTRADOS = "select * from (SELECT Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR Sesion.tipo LIKE '%R,E,F%'OR Sesion.tipo LIKE '%F,R,E%'OR Sesion.tipo LIKE '%F,E,R%'OR Sesion.tipo LIKE '%E,F,R%'OR Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Pruebas.persistenceid as pruebas_id, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion,ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, campus.descripcion AS campus, (Select COUNT (PL2.persistenceid) from PASELISTA as PL2 where asistencia = true and PL2.prueba_pid = Pruebas.persistenceid) as asistencias, (select String_AGG(distinct rd.responsableid::varchar,',') from responsabledisponible as rd where rd.isEliminado = false and rd.prueba_pid = Pruebas.persistenceid) as responsables, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN PaseLista as PaseLista on PaseLista.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid LEFT JOIN catcampus campus ON campus.persistenceid= Sesion.campus_pid [CAMPUS] WHERE Pruebas.ISELIMINADO = FALSE AND campus.descripcion is not null AND CAST(Pruebas.aplicacion AS DATE) [ORDEN] CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)  [WHERE] [GROUPBY] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESASPIRANTEPASADAS = "SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,RD.responsableid,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE SA.sesiones_pid = ? AND P.persistenceid = ? [REPORTE]   [ENTREVISTA]  [WHERE] [ORDERBY] ) as datos where tieneOtraAsistencia = 0 [LIMITOFFSET] "
	public static final String GET_SESIONESCALENDARIZADASREPORTE = "select * from (SELECT DISTINCT(P.persistenceid)  as pruebas_id,   P.nombre, P.aplicacion, ( CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN s.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, S.persistenceid as sesiones_id, P.lugar, P.registrados as alumnos_generales, S.nombre as nombre_sesion, c.descripcion as tipo_prueba, P.cupo, P.entrada,P.salida, count(CASE WHEN PL.asistencia THEN 1 END) as asistencias FROM PRUEBAS as P  LEFT JOIN SESIONES as S on P.sesion_pid = S.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as RD on RD.prueba_pid = P.persistenceid LEFT JOIN PaseLista as PL on PL.prueba_pid = P.persistenceid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid WHERE P.ISELIMINADO = FALSE AND RD.responsableid = ? AND CAST(P.aplicacion AS DATE) < CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) [WHERE] [GROUPBY] [HAVING] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESCALENDARIZADASREPORTE_REGISTRADOS = "select * from (SELECT DISTINCT(Pruebas.persistenceid)  as pruebas_id,   Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR Sesion.tipo LIKE '%R,E,F%'OR Sesion.tipo LIKE '%F,R,E%'OR Sesion.tipo LIKE '%F,E,R%'OR Sesion.tipo LIKE '%E,F,R%'OR Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion, ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, (Select COUNT (PL2.persistenceid) from PASELISTA as PL2 where asistencia = true and PL2.prueba_pid = Pruebas.persistenceid) as asistencias, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as ResponsableD on  ResponsableD.prueba_pid = Pruebas.persistenceid LEFT JOIN PaseLista as PaseLista on PaseLista.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid WHERE Pruebas.ISELIMINADO = FALSE AND  ResponsableD.responsableid = ? AND CAST(Pruebas.aplicacion AS DATE) < CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) [WHERE] [GROUPBY] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";

	//public static final String EXT_SESIONESCALENDARIZADAS="(  SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid  AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid HAVING ((select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) = 0) ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid ORDER BY SA.persistenceid ASC ) as asistencia  ) as CONTEO) as registrados"
	public static final String EXT_SESIONESCALENDARIZADAS = "(SELECT COUNT (AP.persistenceid) from ASPIRANTESPRUEBAS AS AP where AP.PRUEBA_PID = Pruebas.persistenceid and  CASE WHEN AP.CATTIPOPRUEBA_PID = 1 THEN  AP.responsabledisponible_pid  IN ((select persistenceid from responsabledisponible where responsableid = [RESPONSABLE] AND PRUEBA_PID = Pruebas.persistenceid and ocupado = true))  ELSE AP.responsabledisponible_pid  IS NULL END) as registrados"
	//public static final String EXT_SESIONESCALENDARIZADAS = "(  SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false) WHERE RD.responsableid = ResponsableD.responsableid and sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid  AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid HAVING ((select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) = 0) ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false) LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE  RD.responsableid = ResponsableD.responsableid and sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid ORDER BY SA.persistenceid ASC ) as asistencia  ) as CONTEO) as registrados"
	public static final String EXT_SESIONESCALENDARIZADASLISTADO = "(SELECT COUNT (AP.persistenceid) from ASPIRANTESPRUEBAS AS AP where AP.PRUEBA_PID = Pruebas.persistenceid ) as registrados";
	//public static final String EXT_SESIONESCALENDARIZADASLISTADO = "(  SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false) WHERE sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid  AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid HAVING ((select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) = 0) ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false) LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid ORDER BY SA.persistenceid ASC ) as asistencia  ) as CONTEO) as registrados"

	public static final String GET_ASPIRANTEEXAMENESTERMINADOS = "SELECT sda.aceptado, sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  prepa.DESCRIPCION AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid   WHERE  sda.estatusSolicitud = 'Carga y consulta de resultados' [WHERE] [ORDERBY] [LIMITOFFSET] "
	public static final String COUNT_ASPIRANTEEXAMENTERMINADOS = "SELECT COUNT(asistencias) as registros from (SELECT count(1) as asistencias, PL.username as Aspirante, sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  prepa.DESCRIPCION AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN SESIONES as S on S.campus_pid = campus.persistenceid LEFT JOIN Pruebas as P on P.sesion_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.prueba_pid = P.PERSISTENCEID  WHERE PL.usuarioPaseLista IS NOT NULL  and PL.username = sda.correoelectronico and PL.asistencia = true [WHERE]  group by PL.username, sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion , gestionescolar.nombre ,  prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion, sx.descripcion, CPO.descripcion, R.descripcion having count(1) >= 2 ) as datos"
	public static final String UPDATE_ASPIRANTEACEPTADO = "update SOLICITUDDEADMISION set aceptado = ? where caseId = ?"

	public static final String GET_PRUEBAS = "select P.nombre, P.aplicacion, P.entrada, P.salida, tp.descripcion as tipo_prueba from pruebas as P LEFT JOIN CatTipoPrueba as tp on P.cattipoprueba_pid = tp.persistenceId  where P.persistenceId =  ?"
	public static final String GET_SESION = "select nombre,descripcion,fecha_inicio from sesiones   where persistenceId = ?"

	public static final String GET_PERIODOSACTIVOS = "SELECT clave, descripcion, fechainicio, fechafin FROM CATPERIODO WHERE  ISELIMINADO = false AND [TIPO] = TRUE  AND  NOW() BETWEEN CAST(FECHAINICIO as DATE) AND CAST(FECHAFIN as DATE)  [ID] ORDER BY FECHAFIN    LIMIT ?";
	public static final String GET_PERIODOSSIGUIENTES = "SELECT COUNT(*) as registros FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE  AND  CAST(FECHAINICIO as DATE)  >   CAST( [FECHA] as DATE) [ID] ";
	public static final String GET_VALIDARCLAVEPERIODO = "SELECT COUNT(PERSISTENCEID) AS TOTAL FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE  AND CLAVE = ? [ID]";

	public static final String GET_DAY = "select TO_CHAR( NOW(),'YYYY-MM-DD') as fecha"

	public static final String UPDATE_PAGOEXAMEN = "update catpagodeexamendeadmision set deshabilitarpagodeexamendeadmision = ? "

	public static final String UPDATE_LUGAREXAMEN= "update SwitchLugarExamen set activado = ? "

	public static final String UPDATE_DETALLE_SOLICITUD="UPDATE detallesolicitud SET [SETS] ";


	public static final String GET_ASPIRANTEPRUEBAASISTIOYREAGENDO = "select distinct on (AP.persistenceid) AP.persistenceid,P.nombre as nombre_prueba,P.Lugar as lugar_prueba,DS.IDBANNER,sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre,SDA.CORREOELECTRONICO,SDA.CURP,campus.descripcion AS campus,gestionescolar.nombre AS licenciatura, CPO.descripcion as periodo,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia,sda.PROMEDIOGENERAL, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, R.descripcion as residencia, sx.descripcion as sexo, PL.ASISTENCIA, P.aplicacion, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, RD.PERSISTENCEID AS RD, DS.CASEID, sda.urlfoto,le.descripcion as lugarexamen,sda.telefonocelular,DS.cbCoincide,AP.acreditado,c.PERSISTENCEID as tipoprueba_pid,AP.USERNAME from ASPIRANTESPRUEBAS AS AP LEFT JOIN PRUEBAS AS P ON P.PERSISTENCEID = AP.PRUEBA_PID LEFT JOIN SESIONASPIRANTE AS SA ON AP.USERNAME = AP.USERNAME LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CORREOELECTRONICO = AP.USERNAME LEFT JOIN DETALLESOLICITUD AS DS ON DS.CASEID::INTEGER = SDA.CASEID LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = DS.catresidencia_pid LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN cattipoprueba c on c.PERSISTENCEID = P.cattipoprueba_pid  LEFT JOIN responsabledisponible as RD on RD.PERSISTENCEID = SA.RESPONSABLEDISPONIBLE_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN PASELISTA PL ON PL.PRUEBA_PID = P.PERSISTENCEID AND PL.USERNAME = AP.USERNAME  WHERE P.PERSISTENCEID = ? AND P.SESION_PID = ? [WHERE] [ENTREVISTA] [REPORTE]  [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_ASPIRANTEPRUEBAASISTIOYREAGENDO = "[COUNT] SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia,sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, sda.urlfoto FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = ? AND P.persistenceid = ? [REPORTE]   [ENTREVISTA]  [WHERE] [HAVING] ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia,sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, sda.urlfoto from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = ? AND P.persistenceid = ? [REPORTE]   [ENTREVISTA]  [WHERE]  [GROUPBY] ORDER BY SA.persistenceid ASC ) as asistencia  [COUNTFIN] [ORDERBY] [LIMITOFFSET] "

	public static final String GET_ASPIRANTEPRUEBAASISTIOYREAGENDOACTIVOS = "select distinct on (AP.persistenceid) AP.persistenceid,P.nombre as nombre_prueba,P.Lugar as lugar_prueba,DS.IDBANNER,sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre,SDA.CORREOELECTRONICO,SDA.CURP,campus.descripcion AS campus,gestionescolar.nombre AS licenciatura, CPO.descripcion as periodo,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia,sda.PROMEDIOGENERAL, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, R.descripcion as residencia, sx.descripcion as sexo, PL.ASISTENCIA, P.aplicacion, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, RD.PERSISTENCEID AS RD, DS.CASEID, sda.urlfoto,le.descripcion as lugarexamen,sda.telefonocelular,DS.cbCoincide,AP.acreditado,c.PERSISTENCEID as tipoprueba_pid,AP.USERNAME from ASPIRANTESPRUEBAS AS AP LEFT JOIN PRUEBAS AS P ON P.PERSISTENCEID = AP.PRUEBA_PID LEFT JOIN SESIONASPIRANTE AS SA ON SA.USERNAME = AP.USERNAME LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CORREOELECTRONICO = AP.USERNAME LEFT JOIN DETALLESOLICITUD AS DS ON DS.CASEID::INTEGER = SDA.CASEID LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = DS.catresidencia_pid LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN cattipoprueba c on c.PERSISTENCEID = P.cattipoprueba_pid  LEFT JOIN responsabledisponible as RD on RD.PERSISTENCEID = AP.RESPONSABLEDISPONIBLE_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN PASELISTA PL ON PL.PRUEBA_PID = P.PERSISTENCEID AND PL.USERNAME = AP.USERNAME  WHERE P.PERSISTENCEID = ? AND P.SESION_PID = ? [WHERE] [ENTREVISTA]  [ORDERBY] [LIMITOFFSET]"
	//public static final String GET_ASPIRANTEPRUEBAASISTIOYREAGENDOACTIVOS = "[COUNT] SELECT * from ( SELECT SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia, sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, sda.urlfoto FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = ? AND P.persistenceid = ? AND rd.responsableid = ? [ENTREVISTA]  [WHERE]) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia, sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, sda.urlfoto from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE PL.asistencia is not null AND sda.caseid is not null  AND S.persistenceid = ? AND P.persistenceid = ? and rd.responsableid = ?  [ENTREVISTA]  [WHERE]  [GROUPBY] ORDER BY SA.persistenceid) as asistencia  [COUNTFIN]  [ORDERBY] [LIMITOFFSET]"

	public static final String GET_ASPIRANTESEXCELLISTADO = "select distinct on (AP.persistenceid) AP.persistenceid,DS.IDBANNER,sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre,SDA.CORREOELECTRONICO,SDA.CURP,campus.descripcion AS campus,gestionescolar.nombre AS licenciatura, CPO.descripcion as periodo,estado.DESCRIPCION as procedencia ,sda.PROMEDIOGENERAL, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, R.descripcion as residencia, sx.descripcion as sexo, AP.ASISTENCIA, P.aplicacion, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, RD.PERSISTENCEID AS RD, DS.CASEID, (select String_AGG(distinct rd2.responsableid::varchar,',') from responsabledisponible as rd2 where rd2.persistenceId = SA.responsabledisponible_pid and rd2.isEliminado = false and rd2.prueba_pid = P.persistenceId ) as responsables from ASPIRANTESPRUEBAS AS AP LEFT JOIN PRUEBAS AS P ON P.PERSISTENCEID = AP.PRUEBA_PID LEFT JOIN SESIONASPIRANTE AS SA ON SA.USERNAME = AP.USERNAME LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CORREOELECTRONICO = AP.USERNAME LEFT JOIN DETALLESOLICITUD AS DS ON DS.CASEID::INTEGER = SDA.CASEID LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = DS.catresidencia_pid LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN cattipoprueba c on c.PERSISTENCEID = P.cattipoprueba_pid  LEFT JOIN responsabledisponible as RD on RD.PERSISTENCEID = SA.RESPONSABLEDISPONIBLE_PID  WHERE P.PERSISTENCEID = ? AND P.SESION_PID = ? [WHERE] [ENTREVISTA] [REPORTE]  [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_ASPIRANTESEXCELLISTADO = "[COUNT] SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia,sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, (select String_AGG(distinct rd2.responsableid::varchar,',') from responsabledisponible as rd2 where rd2.persistenceId = SA.responsabledisponible_pid and rd2.isEliminado = false and rd2.prueba_pid = P.persistenceId ) as responsables FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = ? AND P.persistenceid = ?  [REPORTE]   [ENTREVISTA]  [WHERE] [HAVING] ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia,sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, (select String_AGG(distinct rd2.responsableid::varchar,',') from responsabledisponible as rd2 where rd2.persistenceId = SA.responsabledisponible_pid and rd2.isEliminado = false and rd2.prueba_pid = P.persistenceId ) as responsables from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia is not null  AND S.persistenceid = ? AND P.persistenceid = ?  [REPORTE]   [ENTREVISTA]  [WHERE]  [GROUPBY] ORDER BY SA.persistenceid ASC ) as asistencia  [COUNTFIN] [ORDERBY] [LIMITOFFSET] "


	public static final String GET_SESIONESPSICOLOGO = "select * from (SELECT DISTINCT(Pruebas.persistenceid)  as pruebas_id,   Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR  Sesion.tipo LIKE '%R,E,F%'OR  Sesion.tipo LIKE '%F,R,E%'OR  Sesion.tipo LIKE '%F,E,R%'OR  Sesion.tipo LIKE '%E,F,R%'OR  Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR  Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR  Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion, ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid  LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid LEFT JOIN catcampus campus on sesion.campus_pid = campus.persistenceid and campus.iseliminado = false [CAMPUS] WHERE campus.descripcion is not null and Pruebas.ISELIMINADO = FALSE AND ctipoprueba.PERSISTENCEID != 4  [WHERE] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]"
	public static final String EXT_SESIONESPSICOLOGO = "(SELECT COUNT (AP.persistenceid) from ASPIRANTESPRUEBAS AS AP where AP.PRUEBA_PID = Pruebas.persistenceid) as registrados,(SELECT P3.APLICACION FROM SESIONES S3 LEFT JOIN PRUEBAS P3 ON P3.SESION_PID = S3.PERSISTENCEID WHERE S3.PERSISTENCEID = Sesion.persistenceid  ORDER BY P3.APLICACION::DATE DESC LIMIT 1) as ultimaaplicacion"
	public static final String COUNT_SESIONESPSICOLOGO = "select COUNT(*) as registros from(select DISTINCT(Pruebas.persistenceid),( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR  Sesion.tipo LIKE '%R,E,F%'OR  Sesion.tipo LIKE '%F,R,E%'OR  Sesion.tipo LIKE '%F,E,R%'OR  Sesion.tipo LIKE '%E,F,R%'OR  Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR  Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR  Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia,ctipoprueba.descripcion as tipo_prueba,[COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid  LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid LEFT JOIN catcampus campus on sesion.campus_pid = campus.persistenceid and campus.iseliminado = false [CAMPUS] WHERE campus.descripcion is not null and Pruebas.ISELIMINADO = FALSE AND ctipoprueba.PERSISTENCEID != 4  [WHERE] ) as datos [RESIDENCIA]";
	//public static final String EXT_SESIONESPSICOLOGO = "(COALESCE(Pruebas.registrados,0) + COALESCE((SELECT COUNT(*) as registros from( select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME and (sda.isAspiranteMigrado is null or sda.isAspiranteMigrado = false) LEFT JOIN sesionaspirante as SA on SA.username != PL.username and sa.persistenceid = Sesion.persistenceid and p.persistenceid = Pruebas.persistenceid WHERE sa.username is not null and sda.caseid is not null AND PL.asistencia is not null AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid GROUP BY sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid, sda.caseid,p.persistenceid,sa.username ORDER BY SA.persistenceid) as asistencia ) as CONTEO ),0) ) as registrados"
	//public static final String EXT_SESIONESPSICOLOGO = "(COALESCE( (SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME and (sda.isAspiranteMigrado is null  or sda.isAspiranteMigrado = false) WHERE sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid  AND ( CASE  WHEN P.cattipoprueba_pid = 1 THEN rd.persistenceid = sa.responsabledisponible_pid ELSE sda.caseid is not null END)      GROUP BY p.persistenceid,sa.username, sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid HAVING ((select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) = 0) ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   ) as CONTEOS),0) + COALESCE((SELECT COUNT(*) as registros from( select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME and (sda.isAspiranteMigrado is null or sda.isAspiranteMigrado = false) INNER JOIN sesionaspirante as SA on SA.username != PL.username and sa.persistenceid = Sesion.persistenceid and p.persistenceid = Pruebas.persistenceid WHERE sa.username is not null and sda.caseid is not null AND PL.asistencia is not null AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid GROUP BY sa.persistenceid,sa.persistenceversion,sa.sesiones_pid,sa.responsabledisponible_pid, sda.caseid,p.persistenceid,sa.username ORDER BY SA.persistenceid) as asistencia ) as CONTEO ),0) ) as registrados"
	public static final String GET_ASPIRANTESPSICOLOGO = "select distinct on (AP.persistenceid) AP.persistenceid,P.nombre as nombre_prueba,P.Lugar as lugar_prueba,DS.IDBANNER,sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre,SDA.CORREOELECTRONICO,SDA.CURP,campus.descripcion AS campus,gestionescolar.nombre AS licenciatura, CPO.descripcion as periodo,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia,sda.PROMEDIOGENERAL, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, R.descripcion as residencia, sx.descripcion as sexo, PL.ASISTENCIA, P.aplicacion, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, RD.PERSISTENCEID AS RD, DS.CASEID, sda.urlfoto,le.descripcion as lugarexamen,sda.telefonocelular,DS.cbCoincide,AP.acreditado,c.PERSISTENCEID as tipoprueba_pid,AP.USERNAME from ASPIRANTESPRUEBAS AS AP LEFT JOIN PRUEBAS AS P ON P.PERSISTENCEID = AP.PRUEBA_PID LEFT JOIN SESIONASPIRANTE AS SA ON SA.USERNAME = AP.USERNAME LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CORREOELECTRONICO = AP.USERNAME LEFT JOIN DETALLESOLICITUD AS DS ON DS.CASEID::INTEGER = SDA.CASEID LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = DS.catresidencia_pid LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN cattipoprueba c on c.PERSISTENCEID = P.cattipoprueba_pid  LEFT JOIN responsabledisponible as RD on RD.PERSISTENCEID = SA.RESPONSABLEDISPONIBLE_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN PASELISTA PL ON PL.PRUEBA_PID = P.PERSISTENCEID AND PL.USERNAME = AP.USERNAME  WHERE P.PERSISTENCEID = ? AND P.SESION_PID = ? [WHERE] [ENTREVISTA]  [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_ASPIRANTESPSICOLOGO = "[COUNT] SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia, sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, sda.urlfoto FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = ? AND P.persistenceid = ? [ENTREVISTA]  [WHERE]) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia, sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado, sda.urlfoto from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE PL.asistencia is not null AND sda.caseid is not null  AND S.persistenceid = ? AND P.persistenceid = ?   [ENTREVISTA]  [WHERE]  [GROUPBY] ORDER BY SA.persistenceid) as asistencia  [COUNTFIN]  [ORDERBY] [LIMITOFFSET]"
	//DELETES para eliminar al aspirante de las sesiones
	public static final String DELETE_SESIONASPIRANTE = "DELETE FROM SESIONASPIRANTE WHERE USERNAME = ?"
	public static final String GET_COUNT_ASISTENCIA = "select count(CASE WHEN PL.asistencia THEN 1 END) as asistencias, ds.cbcoincide from paseLista as PL LEFT JOIN solicituddeadmision sda on PL.username = sda.correoelectronico LEFT JOIN detallesolicitud ds on sda.caseid = ds.caseid::Integer AND ds.vencido IS NOT true where  PL.username = ? GROUP BY ds.cbcoincide"

	//obtener la bitacora de resultados de un aspirante
	public static final String GET_BITACORA_SESIONES_BY_USERNAME = "SELECT P.nombre AS NOMBREPRUEBA, CONCAT (to_char(P.aplicacion, 'DD/MM/YYYY'),' ',P.entrada, ' - ' ,P.salida) AS FECHA_HORA_EXAMEN, S.nombre AS NOMBRESESION, AP.asistencia, AP.acreditado, PL.usuariopaselista, PL.fecha, AP.cattipoprueba_pid, CASE WHEN AP.cattipoprueba_pid = 4 THEN DS.cbcoincide ELSE 'f' END AS CB, CTP.descripcion, (SELECT String_agg(DISTINCT rd.responsableid :: VARCHAR, ',') FROM responsabledisponible AS rd WHERE  rd.iseliminado = FALSE AND rd.prueba_pid = P.persistenceid) AS responsables, AP.responsabledisponible_pid, AP.prueba_pid, AP.sesiones_pid, CAST(TO_CHAR( CAST(AP.fechareagendacion AS DATE), 'dd/MM/yyyy HH:mm:ss') as varchar) as fechareagendacion FROM   CatBitacoraSesiones AS AP left join pruebas AS P ON P.persistenceid = AP.prueba_pid left join sesiones AS S ON S.persistenceid = AP.sesiones_pid left join paselista PL ON PL.username = AP.username AND PL.prueba_pid = P.persistenceid and PL.asistencia is true left join cattipoprueba AS CTP ON CTP.persistenceid = AP.cattipoprueba_pid left join detallesolicitud AS DS ON DS.idbanner = ? WHERE  AP.username = ? ORDER  BY AP.persistenceid DESC,S.persistenceid, AP.cattipoprueba_pid DESC";
	// obtener al responsable de la entrevista
	public static final String GET_RESPONSABLE_DISPONIBLE_ENTREVISTA = "SELECT RESPONSABLEID FROM RESPONSABLEDISPONIBLE WHERE PERSISTENCEID = ?";
	// obtiene las sesiones del aspirante
	public static final String GET_ASPIRANTE_SESIONES_BY_USERNAME = "SELECT P.nombre AS NOMBREPRUEBA, CONCAT (to_char(P.aplicacion, 'DD/MM/YYYY'),' ',P.entrada, ' - ' ,P.salida) AS FECHA_HORA_EXAMEN, S.nombre AS NOMBRESESION, AP.asistencia, AP.acreditado, PL.usuariopaselista, PL.fecha, AP.cattipoprueba_pid, CASE WHEN AP.cattipoprueba_pid = 4 THEN DS.cbcoincide ELSE 'f' END AS CB, CTP.descripcion, (SELECT String_agg(DISTINCT rd.responsableid :: VARCHAR, ',') FROM responsabledisponible AS rd WHERE  rd.iseliminado = FALSE AND rd.prueba_pid = P.persistenceid) AS responsables, AP.responsabledisponible_pid, AP.prueba_pid, AP.sesiones_pid FROM AspirantesPruebas AS AP left join pruebas AS P ON P.persistenceid = AP.prueba_pid left join sesiones AS S ON S.persistenceid = AP.sesiones_pid left join paselista PL ON PL.username = AP.username AND PL.prueba_pid = P.persistenceid and PL.asistencia is true left join cattipoprueba AS CTP ON CTP.persistenceid = AP.cattipoprueba_pid left join detallesolicitud AS DS ON DS.idbanner = ? WHERE  AP.username = ? ORDER  BY AP.persistenceid DESC,S.persistenceid, AP.cattipoprueba_pid DESC";
	
	// obtener al responsable de las pruebas
	public static final String GET_RESPONSABLES_PRUEBA = "SELECT RESPONSABLEID FROM RESPONSABLEDISPONIBLE WHERE PRUEBA_PID = ?";

	//obtener los duplicados en validar la solicitud
	//	public static final String GET_DUPLICADOS = "SELECT sda.caseid,sda.primernombre,sda.segundonombre,sda.apellidopaterno,sda.apellidomaterno,sda.correoelectronico, sda.fechanacimiento, sda.estatusSolicitud, sda.curp, CP.descripcion as periodo, CGE.nombre as licenciatura, CCE.descripcion as campusEstudio,CCE2.descripcion as VPD, DS.idbanner from  solicituddeadmision as sda LEFT JOIN catperiodo CP on CP.persistenceid = sda.catperiodo_pid LEFT JOIN catGestionEscolar CGE ON CGE.persistenceid = sda.catgestionescolar_pid LEFT JOIN catCampus CCE ON CCE.persistenceid = sda.catcampusestudio_pid LEFT JOIN catCampus CCE2 ON CCE2.persistenceid = sda.catcampus_pid LEFT JOIN detallesolicitud DS on DS.caseid::Integer = sda.caseid  where sda.caseid != ? and (CONCAT(sda.primerNombre, ' ',sda.segundoNombre ,' ', sda.apellidoPaterno,' ',sda.apellidoMaterno  ) like CONCAT( '%', ? ,'%') OR sda.correoElectronico like  CONCAT('%', ? , '%') OR  sda.fechaNacimiento  like CONCAT( '%', ? , '%') OR sda.curp = CONCAT('%',?,'%') ) ORDER BY sda.persistenceId ASC"

	public static final String GET_DUPLICADOS = "SELECT sda.caseid, sda.primernombre, sda.segundonombre, sda.apellidopaterno, sda.apellidomaterno, sda.correoelectronico, sda.fechanacimiento, sda.estatusSolicitud, sda.curp, CP.descripcion as periodo, CGE.nombre as licenciatura, CCE.descripcion as campusEstudio,CCE2.descripcion as VPD, DS.idbanner FROM solicituddeadmision AS sda LEFT JOIN catperiodo CP ON CP.persistenceid = sda.catperiodo_pid LEFT JOIN catGestionEscolar CGE ON CGE.persistenceid = sda.catgestionescolar_pid LEFT JOIN catCampus CCE ON CCE.persistenceid = sda.catcampusestudio_pid LEFT JOIN catCampus CCE2 ON CCE2.persistenceid = sda.catcampus_pid LEFT JOIN detallesolicitud DS on DS.caseid::Integer = sda.caseid AND DS.vencido IS NOT true   WHERE sda.caseid != ? AND (((CONCAT(sda.primerNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.primerNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%'))  OR (CONCAT(sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%'))  OR (CONCAT(sda.primerNombre, ' ', sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.primerNombre, ' ', sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.primerNombre, ' ', sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno, ' ', sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%'))) OR sda.correoElectronico LIKE CONCAT('%', ? , '%') OR (sda.fechaNacimiento  LIKE CONCAT( '%', ? , '%') AND ((CONCAT(sda.primerNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.primerNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%'))  OR (CONCAT(sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%'))  OR (CONCAT(sda.primerNombre, ' ', sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.primerNombre, ' ', sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%')) OR (CONCAT(sda.primerNombre, ' ', sda.segundoNombre) LIKE CONCAT( '%', ? ,'%') AND CONCAT(sda.apellidoPaterno, ' ', sda.apellidoMaterno) LIKE CONCAT( '%', ? ,'%')))) OR sda.curp = CONCAT('%', ? ,'%') ) ORDER BY sda.persistenceId ASC"
	public static final String GET_DUPLICADOSV2="WITH FILTER (primerNombre, segundoNombre, apellidoPaterno, apellidoMaterno, caseid, correoElectronico, curp ) AS (VALUES (?, ?, ?, ?, ?, ?, ?))SELECT sda.caseid, sda.primernombre, sda.segundonombre, sda.apellidopaterno, sda.apellidomaterno, sda.correoelectronico, sda.fechanacimiento, sda.estatusSolicitud, sda.curp, CP.descripcion   AS periodo, CGE.nombre       AS licenciatura, CCE.descripcion  AS campusEstudio, CCE2.descripcion AS VPD, DS.idbanner FROM solicituddeadmision AS sda LEFT JOIN catperiodo CP ON CP.persistenceid = sda.catperiodo_pid LEFT JOIN catGestionEscolar CGE ON CGE.persistenceid = sda.catgestionescolar_pid LEFT JOIN catCampus CCE ON CCE.persistenceid = sda.catcampusestudio_pid LEFT JOIN catCampus CCE2 ON CCE2.persistenceid = sda.catcampus_pid LEFT JOIN detallesolicitud DS ON DS.caseid::INTEGER = sda.caseid AND DS.vencido IS NOT true WHERE sda.caseid != (SELECT caseid FROM filter) AND ((sda.primernombre || sda.apellidopaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end) OR (sda.apellidomaterno!='' AND (sda.primernombre || sda.apellidomaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end)) OR (sda.apellidomaterno!='' AND (sda.primernombre || sda.apellidopaterno ||sda.apellidomaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end)) OR (sda.segundonombre!='' AND (sda.segundonombre || sda.apellidopaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end)) OR (sda.segundonombre || sda.apellidomaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end) OR (sda.segundonombre!='' AND sda.apellidomaterno!='' AND (sda.segundonombre || sda.apellidopaterno ||sda.apellidomaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end)) OR (sda.segundonombre!='' AND sda.apellidomaterno!='' AND(sda.primernombre || sda.segundonombre ||sda.apellidopaterno ||sda.apellidomaterno) in ((SELECT primernombre FROM filter) || (SELECT apellidopaterno from filter), (SELECT primernombre FROM filter) || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno from filter), case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, case when (SELECT segundonombre FROM filter)='' then '-..-.-' else (SELECT segundonombre from filter) end || (SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end, (SELECT primernombre FROM filter) || (SELECT apellidopaterno FROM filter) ||(SELECT apellidopaterno FROM filter) ||case when (SELECT apellidomaterno from filter)='' then '-..-.-' else (SELECT apellidomaterno from filter)end)  ) OR  sda.curp = (SELECT curp FROM filter)) ORDER BY sda.persistenceId ASC"
	//obtener el  propedeutico seleccionado
	public static final String GET_PROPEDEUTICO = "select sda.catpropedeutico_pid, c.descripcion from SOLICITUDDEADMISION sda LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN CatRelacionCampusTipo A ON prope.persistenceidcatrecibiratencionespiritual = A.persistenceid LEFT JOIN CatPropedeuticoGral C ON A.catpropedeuticogral_pid = C.persistenceid AND C.isEliminado = false  WHERE sda.CORREOELECTRONICO = ? "

	//obtener usuario by idBanner
	public static final String GET_USERNAME_BY_IDBANNER = "select concat( sda.primernombre,' ',sda.segundonombre ,' ',sda.apellidopaterno,' ', sda.apellidomaterno) as nombre from detallesolicitud ds LEFT JOIN SolicitudDeAdmision sda ON sda.caseid::varchar = ds.caseid  where ds.idBanner = ?"

	//saber si hay un usario en invp con ese idbanner
	public static final String GET_EXIST_BY_IDBANNER_INVP = "select distinct idbanner, sesiones_pid from ResultadoINVP where idBanner = ?"

	//select bitacora comentarios
	public static final String GET_BITACORACOMENTARIOS = "select cbc.*, sda.catcampusestudio_pid, campus.descripcion from catbitacoracomentarios cbc  LEFT JOIN SolicitudDeAdmision sda  ON sda.correoElectronico = cbc.usuariocomentario LEFT JOIN CatCAMPUS campus ON campus.persistenceid = sda.catcampusestudio_pid [CAMPUS] WHERE CBC.ISELIMINADO = FALSE [WHERE] [ORDERBY] [LIMITOFFSET] "
	public static final String COUNT_BITACORACOMENTARIOS = "SELECT count(*) as registros FROM catbitacoracomentarios cbc  LEFT JOIN SolicitudDeAdmision sda  ON sda.correoElectronico = cbc.usuariocomentario LEFT JOIN CatCAMPUS campus ON campus.persistenceid = sda.catcampusestudio_pid [CAMPUS] WHERE CBC.ISELIMINADO = FALSE  [WHERE]  "

	public static final String GET_LISTAROJA= "select ds.observacionescambio,ds.observacioneslistaroja,ds.observacionesrechazo, sda.correoelectronico as aspirante, campus.descripcion from detallesolicitud ds LEFT JOIN solicitudDeAdmision sda ON sda.caseid = ds.caseid::Integer LEFT JOIN catCampus campus ON campus.persistenceid = sda.catcampusestudio_pid [CAMPUS]  where ds.observacioneslistaroja is not null and length(ds.observacioneslistaroja)>0 [WHERE] [ORDERBY] [LIMITOFFSET] "
	public static final String GET_LISTACAMBIO = "select ds.observacionescambio,ds.observacioneslistaroja,ds.observacionesrechazo, sda.correoelectronico as aspirante, campus.descripcion from detallesolicitud ds LEFT JOIN solicitudDeAdmision sda ON sda.caseid = ds.caseid::Integer LEFT JOIN catCampus campus ON campus.persistenceid = sda.catcampusestudio_pid [CAMPUS]  where ds.observacionescambio is not null and length(ds.observacionescambio)>0 [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_LISTRECHAZO = "select ds.observacionescambio,ds.observacioneslistaroja,ds.observacionesrechazo, sda.correoelectronico as aspirante, campus.descripcion from detallesolicitud ds LEFT JOIN solicitudDeAdmision sda ON sda.caseid = ds.caseid::Integer LEFT JOIN catCampus campus ON campus.persistenceid = sda.catcampusestudio_pid [CAMPUS]  where ds.observacionesrechazo is not null and length(ds.observacionesrechazo)>0 [WHERE] [ORDERBY] [LIMITOFFSET] "



	public static final String GET_REGISTRADOSBECAS = "SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura, PR.fecharegistro FROM plantillaRegistro as PR LEFT JOIN SOLICITUDDEADMISION sda ON PR.nRegistro = sda.caseid LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY pr.fecharegistro,prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid [ORDERBY] [LIMITOFFSET] ";



	//insert importacion PAA
	public static final String INSERT_IMPORTACIONPAA = "INSERT INTO IMPORTACIONPAA (idBanner,paan,la1,la2,la3,la4,pg1,pg2,pg3,pg4,pg5,pv1,pv4,paav,leo1,leo3,leo4,leo5,cit1,cit2,para,hi1,hi2,hi3,hi4,hi5,hi6,total,fechaExamen,lexiumPaan,LexiumPaav,lexiumPara,lexiumTotal,tipoExamen,invp,sesion_pid,fechaRegistro,persistenceid) VALUES( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,TO_CHAR( NOW(),'DD-MM-YYYY'),case when (SELECT max(persistenceId)+1 from importacionpaa ) is null then 1 else (SELECT max(persistenceId)+1 from importacionpaa) end )"

	public static final String UPDATE_IMPORTACIONPAA = "UPDATE IMPORTACIONPAA SET paan = ?,la1 = ?,la2 = ?,la3 = ?,la4 = ?,pg1 = ?,pg2 = ?,pg3 = ?,pg4 = ?,pg5 = ?,pv1 = ?,pv4 = ?,paav = ?,leo1 = ?,leo3 = ?,leo4 = ?,leo5 = ?,cit1 = ?,cit2 = ?,para = ?,hi1 = ?,hi2 = ?,hi3 = ?,hi4 = ?,hi5 = ?,hi6 = ?,total = ?,lexiumPaan = ?,LexiumPaav = ?,lexiumPara = ?,lexiumTotal = ?,tipoExamen = ?,invp = ?,fechaExamen = ?,fechaRegistro = TO_CHAR( NOW(),'DD-MM-YYYY') WHERE persistenceid = ? and idBanner = ?"

	public static final String UPDATE_INVP = "UPDATE IMPORTACIONPAA SET INVP = ? where fecharegistro = ? and idbanner = ? ";

	public static final String GET_TIENEPUNTUACION = "SELECT count(*) as registros from IMPORTACIONPAA  where idbanner = ? "

	public static final String GET_EXISTE_Y_DATOS_DUPLICADOS = "SELECT paa.idbanner, ds.idbanner as dsbanner, (select count(persistenceid) from IMPORTACIONPAA WHERE FECHAEXAMEN = [FECHA] AND IDBANNER = [VALOR] ) as mismafecha,ds.cbcoincide as AA ,((select count(persistenceid) from IMPORTACIONPAA WHERE idbanner = ds.idbanner and sesion_pid::INTEGER = [IDSESION] ) = 0 ) as puede, (SA.sesiones_pid = [IDSESION]) as SC  from DETALLESOLICITUD ds  LEFT JOIN  IMPORTACIONPAA paa on ds.idBanner = paa.idbanner  LEFT JOIN  solicituddeadmision sda on sda.caseid::varchar = ds.caseid LEFT JOIN sesionAspirante as SA ON SA.username = sda.correoelectronico   where ds.idbanner = [VALOR] LIMIT 1"

	public static final String GET_PAA_BY_IDBANNER = "SELECT idBanner,paan,la1,la2,la3,la4,pg1,pg2,pg3,pg4,pg5,pv1,pv4,paav,leo1,leo3,leo4,leo5,cit1,cit2,para,hi1,hi2,hi3,hi4,hi5,hi6,total,fechaExamen,lexiumPaan,LexiumPaav,lexiumPara,lexiumTotal,fechaRegistro,tipoExamen,persistenceid,invp FROM IMPORTACIONPAA WHERE IDBANNER = ? and persistenceid = ?";

	public static final String GET_PAA_BY_IDBANNER_SIN_PERSISTENCE = "SELECT idBanner,paan,la1,la2,la3,la4,pg1,pg2,pg3,pg4,pg5,pv1,pv4,paav,leo1,leo3,leo4,leo5,cit1,cit2,para,hi1,hi2,hi3,hi4,hi5,hi6,(paan::INTEGER+paav::INTEGER+para::INTEGER+ (CASE WHEN invp is null then 0  WHEN INVP = '' THEN 0 ELSE invp::INTEGER END) ) as total,fechaExamen,lexiumPaan,LexiumPaav,lexiumPara,lexiumTotal,fechaRegistro,tipoExamen,persistenceid,invp FROM IMPORTACIONPAA WHERE IDBANNER = ?"

	public static final String GET_SEGUNDA_OPORTUNIDAD_IPPA = "select count(sda.persistenceid) AS SDAREGISTRO, COALESCE( IPAA.REGISTROS, 0 ) AS REGINSTROIMPORTACION from SOLICITUDDEADMISION SDA LEFT JOIN DETALLESOLICITUD AS DS ON DS.CASEID::INTEGER = SDA.CASEID LEFT JOIN (SELECT IDBANNER, COUNT(*) AS REGISTROS  FROM IMPORTACIONPAA GROUP BY IDBANNER) AS IPAA  ON IPAA.IDBANNER = DS.IDBANNER WHERE DS.IDBANNER = ? GROUP BY IPAA.REGISTROS"

	//public static final String GET_ASPIRANTES_CON_PAA = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura, PAA.PARA,PAA.PAAV,PAA.PAAN,PAA.fechaRegistro,PAA.INVP,PAA.fechaExamen,PAA.persistenceid FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN IMPORTACIONPAA as PAA ON PAA.idBanner = da.idbanner LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, PAA.PARA,PAA.PAAV,PAA.PAAN,PAA.fechaRegistro,PAA.INVP,PAA.fechaExamen,PAA.persistenceid [ORDERBY] [LIMITOFFSET]"

	public static final String GET_ASPIRANTES_CON_PAA ="SELECT sesion.persistenceid as id,sesion.nombre as sesion,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura, PAA.PARA,PAA.PAAV,PAA.PAAN,PAA.fechaRegistro,PAA.INVP,PAA.fechaExamen,PAA.persistenceid,PAA.LEXIUMPAAN,PAA.LEXIUMPAAV,PAA.LEXIUMPARA,da.cbcoincide as Lexium FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN IMPORTACIONPAA as PAA ON PAA.idBanner = da.idbanner LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] LEFT JOIN sesiones sesion on sesion.persistenceid=PAA.sesion_pid::INTEGER [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, PAA.PARA,PAA.PAAV,PAA.PAAN,PAA.fechaRegistro,PAA.INVP,PAA.fechaExamen,PAA.persistenceid,sesion.persistenceid,sesion.nombre,PAA.LEXIUMPAAN,PAA.LEXIUMPAAV,PAA.LEXIUMPARA,da.cbcoincide [ORDERBY] [LIMITOFFSET]"

	public static final String GET_ASPIRANTES_CON_PAA_EXCEL = "SELECT sesion.persistenceid as id,sesion.nombre as sesion,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, da.idbanner, campus.grupoBonita, catcampus.descripcion as transferencia,PAA.PARA,PAA.PAAV,PAA.PAAN,PAA.fechaRegistro,PAA.INVP,PAA.fechaExamen,PAA.persistenceid FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN IMPORTACIONPAA as PAA ON PAA.idBanner = da.idbanner LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] LEFT JOIN sesionaspirante s_a on s_a.username=sda.correoelectronico LEFT JOIN sesiones sesion on sesion.persistenceid=s_a.sesiones_pid [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, PAA.PARA,PAA.PAAV,PAA.PAAN,PAA.fechaRegistro,PAA.INVP,PAA.fechaExamen,PAA.persistenceid,sesion.persistenceid,sesion.nombre [ORDERBY] [LIMITOFFSET]"

	public static final String GET_ASPIRANTES_SIN_PAA = "SELECT sesiones.persistenceid as id,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid,  da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura,SESIONES.nombre,da.cbcoincide as Lexium FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN IMPORTACIONPAA as PAA ON PAA.idbanner = da.idbanner LEFT JOIN SESIONASPIRANTE SA ON SA.username = sda.correoelectronico INNER JOIN SESIONES as sesiones ON sesiones.persistenceid = SA.Sesiones_pid LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, SESIONES.nombre, SESIONES.persistenceid,da.cbcoincide [ORDERBY] [LIMITOFFSET]";

	public static final String GET_BITACORA_ERRORES_EXISTE = "SELECT idBanner from CatBitacoraErrorPAA where idBanner = ?"

	public static final String INSERT_BITACORA_ERRORES_PAA ="INSERT INTO CatBitacoraErrorPaa (error,idBanner,fechaExamen,fechaRegistro) VALUE(?,?,?,?)";

	public static final String UPDATE_BITACORA_ERRORES_PAA = "UPDATE CatBitacoraErrorPaa SET error = ?, idBanner = ?, fechaExamen = ?, fechaRegistro = ? where idBanner = [IDBANNER]"

	//consultas de resultado comite

	public static final String GET_EXISTE_Y_DATOS_DUPLICADOS_RC = "SELECT RC.idbanner, sda.primernombre,ds.idbanner as dsbanner, (sda.ESTATUSSOLICITUD = 'Resultado final del comité') as RFC, ((select count(persistenceid) from RESULTADOCOMITE WHERE idbanner = ds.idbanner and periodo::INTEGER = [PERIODO] ) = 0 ) AS puedePeriodo, ( (CASE WHEN sda.countrechazos is null then 0 else sda.countrechazos end) <= 2) as cantidadIntentos  from DETALLESOLICITUD ds  LEFT JOIN  ResultadoComite RC on ds.idBanner = RC.idbanner  LEFT JOIN  solicituddeadmision sda on sda.caseid::varchar = ds.caseid AND (sda.ESTATUSSOLICITUD = 'Carga y consulta de resultados' OR sda.ESTATUSSOLICITUD = 'Resultado final del comité' OR sda.ESTATUSSOLICITUD = 'Rechazado por comité')   where ds.idbanner = [VALOR] LIMIT 1";

	public static final String GET_CANTIDAD_INTENTOS_RC = "SELECT (CASE WHEN sda.countrechazos is null then 0 else sda.countrechazos end) as cantidadIntentos  from DETALLESOLICITUD ds  LEFT JOIN  ResultadoComite RC on ds.idBanner = RC.idbanner  LEFT JOIN  solicituddeadmision sda on sda.caseid::varchar = ds.caseid AND (sda.ESTATUSSOLICITUD = 'Carga y consulta de resultados' OR sda.ESTATUSSOLICITUD = 'Resultado final del comité' OR sda.ESTATUSSOLICITUD = 'Rechazado por comité')   where ds.idbanner = ? LIMIT 1";
	

	public static final String GET_ASPIRANTES_SIN_RC = "SELECT CASE WHEN prepa.descripcion = 'Otro'THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion        AS campussede, gestionescolar.NOMBRE     AS licenciatura, periodo.DESCRIPCION       AS ingreso, periodo.clave             AS claveIngreso , CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, sda.caseid, da.idbanner, campus.grupoBonita, TA.descripcion        AS tipoadmision , R.descripcion         AS residensia, TAL.descripcion       AS tipoDeAlumno, catcampus.descripcion AS transferencia, campusEstudio.clave   AS claveCampus, gestionescolar.clave  AS claveLicenciatura, SESIONES.nombre FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT TRUE LEFT JOIN CatTipoAdmision AS TA ON TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia AS R ON R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno AS TAL ON TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN RESULTADOCOMITE AS RC ON RC.idbanner = da.idbanner LEFT JOIN SESIONASPIRANTE SA ON SA.username = sda.correoelectronico LEFT JOIN SESIONES AS sesiones ON sesiones.persistenceid = SA.Sesiones_pid LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] INNER JOIN (SELECT idbanner,string_agg(escala, ',') escalas,  string_agg(puntuacion||'', ',') puntuaciones from resultadoinvp group by idbanner) invp ON invp.idbanner=da.idBanner INNER JOIN importacionpaa ipaa ON ipaa.idbanner=da.idBanner AND  ipaa.invp is not null and ipaa.invp!=''INNER JOIN testpsicometrico psicometrico on psicometrico.finalizado is true AND psicometrico.caseid::INTEGER=sda.caseid::INTEGER [WHERE] GROUP BY prepa.descripcion, sda.estadobachillerato, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero, sda.bachillerato, sda.promediogeneral, sda.estatussolicitud, periodo.clave, sda.caseid, sda.telefonocelular, da.idbanner, campus.grupobonita, ta.descripcion, r.descripcion, tal.descripcion, catcampus.descripcion, campusestudio.clave, gestionescolar.clave, sda.persistenceid, SESIONES.nombre [ORDERBY] [LIMITOFFSET]";

	public static final String INSERT_RESULTADO_COMITE = "INSERT INTO RESULTADOCOMITE (idBanner,decision,pdp,pdu,sse,pcda,pca,observaciones,periodo,isAdmitido,licenciatura_pid,sesiones_pid,usuariocreacion,isPropedeutico,countRechazo,fechaModificacion,fechaRegistro,persistenceid) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NOW(),TO_CHAR( NOW(),'DD-MM-YYYY'),case when (SELECT max(persistenceId)+1 from RESULTADOCOMITE ) is null then 1 else (SELECT max(persistenceId)+1 from RESULTADOCOMITE) end )"

	public static final String UPDATE_RESULTADO_COMITE = "UPDATE RESULTADOCOMITE SET idBanner = ?, decision = ?, pdp = ?, pdu = ? ,sse = ? ,pcda = ? ,pca = ? ,observaciones = ?, periodo = ?, isAdmitido = ? where idBanner = '[IDBANNER]'";

	public static final String INSERT_RESULTADO_COMITE_MODIFICACION = "INSERT INTO RESULTADOCOMITE (idBanner,decision,pdp,pdu,sse,pcda,pca,observaciones,periodo,isAdmitido,licenciatura_pid,sesiones_pid,usuariocreacion,isPropedeutico,countRechazo,isModificacion,fechaModificacion,fechaRegistro,persistenceid) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,true,now(),TO_CHAR( NOW(),'DD-MM-YYYY'),case when (SELECT max(persistenceId)+1 from RESULTADOCOMITE ) is null then 1 else (SELECT max(persistenceId)+1 from RESULTADOCOMITE) end )"

	public static final String UPDATE_RESULTADO_COMITE_DESACTIVAR = "UPDATE RESULTADOCOMITE SET desactivado = true where idBanner = '[IDBANNER]'";

	public static final String GET_IDS_PARA_RESULTADOCOMITE = "SELECT SDA.catgestionescolar_pid,SA.SESIONES_PID, SDA.CATPERIODO_PID,SDA.countrechazos FROM DETALLESOLICITUD AS DS LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CASEID = DS.CASEID::INTEGER LEFT JOIN SESIONASPIRANTE AS SA ON SA.USERNAME = SDA.CORREOELECTRONICO WHERE DS.IDBANNER = ?  ORDER BY SDA.PERSISTENCEID DESC  LIMIT 1";

	public static final String UPDATE_RESULTADO_COMITE_REACTIVAR_BY_PERSISTENCEID = "UPDATE RESULTADOCOMITE SET desactivado = false where persistenceid = ?";

	public static final String UPDATE_ACEPTADO_RESULTADO_COMITE = "UPDATE SOLICITUDDDEADMISION SET aceptado = ? where idBanner = '[IDBANNER]' and catperiodo_pid = [PERIODO]";

	public static final String GET_ASPIRANTE_PERIODO_ID = "SELECT PERIODO.persistenceid FROM SOLICITUDDEADMISION AS SDA LEFT JOIN DETALLESOLICITUD AS DA ON DA.CASEID::INTEGER = SDA.CASEID LEFT JOIN CATPERIODO AS PERIODO ON PERIODO.PERSISTENCEID =  SDA.catperiodo_pid WHERE DA.IDBANNER = ? AND PERIODO.CLAVE = ?";

	public static final String GET_LAST_RESULTADO_COMITE = "SELECT PERSISTENCEID FROM RESULTADOCOMITE";

	public static final String GET_ASPIRANTES_CON_RC = "SELECT distinct on (da.idbanner) da.idbanner,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, periodo.clave AS claveingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, sda.caseid, sda.telefonocelular, da.idbanner, campus.grupoBonita, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura, RC.decision, gestionescolar.persistenceid as idlicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT TRUE  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN RESULTADOCOMITE as RC ON RC.idBanner = da.idbanner LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,periodo.clave,sda.caseid,sda.telefonocelular,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, RC.decision, gestionescolar.persistenceid [ORDERBY] [LIMITOFFSET]"

	public static final String GET_RC_BY_IDBANNER = "SELECT IDBANNER,DECISION,PDP,PDU,SSE,PCDA,PCA,OBSERVACIONES,FECHAREGISTRO,PERIODO,PERSISTENCEID,DESACTIVADO,ISMODIFICACION FROM RESULTADOCOMITE WHERE IDBANNER = ?  AND PERSISTENCEID = ?"

	public static final String GET_REGISTRO_RESULTADO_COMITE_BY_IDBANNER = "SELECT RC.IDBANNER,RC.DECISION,RC.FECHAREGISTRO,RC.PERIODO,RC.PERSISTENCEID,GE.NOMBRE AS CARRERA,CC.DESCRIPCION AS VPD, CC2.DESCRIPCION AS CAMPUS, RC.OBSERVACIONES, RC.USUARIOCREACION AS USUARIO, SDA.FECHAULTIMAMODIFICACION, SDA.FECHASOLICITUDENVIADA  FROM RESULTADOCOMITE AS RC LEFT JOIN CATGESTIONESCOLAR AS GE ON RC.LICENCIATURA_PID = GE.PERSISTENCEID LEFT JOIN DETALLESOLICITUD AS DS ON DS.IDBANNER = RC.IDBANNER LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CASEID = DS.CASEID::INTEGER LEFT JOIN CATCAMPUS AS CC ON CC.PERSISTENCEID = SDA.CATCAMPUS_PID LEFT JOIN CATCAMPUS AS CC2 ON CC2.PERSISTENCEID = SDA.CATCAMPUSESTUDIO_PID WHERE RC.IDBANNER = ?  ORDER BY RC.DESACTIVADO NULLS FIRST, RC.persistenceid DESC";

	public static final String DELETE_RESULTADO_COMITE = "DELETE FROM RESULTADOCOMITE WHERE PERSISTENCEID = ?"

	public static final String GET_BITACORA_ERRORES_RC_EXISTE = "SELECT idBanner from CatBitacoraErrorRC where idBanner = ?"

	public static final String INSERT_BITACORA_ERRORES_RC ="INSERT INTO CatBitacoraErrorRC (error,idBanner,usuario,fechaRegistro,persistenceid) VALUES(?,?,?,?,case when (SELECT max(persistenceId)+1 from CatBitacoraErrorRC ) is null then 1 else (SELECT max(persistenceId)+1 from CatBitacoraErrorRC) end )";

	public static final String UPDATE_BITACORA_ERRORES_RC = "UPDATE CatBitacoraErrorRC SET error = ?, idBanner = ?, usuario = ?, fechaRegistro = ? where idBanner = '[IDBANNER]'";

	public static final String GET_BITACORA_ERRRORES_RC = "SELECT idBanner,persistenceid,usuario,fechaRegistro,error from CatBitacoraErrorRC";

	public static final String DELETE_BITACORA_ERRORES_RC = "DELETE FROM CatBitacoraErrorRC WHERE (idBanner) IN ( SELECT idBanner FROM resultadocomite) ";

	//public static final String DELETE_BITACORA_ERRORES_RC = "DELETE FROM CatBitacoraErrorRC WHERE (idBanner) IN ( [LISTABANNER]) ";

	public static final String GET_PERIODO_ACTIVO_FECHA_ESPECIFICA = "SELECT persistenceid, clave, descripcion, fechacreacion, fechaimportacion, iseliminado, isenabled, persistenceversion, usuariobanner, iscuatrimestral, fechafin, fechainicio, isanual, ispropedeutico, issemestral, activo, id FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE AND CAST( '[FECHA]' as DATE) BETWEEN CAST(FECHAINICIO AS DATE) AND CAST(FECHAFIN AS DATE) AND activo = true ORDER BY FECHAFIN LIMIT 3";
	
	public static final String UPDATE_USER_LICENCIATURA_AND_PERIODO = "UPDATE SOLICITUDDEADMISION SET CATGESTIONESCOLAR_PID = ?, CATPERIODO_PID = ? WHERE correoelectronico = ?"
	


	/// Select invp tabla

	public static final String GET_INVP_TABLA = "select * from (SELECT distinct on (s.nombre) s.nombre as sesion,s.persistenceid as id_sesion,p.persistenceid id_prueba, to_char(p.aplicacion, 'DD/MM/YYYY') as fecharegistro, cc.clave as campusVPD, sexo.clave as sexo, '1' as activo, periodo.clave as periodo, '' tipousuario, cec.descripcion as ESTADO_CIVIL,sda.calle ||' #' || cc.numeroexterior || ' '|| sda.colonia ||', '||ce.descripcion || ' ' || sda.ciudad || ' CP. ' || sda.codigopostal direccion, p.nombre prueba, p.cupo, p.registrados, p.entrada, p.salida, p.lugar,p.aplicacion, [COUNTASPIRANTES] FROM catregistro cr inner join DETALLESOLICITUD cda on cda.caseid::bigint=cr.caseid inner join solicituddeadmision sda on sda.caseid=cda.caseid::bigint inner join catcampus cc on cc.persistenceid=sda.catcampusestudio_pid inner join ASPIRANTESPRUEBAS sa on sa.username=sda.correoelectronico inner join pruebas p on sa.prueba_pid=p.persistenceid and p.cattipoprueba_pid=2 inner join sesiones s on s.persistenceid=p.sesion_pid INNER JOIN catsexo sexo ON sexo.persistenceid=sda.catsexo_pid INNER JOIN catperiodo periodo ON sda.catPeriodo_pid=periodo.persistenceid INNER JOIN catestadocivil cec on  sda.catestadocivil_pid=cec.persistenceid INNER JOIN catestados ce on ce.persistenceid=sda.catestado_pid INNER JOIN responsabledisponible rd on rd.prueba_pid=p.persistenceid [WHERE] [ORDERBY]  ) datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_INVP_TABLA_PROCESADOS = "select * from (SELECT distinct on (s.nombre) s.nombre as sesion,s.persistenceid as id_sesion,p.persistenceid id_prueba, to_char(p.aplicacion, 'DD/MM/YYYY') as fecharegistro, cc.clave as campusVPD, sexo.clave as sexo, '1' as activo, periodo.clave as periodo, '' tipousuario, cec.descripcion as ESTADO_CIVIL,sda.calle ||' #' || cc.numeroexterior || ' '|| sda.colonia ||', '||ce.descripcion || ' ' || sda.ciudad || ' CP. ' || sda.codigopostal direccion, p.nombre prueba, p.cupo, p.registrados, p.entrada, p.salida, p.lugar, p.aplicacion, [COUNTASPIRANTES] FROM catregistro cr inner join DETALLESOLICITUD cda on cda.caseid::bigint=cr.caseid inner join solicituddeadmision sda on sda.caseid=cda.caseid::bigint inner join catcampus cc on cc.persistenceid=sda.catcampusestudio_pid inner join AspirantesPruebas sa on sa.username=sda.correoelectronico inner join pruebas p on sa.prueba_pid=p.persistenceid and p.cattipoprueba_pid=2 inner join sesiones s on s.persistenceid=p.sesion_pid INNER JOIN catsexo sexo ON sexo.persistenceid=sda.catsexo_pid INNER JOIN catperiodo periodo ON sda.catPeriodo_pid=periodo.persistenceid INNER JOIN catestadocivil cec on  sda.catestadocivil_pid=cec.persistenceid INNER JOIN catestados ce on ce.persistenceid=sda.catestado_pid INNER JOIN responsabledisponible rd on rd.prueba_pid=p.persistenceid [WHERE] [ORDERBY] ) datos [RESIDENCIA]  [LIMITOFFSET]";
	public static final String COUNT_ASPIRANTESPRUEBA_BY_PRUEBA = "(SELECT COUNT (distinct AP.username) from ASPIRANTESPRUEBAS AS AP where AP.prueba_PID = P.persistenceid and acreditado IS NOT TRUE  ) as sesionregistrados "
	public static final String GET_ASPIRANTESSESION_PRUEBA = "select distinct on (AP.username) AP.username,P.nombre as nombre_prueba,P.Lugar as lugar_prueba,DS.IDBANNER,sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre,SDA.CORREOELECTRONICO,SDA.CURP,campus.descripcion AS campus,gestionescolar.nombre AS licenciatura, CPO.descripcion as periodo,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia,sda.PROMEDIOGENERAL, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, R.descripcion as residencia, sx.descripcion as sexo, PL.ASISTENCIA, P.aplicacion, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, RD.PERSISTENCEID AS RD, DS.CASEID, sda.urlfoto,le.descripcion as lugarexamen,sda.telefonocelular,DS.cbCoincide,AP.acreditado,c.PERSISTENCEID as tipoprueba_pid, RI.idbanner as RIBANNER from ASPIRANTESPRUEBAS AS AP LEFT JOIN PRUEBAS AS P ON P.PERSISTENCEID = AP.PRUEBA_PID LEFT JOIN SESIONASPIRANTE AS SA ON SA.USERNAME = AP.USERNAME LEFT JOIN SOLICITUDDEADMISION AS SDA ON SDA.CORREOELECTRONICO = AP.USERNAME LEFT JOIN DETALLESOLICITUD AS DS ON DS.CASEID::INTEGER = SDA.CASEID LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = DS.catresidencia_pid LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN cattipoprueba c on c.PERSISTENCEID = P.cattipoprueba_pid  LEFT JOIN responsabledisponible as RD on RD.PERSISTENCEID = SA.RESPONSABLEDISPONIBLE_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN PASELISTA PL ON PL.PRUEBA_PID = P.PERSISTENCEID AND PL.USERNAME = AP.USERNAME LEFT JOIN resultadoinvp as RI on RI.idbanner = DS.IDBANNER   WHERE AP.acreditado IS NOT TRUE AND P.persistenceid = ? [WHERE] [ENTREVISTA] [REPORTE]  [ORDERBY] [LIMITOFFSET]";

	public static final String GET_RESULTADOINVPINDIVIDUAL = "SELECT distinct  ri.idbanner, CASE WHEN cr.apellidomaterno=''THEN cr.apellidopaterno || ' ' || CASE WHEN cr.segundonombre=''THEN cr.primernombre ELSE cr.primernombre || ' ' || cr.segundonombre END ELSE cr.apellidopaterno||' '||cr.apellidomaterno ||' ' || CASE WHEN cr.segundonombre=''THEN cr.primernombre ELSE cr.primernombre || ' ' || cr.segundonombre END END AS nombre, s.persistenceid sesion_id, s.nombre sesion, p.aplicacion fecha_prueba, ri.fecha_registro FROM resultadoinvp ri INNER JOIN detallesolicitud ds on ds.idbanner=ri.idbanner INNER JOIN solicituddeadmision sda on sda.caseid::character varying=ds.caseid INNER JOIN catregistro cr on cr.caseid=sda.caseid INNER JOIN sesiones s on s.persistenceid=ri.sesiones_pid INNER JOIN pruebas p on p.sesion_pid=s.persistenceid and p.cattipoprueba_pid=2 [WHERE] [ORDERBY] [LIMITOFFSET]";

	public static final String GET_VALIDACION_ESCALA_INVP = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE LOWER(totc) = ? and LOWER(letra) = ? and sexo = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_ESCALA_INVP_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE LOWER(totc) = ? and LOWER(letra) = ? and sexo = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";

	//public static final String INSERT_CATESCALAINVP = "INSERT INTO CATESCALAINVP (persistenceid,letra,equivalente,totc,sexo,isEliminado,usuarioCreacion)"
	public static final String UPDATE_CATESCALAINVP = "UPDATE CATESCALAINVP set letra = ?, equivalente = ?, totc = ?, sexo = ?, isEliminado = ? where persistenceid = ?"

	public static final String GET_ASPIRANTES_EN_PROCESO_PSICOMETRICO = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura, s.nombre as sesion,RD.responsableid,CAST(TO_CHAR(P.aplicacion, 'DD-MM-YYYY') as varchar) as fechaentrevista, tp.finalizado, sda.countrechazos FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN testpsicometrico AS tp ON tp.caseid::INTEGER = sda.caseid LEFT JOIN ASPIRANTESPRUEBAS as AP on AP.username = sda.correoelectronico AND AP.persistenceid  = (SELECT persistenceid FROM AspirantesPruebas WHERE username = sda.correoelectronico AND cattipoprueba_pid = 1 and responsabledisponible_pid is not null  ORDER BY persistenceid DESC LIMIT 1 ) LEFT JOIN sesiones as S on s.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible as RD on RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas as P ON P.persistenceid = AP.prueba_pid [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, s.nombre, RD.responsableid, P.aplicacion,tp.finalizado,sda.countrechazos [ORDERBY] [LIMITOFFSET] ";
	
	public static final String GET_ASPIRANTES_CON_PSICOMETRICO = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura, s.nombre as sesion,RD.responsableid,CAST(TO_CHAR(P.aplicacion, 'DD-MM-YYYY') as varchar) as fechaentrevista, tp.finalizado,tp.countrechazo,sda2.estatussolicitud as estatussolicitud2  FROM testpsicometrico AS tp INNER JOIN SOLICITUDDEADMISION sda ON tp.caseid::INTEGER = sda.caseid LEFT JOIN SOLICITUDDEADMISIONRESPALDO sda2 ON tp.caseid::INTEGER = sda2.caseid and (CASE WHEN sda2.countrechazos IS NULL THEN 0 ELSE sda2.countrechazos END) = tp.countRechazo LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN ASPIRANTESPRUEBAS as AP on AP.username = sda.correoelectronico and ap.cattipoprueba_pid = 1 and ap.responsabledisponible_pid is not null AND AP.sesiones_pid = tp.sesion_pid LEFT JOIN sesiones as S on s.persistenceid = ap.sesiones_pid LEFT JOIN responsabledisponible as RD on RD.persistenceid = ap.responsabledisponible_pid LEFT JOIN Pruebas as P ON P.persistenceid = AP.prueba_pid [TIPOALUMNO] [WHERE] GROUP BY prepa.descripcion,sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion,campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero,sda.bachillerato,sda.promediogeneral,sda.estatussolicitud,da.tipoalumno,sda.caseid,sda.telefonocelular,da.observacioneslistaroja,da.observacionesrechazo,da.idbanner,campus.grupobonita,ta.descripcion,r.descripcion,tal.descripcion,catcampus.descripcion,campusestudio.clave,gestionescolar.clave, sda.persistenceid, s.nombre, RD.responsableid, P.aplicacion,tp.finalizado,tp.countrechazo,sda2.estatussolicitud [ORDERBY] [LIMITOFFSET]  ";
	
	public static final String GET_ASPIRANTES_RESPALDO = "SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado end AS procedencia, To_char(CURRENT_TIMESTAMP - To_timestamp(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.urlfoto, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.nombre AS licenciatura, periodo.descripcion AS ingreso, CASE WHEN estado.descripcion is null THEN sda.estadoextranjero ELSE estado.descripcion end AS estado, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion end AS preparatoria, sda.promediogeneral, sda.estatussolicitud, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, ta.descripcion AS tipoadmision , r.descripcion AS residencia, tal.descripcion AS tipoalumno, catcampus.descripcion AS transferencia, campusestudio.clave AS clavecampus, gestionescolar.clave AS clavelicenciatura FROM solicituddeadmisionRespaldo sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.catcampus_pid [CAMPUS] LEFT JOIN catcampus campusestudio ON campusestudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catgestionescolar gestionescolar ON gestionescolar.persistenceid=sda.catgestionescolar_pid  LEFT JOIN catperiodo periodo ON periodo.persistenceid =sda.catperiodo_pid LEFT JOIN catestados estado ON estado.persistenceid =sda.catestado_pid  LEFT JOIN catbachilleratos prepa ON prepa.persistenceid =sda.catbachilleratos_pid  LEFT JOIN detallesolicitudrespaldo da ON sda.CASEID::INTEGER=da.CASEID::INTEGER AND da.vencido IS NOT TRUE LEFT JOIN cattipoadmision AS ta ON ta.persistenceid = da.cattipoadmision_pid LEFT JOIN catresidencia AS r ON r.persistenceid = da.catresidencia_pid LEFT JOIN cattipoalumno AS tal ON tal.persistenceid = da.cattipoalumno_pid LEFT JOIN catcampus catcampus ON catcampus.persistenceid=sda.catcampus_pid LEFT JOIN catpais AS catpais ON catpais.persistenceid=sda.catpais_pid  [WHERE] GROUP BY prepa.descripcion, sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero, sda.bachillerato, sda.promediogeneral, sda.estatussolicitud, da.tipoalumno, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, ta.descripcion, r.descripcion, tal.descripcion, catcampus.descripcion, campusestudio.clave, gestionescolar.clave, sda.persistenceid [ORDERBY] [LIMITOFFSET]"
	
	public static final String GET_ASPIRANTES_RESPALDO_COUNT = "SELECT COUNT(*) as registros from ( SELECT COUNT(sda.persistenceid) as registros FROM solicituddeadmisionRespaldo sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.catcampus_pid [CAMPUS] LEFT JOIN catcampus campusestudio ON campusestudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catgestionescolar gestionescolar ON gestionescolar.persistenceid=sda.catgestionescolar_pid  LEFT JOIN catperiodo periodo ON periodo.persistenceid =sda.catperiodo_pid LEFT JOIN catestados estado ON estado.persistenceid =sda.catestado_pid  LEFT JOIN catbachilleratos prepa ON prepa.persistenceid =sda.catbachilleratos_pid  LEFT JOIN detallesolicitudrespaldo da ON sda.CASEID::INTEGER=da.CASEID::INTEGER AND da.vencido IS NOT TRUE LEFT JOIN cattipoadmision AS ta ON ta.persistenceid = da.cattipoadmision_pid LEFT JOIN catresidencia AS r ON r.persistenceid = da.catresidencia_pid LEFT JOIN cattipoalumno AS tal ON tal.persistenceid = da.cattipoalumno_pid LEFT JOIN catcampus catcampus ON catcampus .persistenceid=sda.catcampus_pid LEFT JOIN catpais AS catpais ON catpais.persistenceid=sda.catpais_pid  [WHERE] GROUP BY prepa.descripcion, sda.estadobachillerato, prepa.estado, sda.fechaultimamodificacion, sda.fechasolicitudenviada, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, sda.estadoextranjero, sda.bachillerato, sda.promediogeneral, sda.estatussolicitud, da.tipoalumno, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, ta.descripcion, r.descripcion, tal.descripcion, catcampus.descripcion, campusestudio.clave, gestionescolar.clave, sda.persistenceid) Datos "

	/***********************JESUS OSUNA FIN********************************/
	/*************JOSÉ GARCÍA***********************/
	public static final String GET_CATPROPEDEUTICO ="SELECT p.*, c.descripcion AS campus FROM CATPROPEDEUTICO p INNER JOIN CATCAMPUS c ON p.CAMPUS_PID = c.PERSISTENCEID  [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String INSERT_BITACORA_PAGO = "INSERT INTO CATBITACORAMETODOPAGO(persistenceid, estatus, eventos, fechaMovimiento, iseliminado, mediopago, monto, notransaccion, observaciones, usuarioaspirante, persistenceversion, caseid, campus, nombrepago) VALUES (case when (SELECT max(persistenceId)+1 from CATBITACORAMETODOPAGO ) is null then 1 else (SELECT max(persistenceId)+1 from CATBITACORAMETODOPAGO) end, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ? , ?)";
	public static final String GET_BITACORA_PAGO =" SELECT *, estatus,  fechaMovimiento, medioPago, monto, noTransaccion, observaciones, usuarioAspirante, caseId, nombrePago FROM CATBITACORAMETODOPAGO [WHERE] GROUP BY persistenceId, estatus,  fechaMovimiento, medioPago, monto, noTransaccion, observaciones, usuarioAspirante, caseId [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_BITACORA_PAGO = "SELECT COUNT(PERSISTENCEID) as registros FROM CATBITACORAMETODOPAGO [WHERE]";
	public static final String GET_VALIDACION_CLAVE = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE LOWER(CLAVE) = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_CLAVE_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE LOWER(CLAVE) = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";
	public static final String GET_VALIDACION_ORDEN = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ORDEN::Integer = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_ORDEN_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ORDEN::Integer = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";
	public static final String GET_VALIDACION_IDBANNER = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ID = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_IDBANNER_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ID = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";
	public static final String GET_CAT_NACIONALIDAD = "SELECT * FROM CATNACIONALIDAD [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String CLEAR_INFO_CARTA_TEMPORAL = "DELETE FROM INFOCARTATEMPORAL";
	//	public static final String GET_INFO_CARTA_TEMPORAL = "SELECT INFTEMP.*, DETSOL.IDBANNER, DETSOL.PERSISTENCEID AS id FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER [WHERE] [ORDERBY]";
	public static final String GET_INFO_CARTA_TEMPORAL = "SELECT INFTEMP.*, DETSOL.IDBANNER, SOLAD.PERSISTENCEID id, SOLAD.CORREOELECTRONICO AS EMAIL FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER AND DETSOL.vencido IS NOT true  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_INFO_CARTA_TEMPORAL_NO_RESULTADOS = "SELECT SOLAD.estatussolicitud, SOLAD.CORREOELECTRONICO AS EMAIL, (DETSOL.IDBANNER IS NULL) AS idnocoincide, (SOLAD.estatussolicitud <> 'Carga y consulta de resultados') AS estatusincorrecto,  INFTEMP.*  FROM InfoCartaTemporal AS INFTEMP LEFT JOIN DETALLESOLICITUD AS DETSOL ON(INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER) AND DETSOL.vencido IS NOT true  LEFT JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE] [ORDERBY] [LIMITOFFSET]"
	//	public static final String GET_INFO_CARTA_TEMPORAL_COUNT = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER [WHERE]";
	public static final String GET_INFO_CARTA_TEMPORAL_COUNT = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER AND DETSOL.vencido IS NOT true  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE]";
	public static final String GET_INFO_CARTA_TEMPORAL_COUNT_NO_RESULTADOS = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP LEFT JOIN DETALLESOLICITUD AS DETSOL ON(INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER) AND DETSOL.vencido IS NOT true  LEFT JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE]";
	public static final String SELECCIONAR_CARTA = "UPDATE InfoCartaTemporal SET SELECCIONADO = ? WHERE PERSISTENCEID = ?";
	public static final String SELECCIONAR_TODAS_CARTAS = "UPDATE InfoCartaTemporal SET SELECCIONADO = ?";
	public static final String GET_CARTAS_A_ENVIAR = "SELECT DISTINCT ON (INFTEMP.persistenceid) INFTEMP.*, DETSOL.IDBANNER, SOLAD.PERSISTENCEID id, SOLAD.estatussolicitud, SOLAD.CORREOELECTRONICO AS EMAIL, CAMPUS.GRUPOBONITA, LIC.ISMEDICINA FROM InfoCartaTemporal AS INFTEMP LEFT JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER AND DETSOL.vencido IS NOT true  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) INNER JOIN CATCAMPUS AS CAMPUS ON SOLAD.CATCAMPUS_PID = CAMPUS.PERSISTENCEID INNER JOIN CATGESTIONESCOLAR AS LIC ON LIC.NOMBRE = INFTEMP.CARRERA [WHERE]";

	/*************JOSÉ GARCÍA FIN***********************/
	/***********************ERIC ROSAS*******************************/
	public static final String GET_CATPERIODO = "SELECT P.* FROM CATPERIODO as P [WHERE] [ORDERBY] [LIMITOFFSET]"
	/***********************ERIC ROSAS FIN********************************/
	/***********************ARTURO ZAMORANO*******************************/
	public static final String GET_LAST_FECHA_EXAMEN =  "SELECT TO_CHAR(E.aplicacion, 'YYYY-MM-DD') AS fechaFinal, E.salida, A.username, F.descripcion FROM SESIONASPIRANTE AS A LEFT JOIN SESIONES AS D ON A.sesiones_pid = D.persistenceid LEFT JOIN PRUEBAS AS E ON E.sesion_pid = D.persistenceid LEFT JOIN CATTIPOPRUEBA AS F ON E.cattipoprueba_pid = F.persistenceid WHERE A.username = ?";
	public static final String GET_FIRST_FECHA_EXAMEN = "SELECT TO_CHAR(D.fecha_inicio, 'YYYY-MM-DD') AS fecha_inicio, E.entrada, A.username, F.descripcion FROM SESIONASPIRANTE AS A LEFT JOIN SESIONES AS D ON A.sesiones_pid = D.persistenceid LEFT JOIN PRUEBAS AS E ON E.sesion_pid = D.persistenceid LEFT JOIN CATTIPOPRUEBA AS F ON E.cattipoprueba_pid = F.persistenceid WHERE A.username = ? LIMIT 1";
	public static final String GET_CATCIUDAD_CUSTOM="SELECT C.persistenceid, C.caseid, C.clave, C.descripcion, C.estado, C.fechacreacion, C.iseliminado, C.orden, C.pais, C.persistenceversion, C.region, C.usuariocreacion, C.campus_pid, C.isestado, B.persistenceid AS persistenceidB, B.clave AS claveB, B.descripcion AS descripcionB, B.fechacreacion AS fechacreacionB, B.fechaimplementacion AS fechaimplementacionB, B.id AS idB, B.iseliminado AS iseliminadoB, B.isenabled AS isenabledB, B.persistenceversion AS persistenceversionB, B.urlautordatos AS urlautordatosB, B.urlavisoprivacidad AS urlavisoprivacidadB, B.urldatosveridicos AS urldatosveridicosB, B.usuariobanner AS usuariobannerB, B.grupobonita AS grupobonitaB, B.orden AS ordenB, B.calle AS calleB, B.codigopostal AS codigopostalB, B.colonia AS coloniaB, B.municipio AS municipioB, B.numeroexterior AS numeroexteriorB, B.numerointerior AS numerointeriorB, B.estado_pid AS estado_pidB, B.pais_pid AS pais_pidB, B.email AS emailB, B.urlimagen AS urlimagenB FROM CATCIUDAD C LEFT JOIN CATCAMPUS B ON B.PERSISTENCEID = C.CAMPUS_PID [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPROPEDEUTICO_GRAL="SELECT A.persistenceid, A.clave, A.descripcion, A.id, A.persistenceversion, STRING_AGG(CONCAT(C.descripcion,' (',B.tipoperiodo,')'),', ') AS campus FROM CatPropedeuticoGral A LEFT JOIN CatRelacionCampusTipo B ON B.catpropedeuticogral_pid = A.persistenceid AND B.isEliminado=false LEFT JOIN CatCampus C ON C.persistenceid = B.catcampus_pid [WHERE] GROUP BY A.persistenceid, A.clave, A.descripcion, A.id, A.persistenceversion [ORDERBY] [LIMITOFFSET]";
	public static final String GET_CATPROPEDEUTICO_RELACION_TIPO="SELECT C.clave, C.descripcion, D.usuariocreacion, A.persistenceid AS persistenceIdCatRecibirAtencionEspiritual, D.persistenceid, D.fechainicio, D.fechafinal, B.descripcion AS campus, A.tipoperiodo, D.idioma FROM CatRelacionCampusTipo A LEFT JOIN CatCampus B ON B.persistenceid = A.catcampus_pid INNER JOIN CatPropedeuticoGral C ON A.catpropedeuticogral_pid = C.persistenceid AND C.isEliminado = false LEFT JOIN CatPropedeutico D ON D.persistenceidcatrecibiratencionespiritual = A.persistenceid [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_CATPERIODO_BY_ID="SELECT persistenceid, clave, descripcion, fechacreacion, fechaimportacion, iseliminado, isenabled, persistenceversion, usuariobanner, campus, nombrecampus, campus_pid, iscuatrimestral, fechafin, fechainicio, isanual, ispropedeutico, issemestral, activo, id FROM catPeriodo WHERE persistenceid = ?";
	public static final String GET_CATPERIODO_BY_ID_NO_CAMPUS="SELECT fechafin, fechainicio FROM catPeriodo WHERE persistenceid = ?";
	public static final String GET_CATPROPEDEUTICO_BY_FECHA = "SELECT B.grupobonita, A.tipoperiodo, C.descripcion, D.persistenceid, D.clave, D.fechacreacion, D.fechaejecucion, D.iseliminado, D.persistenceversion, D.usuariocreacion, D.fechafinal, D.fechainicio, D.nombrecampus, D.persistenceidcatrecibiratencionespiritual FROM CatRelacionCampusTipo A LEFT JOIN CatCampus B ON B.persistenceid = A.catcampus_pid INNER JOIN CatPropedeuticoGral C ON A.catpropedeuticogral_pid = C.persistenceid AND C.isEliminado = false LEFT JOIN CatPropedeutico D ON D.persistenceidcatrecibiratencionespiritual = A.persistenceid WHERE B.grupobonita = ? AND A.tipoperiodo = ? AND (TO_TIMESTAMP(D.fechainicio,'YYYY-MM-DD\"T\"HH24:MI:SS') > NOW() AND TO_TIMESTAMP(D.fechafinal,'YYYY-MM-DD\"T\"HH24:MI:SS') <= TO_TIMESTAMP(?,'YYYY-MM-DD\"T\"HH24:MI:SS')) AND D.idioma = ?";
	public static final String GET_PERIODO_ACTIVO_FINAL = "SELECT persistenceid, clave, descripcion, fechacreacion, fechaimportacion, iseliminado, isenabled, persistenceversion, usuariobanner, iscuatrimestral, fechafin, fechainicio, isanual, ispropedeutico, issemestral, activo, id FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE AND NOW() BETWEEN CAST(FECHAINICIO AS DATE) AND CAST(FECHAFIN AS DATE) AND activo = true ORDER BY FECHAFIN LIMIT 3";
	public static final String GET_HUBSPOT_KEY_BY_CAMPUS = "SELECT A.persistenceid, A.conekta, A.crispchat, A.iseliminado, A.mailgun, A.persistenceversion, A.campus_pid, A.conektapublickey, A.mailguncorreo, A.mailgundominio, A.hubspotkey FROM catApiKey A LEFT JOIN CATCAMPUS B ON A.campus_pid = B.PERSISTENCEID WHERE B.CLAVE = ?";
	public static final String GET_USERS_BY_USERNAME = "SELECT tenantid, id, enabled, username, password, firstname, lastname, title, jobtitle, manageruserid, createdby, creationdate, lastupdate, iconid FROM user_ WHERE LOWER(username) LIKE LOWER(CONCAT('%',?,'%'))";
	public static final String GET_CODIGO_POSTAL_EXISTENTE = "SELECT COUNT(codigopostal) resultado from CatCodigoPostal WHERE codigopostal = ? AND LOWER(estado) = ? AND LOWER(municipio) = ? AND LOWER(ciudad) = ? AND LOWER(asentamiento) = ? AND LOWER(tipoasentamiento) = ?";
	public static final String GET_SESION_MIGRACION = "SELECT persistenceid, persistenceversion, nombre, descripcion, fecha_inicio, ismedicina, preparatoria_pid, estado_pid, pais_pid, borrador, campus_pid, tipo, ciudad_pid, ultimo_dia_inscripcion, iseliminado FROM Sesiones WHERE iseliminado = false AND campus_pid = ? AND TO_CHAR(fecha_inicio, 'YYYY-MM-DD') = ? AND nombre like CONCAT('%', ?,'%') ORDER BY persistenceid DESC";
	public static final String GET_RESPONSABLE_MIGRACION = "SELECT A.persistenceid, A.horario, A.disponible, A.persistenceversion, A.responsableid, A.prueba_pid, A.licenciaturas, A.ocupado, A.iseliminado FROM ResponsableDisponible A INNER JOIN Pruebas B ON A.prueba_pid = B.persistenceid INNER JOIN Sesiones C ON B.sesion_pid = C.persistenceid AND C.persistenceid = ? WHERE A.iseliminado = false AND horario = ? ORDER BY C.persistenceid DESC";
	public static final String GET_CASEID_BY_CORREO = "SELECT caseid FROM SOLICITUDDEADMISION WHERE correoelectronico = ? AND iseliminado=false";
	public static final String GET_APIKEY_CRISP = "SELECT crispchat FROM CATAPIKEY GROUP BY crispchat";
	public static final String GET_ID_CASEVARIABLE = "SELECT MAX(id) AS idVariable, name FROM public.arch_data_instance WHERE containerid = ? GROUP BY name";
	public static final String GET_CASEVARIABLE = "SELECT tenantid, id, name, description, transientdata, classname, containerid, containertype, namespace, element, intvalue, longvalue, shorttextvalue, booleanvalue, doublevalue, floatvalue, blobvalue, clobvalue, discriminant, archivedate, sourceobjectid FROM public.arch_data_instance WHERE id IN ([LISTIDVARIABLE])";
	public static final String UPDATE_INFORMACION_ASPIRANTE = "UPDATE SolicitudDeAdmision SET primernombre = ?, segundonombre = ?, apellidopaterno = ?, apellidomaterno = ?, curp = ?, promediogeneral = ?, fechanacimiento = ?, catsexo_pid = ?, catnacionalidad_pid = ? WHERE persistenceid = ?";
	public static final String UPDATE_INFORMACION_ASPIRANTE_PADRESTUTOR = "UPDATE padrestutor SET nombre = ?, apellidos=? WHERE persistenceid = ?";
	public static final String DELETE_BACHILLERATO_BY_ID = "UPDATE CatBachilleratos SET clave=?, id=?, idDireccion=?, isEliminado=true WHERE id=?";
	public static final String SELECT_PROPERTIES_BONITA = "SELECT A.tenantid, A.id, A.process_id, A.name, A.value FROM proc_parameter AS A INNER JOIN process_definition AS B ON B.processid = A.process_id AND B.activationstate='ENABLED' WHERE A.name IN ('usuario','password') ORDER BY B.version DESC Limit 2";
	public static final String UPDATE_TESTPSICOMETRICO = "UPDATE TESTPSICOMETRICO SET [COLUMNA] WHERE caseid=? AND countRechazo = ?";
	public static final String INSERT_TESTPSICOMETRICO = "INSERT INTO TESTPSICOMETRICO (ajusteEfectivo,ajusteEscolarPrevio,ajusteExistencial,ajusteMedioFamiliar,ajusteMedioSocial,ajusteReligioso,califAjusteAfectivo,califAjusteEscolarPrevio,califAjusteExistencial,califAjusteMedioFamiliar,califAjusteMedioSocial,califAjusteReligioso,caseId,conclusioneINVP,fechaEntrevista,finalizado,hasParticipadoActividadesAyuda,interpretacionINVP,otroTipoAsistencia,participacionActividadesVoluntaria,persistenceversion,puntuacionINVP,quienIntegro,quienRealizoEntrevista,resumenSalud,catpersonasaludable_pid,catproblemasaludatencionco_pid,catrequieresasistencia_pid,catvivesestadodiscapacidad_pid) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	public static final String INSERT_TESTPSICOMETRICO_V2 = "INSERT INTO TESTPSICOMETRICO (persistenceid,ajusteEfectivo, ajusteEscolarPrevio, ajusteExistencial, ajusteMedioFamiliar, ajusteMedioSocial, ajusteReligioso, califAjusteAfectivo, califAjusteEscolarPrevio, califAjusteExistencial, califAjusteMedioFamiliar, califAjusteMedioSocial, califAjusteReligioso, caseId, conclusioneINVP, fechaEntrevista, finalizado, hasParticipadoActividadesAyuda, interpretacionINVP, otroTipoAsistencia, participacionActividadesVoluntaria, persistenceversion, puntuacionINVP, quienIntegro, quienRealizoEntrevista, resumenSalud, catpersonasaludable_pid, catproblemasaludatencionco_pid, catrequieresasistencia_pid, catvivesestadodiscapacidad_pid, fuentesInfluyeronDesicion, personasInfluyeronDesicion, problemasSaludAtencionContinua, tipoDiscapacidad, hasRecibidoAlgunaTerapia,countRechazo,sesion_pid) VALUES (case when (SELECT max(persistenceId)+1 from TESTPSICOMETRICO ) is null then 1 else (SELECT max(persistenceId)+1 from TESTPSICOMETRICO) end,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

	public static final String SELECT_TESTPSICOMETRICO_BY_CASEID = "SELECT caseId, persistenceid, ajusteefectivo, ajusteescolarprevio, ajusteexistencial, ajustemediofamiliar, ajustemediosocial, ajustereligioso, califajusteafectivo, califajusteescolarprevio, califajusteexistencial, califajustemediofamiliar, califajustemediosocial, califajustereligioso, conclusioneinvp, interpretacioninvp, persistenceversion, puntuacioninvp, recomendadopca, recomendadopcda, recomendadopdp, recomendadopdu, recomendadopia, recomendadosse, fechaentrevista, finalizado, resumensalud, otrotipoasistencia, catpersonasaludable_pid, catproblemasaludatencionco_pid, catrequieresasistencia_pid, catvivesestadodiscapacidad_pid, hasparticipadoactividadesayuda, participacionactividadesvoluntaria, quienintegro, quienrealizoentrevista FROM TESTPSICOMETRICO WHERE caseId = ?";
	public static final String SELECT_TESTPSICOMETRICO_BY_CASEID_V2 = "SELECT  persistenceid, fechaEntrevista, ajusteMedioFamiliar, califAjusteMedioFamiliar, ajusteEscolarPrevio, califAjusteEscolarPrevio, ajusteMedioSocial, califAjusteMedioSocial, ajusteEfectivo, califAjusteAfectivo, ajusteReligioso, califAjusteReligioso, ajusteExistencial, califAjusteExistencial, interpretacionINVP, conclusioneINVP, recomendadoPDU, recomendadoSSE, recomendadoPDP, recomendadoPIA, recomendadoPCDA, recomendadoPCA, puntuacionINVP, resumenSalud, finalizado, otroTipoAsistencia, quienRealizoEntrevista, quienIntegro, hasParticipadoActividadesAyuda, participacionActividadesVoluntaria, fuentesInfluyeronDesicion, personasInfluyeronDesicion, problemasSaludAtencionContinua, tipoDiscapacidad, catrecibidoterapia_pid, catproblemasaludatencionco_pid, catrequieresasistencia_pid, catvivesestadodiscapacidad_pid, catpersonasaludable_pid FROM TESTPSICOMETRICO WHERE caseId = ?";
	public static final String SELECT_AD_BY_CASEID = "SELECT * FROM autodescripcionv2 WHERE caseId = ?";

	public static final String DELETE_TESTPSICOMETRICO_FIENTESINFLUYE = "DELETE FROM testpsicometri_fientesinfluye WHERE testpsicometrico_pid=?";
	public static final String INSERT_TESTPSICOMETRICO_FIENTESINFLUYE = "INSERT INTO testpsicometri_fientesinfluye (testpsicometrico_pid, catinformaciondelacarrera_pid, fientesinfluyerondesicion_order) VALUES (?,?,?)";

	public static final String DELETE_TESTPSICOMETRICO_RAZONESINGRESO = "DELETE FROM testpsicometri_razonesingreso WHERE testpsicometrico_pid=?";
	public static final String INSERT_TESTPSICOMETRICO_RAZONESINGRESO = "INSERT INTO testpsicometri_razonesingreso (testpsicometrico_pid, catrazonesdeingreso_pid, razonesingreso_order) VALUES (?,?,?)";

	public static final String DELETE_TESTPSICOMETRICO_DISCAPACIDADES = "DELETE FROM testpsicometri_discapacidades WHERE testpsicometrico_pid=?";
	public static final String INSERT_TESTPSICOMETRICO_DISCAPACIDADES = "INSERT INTO testpsicometri_discapacidades (testpsicometrico_pid, cattipodiscapacidad_pid, discapacidades_order) VALUES (?,?,?)";

	public static final String DELETE_TESTPSICOMETRICO_CUSTOSRECOMEND = "DELETE FROM testpsicometri_custosrecomend WHERE testpsicometrico_pid=?";
	public static final String INSERT_TESTPSICOMETRICO_CUSTOSRECOMEND = "INSERT INTO testpsicometri_custosrecomend (testpsicometrico_pid, catcursos_pid, custosRecomendados_order) VALUES (?,?,?)";

	public static final String DELETE_TESTPSICOMETRICO_PROBLEMASSALUD = "DELETE FROM testpsicometri_problemassalud WHERE testpsicometrico_pid=?";
	public static final String INSERT_TESTPSICOMETRICO_PROBLEMASSALUD = "INSERT INTO testpsicometri_problemassalud (testpsicometrico_pid, catproblemasalud_pid, problemasSalud_order) VALUES (?,?,?)";

	public static final String DELETE_TESTPSICOMETRICO_TIPOASISTENCIA = "DELETE FROM testpsicometri_tipoasistencia WHERE testpsicometrico_pid=?";
	public static final String INSERT_TESTPSICOMETRICO_TIPOASISTENCIA = "INSERT INTO testpsicometri_tipoasistencia (testpsicometrico_pid, cattipoasistencia_pid, tipoAsistencia_order) VALUES (?,?,?)";

	public static final String INSERT_TESTPSICOMETRICO_OBSERVACIONES = "INSERT INTO TestPsicometricoObservaciones(persistenceid,persistenceversion, orden, universidad, examen, admitido, vencido, porcentajeBeca, porcentajeCredito, caseId, countRechazo) VALUES (case when (SELECT max(persistenceId)+1 from TestPsicometricoObservaciones ) is null then 1 else (SELECT max(persistenceId)+1 from TestPsicometricoObservaciones) end,0,?,?,?,?,?,?,?,?,?)";
	public static final String DELETE_TESTPSICOMETRICO_OBSERVACIONES = "DELETE FROM TestPsicometricoObservaciones WHERE caseId=? and vencido is not true";

	public static final String INSERT_TESTPSICOMETRICO_RELATIVOS = "INSERT INTO TestPsicometricoRelativos(persistenceid,nombre,apellidos,empresaTrabaja,otroParentesco,caseId,jubilado,vencido,catparentezco_pid,vive_pid,persistenceversion,countRechazo) VALUES (case when (SELECT max(persistenceId)+1 from TestPsicometricoRelativos ) is null then 1 else (SELECT max(persistenceId)+1 from TestPsicometricoRelativos) end,?,?,?,?,?,?,?,?,?,0,?) ";
	public static final String DELETE_TESTPSICOMETRICO_RELATIVOS = "DELETE FROM TestPsicometricoRelativos WHERE caseId=? and vencido is not true";
	public static final String UPDATE_PUNTUACION_INVP="UPDATE IMPORTACIONPAA set invp=? where idbanner=(SELECT idbanner from detallesolicitud where caseid=?) and sesion_pid = ?;"

	public static final String INSERT_TESTPSICOMETRICO_CARRERASREC = "INSERT INTO TestPsicometricoCarrerasRec(orden, comentarios, caseId, vencido, carrera_pid, persistenceversion,countRechazo) VALUES (?, ?, ?, ?, ?, 0, ?)";
	public static final String DELETE_TESTPSICOMETRICO_CARRERASREC = "DELETE FROM TestPsicometricoCarrerasRec WHERE caseId=? and vencido is not true";

	public static final String INSERT_TESTPSICOMETRICO_RASGOS = "INSERT INTO TestPsicometricoRasgos(persistenceid,rasgo_pid, calificacion_pid, caseId, vencido, persistenceversion, countRechazo) VALUES (case when (SELECT max(persistenceId)+1 from TestPsicometricoRasgos ) is null then 1 else (SELECT max(persistenceId)+1 from TestPsicometricoRasgos) end,?, ?, ?, ?, 0,?)";
	public static final String DELETE_TESTPSICOMETRICO_RASGOS = "DELETE FROM TestPsicometricoRasgos WHERE caseId=? and vencido is not true";

	public static final String INSERT_TESTPSICOMETRICO_TERAPIAS = "INSERT INTO TestPsicometricoTerapias(tipoTerapia, cuantoTiempo,recibidoTerapiaString,otraTerapia,caseId,vencido,catTipoTerapia_pid,catRecibidoTerapia_pid,persistenceversion) VALUES (?,?,?,?,?,?,?,?,0)";
	public static final String DELETE_TESTPSICOMETRICO_TERAPIAS = "DELETE FROM TestPsicometricoTerapias WHERE caseId=? and vencido is not true";

	/***********************ARTURO ZAMORANO FIN*******************************/
	/***********************MARIO ICEDO*******************************/

	public static final String GET_SOLICITUDES_TRANSFERENCIA="SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.urlfoto, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_SOLICITUDES_TRANSFERENCIA="SELECT tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_COUNT_SOLICITUDES_TRASNFERENCIA="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_SOLICITUDES_TRANSFERENCIA="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String UPDATE_DATOS_TRASNFERENCIA="UPDATE SOLICITUDDEADMISION SET catcampus_pid = ?, catgestionescolar_pid = ?, catpropedeutico_pid = ?, catperiodo_pid = ?, catcampusestudio_pid = ?, estatussolicitud = ? WHERE caseid = ?";
	public static final String INSERT_BITACORA_TRANSFERENCIA="INSERT INTO CATBITACORATRANSFERENCIAS (persistenceid, persistenceversion, aspirante, correoAspirante, valorOriginal, valorCambio, fechaCreacion, usuarioCreacion, campusAnterior, campusNuevo,licenciatura,periodo,estatus,caseid,idbanner) VALUES (case when (SELECT max(persistenceId)+1 from CATBITACORATRANSFERENCIAS) is null then 1 else (SELECT max(persistenceId)+1 from CATBITACORATRANSFERENCIAS) end,0,?,?,?,?,now(),?,?,?,?,?,?,?,?)";
	//public static final String GET_USUARIOS_REGISTRADOS="SELECT   sda.persistenceid, sda.estatussolicitud, sda.urlfoto, sda.urlconstancia, sda.urlcartaaa, sda.urlresultadopaa, sda.urlactanacimiento, sda.urldescuentos, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion AS campussede, campus.descripcion        AS campus, gestionescolar.nombre     AS licenciatura, periodo.descripcion       AS ingreso, estado.descripcion        AS estado, prepa.descripcion         AS prepacatalogo, prepa.persistenceid       AS idPrepa, CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.promediogeneral, sda.estatussolicitud, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, le.descripcion           AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion   AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion         AS paisexamen, prope.descripcion        AS propedeutico, sexo.descripcion         AS sexo, sda.paisbachillerato, sda.estadobachillerato, sda.ciudadbachillerato, sda.fechanacimiento, sda.estadoextranjero,sda.bachillerato, cta.descripcion as tipoAdmision, tipoalumno.descripcion as tipoalumno, sda.ciudad as ciudadvives, paisvives.descripcion as paisvives,sda.resultadoPAA,sda.tienePAA, da.cbCoincide,da.observacionesListaRoja,da.descuento  FROM  solicituddeadmision sda LEFT JOIN catcampus campus ON        campus.persistenceid=sda.catcampus_pid [CAMPUS] LEFT JOIN catcampus campusestudio ON        campusestudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catgestionescolar gestionescolar ON        gestionescolar.persistenceid=sda.catgestionescolar_pid [PROGRAMA] LEFT JOIN catperiodo periodo ON        periodo.persistenceid =sda.catperiodo_pid [INGRESO] LEFT JOIN catestados estado ON        estado.persistenceid =sda.catestado_pid [ESTADO] LEFT JOIN catbachilleratos prepa ON        prepa.persistenceid =sda.catbachilleratos_pid [BACHILLERATO] LEFT JOIN detallesolicitud da ON        sda.caseid::integer=da.caseid::integer LEFT JOIN catlugarexamen le ON        le.persistenceid = sda.catlugarexamen_pid LEFT JOIN catestados estadoexamen ON        estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON        pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON        ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON        ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON        prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON        residencia.persistenceid = da.catresidencia_pid LEFT JOIN catsexo sexo ON sexo.persistenceid = sda.catsexo_pid  LEFT JOIN catpais paisvives ON paisvives.persistenceid = sda.catpais_pid LEFT JOIN catciudad ciudadvives on ciudadvives.descripcion = sda.ciudad LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision cta ON cta.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY  sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, prepa.persistenceid, prepa.descripcion, sda.promediogeneral, sda.estatussolicitud, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion, sexo.descripcion, sda.paisbachillerato, sda.estadobachillerato, sda.ciudadbachillerato, sda.fechanacimiento, sda.estadoextranjero,sda.bachillerato,cta.descripcion, tipoalumno.descripcion,ciudadvives.descripcion, paisvives.descripcion, sda.resultadoPAA,sda.tienePAA, da.cbCoincide, da.observacionesListaRoja,da.descuento [ORDERBY] [LIMITOFFSET]"
	public static final String GET_USUARIOS_REGISTRADOS="SELECT   sda.persistenceid, sda.estatussolicitud, sda.urlfoto, sda.urlconstancia, sda.urlcartaaa, sda.urlresultadopaa, sda.urlactanacimiento, sda.urldescuentos, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion AS campussede, campus.descripcion        AS campus, gestionescolar.nombre     AS licenciatura, periodo.descripcion       AS ingreso, estado.descripcion        AS estado, prepa.descripcion         AS prepacatalogo, prepa.persistenceid       AS idPrepa, CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.promediogeneral, sda.estatussolicitud, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, sda.telefono, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, le.descripcion           AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion   AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion         AS paisexamen, c.descripcion        AS propedeutico, sexo.descripcion         AS sexo, sda.paisbachillerato, sda.estadobachillerato, sda.ciudadbachillerato, sda.fechanacimiento, sda.estadoextranjero,sda.bachillerato, cta.descripcion as tipoAdmision, tipoalumno.descripcion as tipoalumno, sda.ciudad as ciudadvives, paisvives.descripcion as paisvives,sda.resultadoPAA,sda.tienePAA, da.cbCoincide,da.observacionesListaRoja,da.descuento  FROM  solicituddeadmision sda LEFT JOIN catcampus campus ON        campus.persistenceid=sda.catcampus_pid [CAMPUS] LEFT JOIN catcampus campusestudio ON        campusestudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catgestionescolar gestionescolar ON        gestionescolar.persistenceid=sda.catgestionescolar_pid [PROGRAMA] LEFT JOIN catperiodo periodo ON        periodo.persistenceid =sda.catperiodo_pid [INGRESO] LEFT JOIN catestados estado ON        estado.persistenceid =sda.catestado_pid [ESTADO] LEFT JOIN catbachilleratos prepa ON        prepa.persistenceid =sda.catbachilleratos_pid [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::integer=da.caseid::integer AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON        le.persistenceid = sda.catlugarexamen_pid LEFT JOIN catestados estadoexamen ON        estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON        pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON        ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON        ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON        prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN CatRelacionCampusTipo A ON prope.persistenceidcatrecibiratencionespiritual = A.persistenceid LEFT JOIN CatPropedeuticoGral C ON A.catpropedeuticogral_pid = C.persistenceid AND C.isEliminado = false LEFT JOIN catresidencia residencia ON        residencia.persistenceid = da.catresidencia_pid LEFT JOIN catsexo sexo ON sexo.persistenceid = sda.catsexo_pid  LEFT JOIN catpais paisvives ON paisvives.persistenceid = sda.catpais_pid LEFT JOIN catciudad ciudadvives on ciudadvives.descripcion = sda.ciudad LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision cta ON cta.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY  sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, prepa.persistenceid, prepa.descripcion, sda.promediogeneral, sda.estatussolicitud, residencia.descripcion, sda.caseid, sda.telefonocelular, sda.telefono, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, c.descripcion, sexo.descripcion, sda.paisbachillerato, sda.estadobachillerato, sda.ciudadbachillerato, sda.fechanacimiento, sda.estadoextranjero,sda.bachillerato,cta.descripcion, tipoalumno.descripcion,ciudadvives.descripcion, paisvives.descripcion, sda.resultadoPAA,sda.tienePAA, da.cbCoincide, da.observacionesListaRoja,da.descuento [ORDERBY] [LIMITOFFSET]";

	public static final String GET_CONSTANCIAS_HISTORICO = "SELECT caseId, urlConstancia FROM ListaConstanciaFile WHERE caseId = ? ORDER BY PERSISTENCEID DESC";
	//public static final String GET_BITACORA_TRANSFERENCIA="SELECT *, aspirante, correoaspirante, fechacreacion,usuariocreacion, valorcambio,valororiginal,campusanterior,campusnuevo,estatus,licenciatura,periodo,idbanner,caseid FROM CATBITACORATRANSFERENCIAS [WHERE] [campus] GROUP BY persistenceId, persistenceversion, aspirante, correoaspirante,fechacreacion,usuariocreacion,valorcambio,valororiginal,licenciatura,periodo,estatus,caseid [ORDERBY] [LIMITOFFSET]";
	public static final String GET_BITACORA_TRANSFERENCIA="SELECT   BT.*, BT.aspirante, BT.correoaspirante, BT.fechacreacion, BT.usuariocreacion, BT.valorcambio, BT.valororiginal, BT.campusanterior, BT.campusnuevo, BT.estatus, BT.licenciatura, BT.periodo, BT.idbanner, BT.caseid, SDA.urlfoto FROM     CATBITACORATRANSFERENCIAS AS BT LEFT JOIN SOLICITUDDEADMISION AS SDA ON BT.caseid = SDA.caseid [WHERE] [campus] GROUP BY BT.persistenceid, BT.persistenceversion, BT.aspirante, BT.correoaspirante, BT.fechacreacion, BT.usuariocreacion, BT.valorcambio, BT.valororiginal, BT.licenciatura, BT.periodo, BT.estatus, BT.caseid, SDA.urlfoto [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_BITACORA_TRANSFERENCIA="SELECT COUNT(PERSISTENCEID) as registros FROM CATBITACORATRANSFERENCIAS AS BT [WHERE] [campus]";
	public static final String GET_COUNT_USUARIOS_REGISTRADOS="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	public static final String UPDATE_REGISTRO_NUMEROCONTACTO="UPDATE CATREGISTRO SET numeroContacto = ?  WHERE  nombreusuario = ? ";
	public static final String UPDATE_USUARIOS_REGISTRADOS="UPDATE solicituddeadmision SET    primernombre = ?, segundonombre = ?, apellidopaterno = ?, apellidomaterno = ?, correoelectronico = ?, catcampusestudio_pid = ?, catgestionescolar_pid = ?, catperiodo_pid = ?, catpropedeutico_pid = ?, catcampus_pid = ?, catsexo_pid = ?, fechanacimiento = ?,  catbachilleratos_pid = ?, bachillerato = ?, paisbachillerato = ?, estadobachillerato = ?, ciudadbachillerato = ?, promediogeneral = ?, catEstadoExamen_pid = ?, ciudadexamen_pid = ?, catpaisexamen_pid = ?, telefonocelular = ?  WHERE  caseid = ?";
	public static final String UPDATE_CORREO_ELECTRONICO_CAT_REGISTRO="update catregistro set correoelectronico=? where correoelectronico=?"
	public static final String UPDATE_CORREO_ELECTRONICO_SOLICITUDDEADMISION="update solicituddeadmision set correoelectronico=? where correoelectronico=?"
	public static final String UPDATE_CORREO_ELECTRONICO_SESIONASPIRANTE="update sesionaspirante set username=? where username=?"
	public static final String UPDATE_CORREO_ELECTRONICO_PASELISTA="update paselista set username=? where username=?"
	public static final String UPDATE_CORREO_ELECTRONICO_ASPIRANTESPRUEBAS="update ASPIRANTESPRUEBAS set username = ? where username = ?";
	public static final String UPDATE_CORREO_ELECTRONICO_BITACORACORREO="update CatBitacoraSesiones set username = ? where username = ?";
	public static final String UPDATE_CORREO_ELECTRONICO_PLANTILLAREGISTRO="update plantillaregistro set correo=? where correo=?"
	public static final String GET_PROPEDEUTICOS_NO_FECHA="SELECT CPRO.DESCRIPCION AS PROPE, CPRO.fechainicio, CPRO.fechafinal, CC.descripcion, CC.grupobonita  FROM CATPROPEDEUTICOGRAL CPG LEFT JOIN CATRELACIONCAMPUSTIPO RCT ON CPG.persistenceid = RCT.catpropedeuticogral_pid LEFT JOIN CATCAMPUS CC ON RCT.catcampus_pid = CC.persistenceid AND RCT.ISELIMINADO=false LEFT JOIN CatPropedeutico CPRO ON CPRO.persistenceidcatrecibiratencionespiritual = RCT.persistenceid WHERE CPG.ISELIMINADO=false AND CPRO.fechainicio IS NULL AND cc.grupobonita IN ([CAMPUS] GROUP BY CPRO.DESCRIPCION, CPRO.fechainicio, CPRO.fechafinal, CC.descripcion, CC.grupobonita"
	public static final String GET_USUARIOS_RECHAZADOS_COMITE="SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia,sda.countRechazos,tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.urlfoto, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, prepa.estado, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_USUARIOS_RECHAZADOS_COMITE="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";

	public static final String UPDATE_DATOS_REACTIVARUSUARIO="UPDATE SOLICITUDDEADMISION SET catcampus_pid = ?, catgestionescolar_pid = ?, catpropedeutico_pid = ?, catperiodo_pid = ?, catcampusestudio_pid = ?, countRechazos = ?, estatussolicitud = 'Solicitud en proceso', selectedindex = 1, selectedindexfamiliar = 0, selectedindexpersonal = 0, selectedindexrevision = 0, aceptado = NULL WHERE caseid = ?";
	public static final String UPDATE_DATOS_REACTIVARUSUARIO_AUTODESCRIPCION="UPDATE AUTODESCRIPCIONV2 SET pageIndex = 0 WHERE caseid = ?";
	public static final String GET_USUARIOS_SOLICITUD_ABANDONADA="SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.urlfoto, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_SOLICITUDES_ABANDONADA="SELECT COUNT(DISTINCT sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_USUARIOS_SOLICITUD_VENCIDA="SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.urlfoto, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";

	public static final String GET_COUNT_SOLICITUDES_VENCIDA="SELECT COUNT(DISTINCT sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER AND da.vencido IS NOT true  LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_PADRESTUTOR_VENCIDOS="SELECT A.persistenceid, A.apellidos, A.calle, A.caseid, A.ciudad, A.codigopostal, A.colonia, A.correoelectronico, A.delegacionmunicipio, A.desconozcodatospadres, A.empresatrabaja, A.estadoextranjero, A.giroempresa, A.istutor, A.nombre, A.numeroexterior, A.numerointerior, A.otroparentesco, A.persistenceversion, A.puesto, A.telefono, A.vivecontigo, B.descripcion AS campusegreso, C.descripcion AS egresoanahuac, D.descripcion AS escolaridad, E.descripcion AS estado, F.descripcion AS pais, G.descripcion as parentesco, H.descripcion AS titulo, I.descripcion AS trabaja, J.descripcion as vive, A.vencido FROM padrestutor AS A LEFT JOIN CatCampus AS B ON A.catcampusegreso_pid = B.persistenceid LEFT JOIN CatEgresadoUniversidadAnahuac AS C ON A.categresoanahuac_pid = C.persistenceid LEFT JOIN CatEscolaridad AS D ON A.catescolaridad_pid = D.persistenceid LEFT JOIN CatEstados AS E ON A.catestado_pid = E.persistenceid LEFT JOIN CatPais AS F ON A.catpais_pid = F.persistenceid LEFT JOIN CatParentesco AS G ON A.catparentezco_pid = G.persistenceid LEFT JOIN CatTitulo AS H ON A.cattitulo_pid = H.persistenceid LEFT JOIN CatPadreTrabaja AS I ON A.cattrabaja_pid = I.persistenceid LEFT JOIN CatVive AS J ON A.vive_pid = J.persistenceid WHERE A.istutor = true AND A.caseid = ? AND A.vencido = true AND J.descripcion IS NULL;";
	public static final String GET_MADRE_VENCIDO="SELECT A.persistenceid, A.apellidos, A.calle, A.caseid, A.ciudad, A.codigopostal, A.colonia, A.correoelectronico, A.delegacionmunicipio, A.desconozcodatospadres, A.empresatrabaja, A.estadoextranjero, A.giroempresa, A.istutor, A.nombre, A.numeroexterior, A.numerointerior, A.otroparentesco, A.persistenceversion, A.puesto, A.telefono, A.vivecontigo, B.descripcion AS campusegreso, C.descripcion AS egresoanahuac, D.descripcion AS escolaridad, E.descripcion AS estado, F.descripcion AS pais, G.descripcion as parentesco, H.descripcion AS titulo, I.descripcion AS trabaja, J.descripcion as vive, A.vencido FROM padrestutor AS A LEFT JOIN CatCampus AS B ON A.catcampusegreso_pid = B.persistenceid LEFT JOIN CatEgresadoUniversidadAnahuac AS C ON A.categresoanahuac_pid = C.persistenceid LEFT JOIN CatEscolaridad AS D ON A.catescolaridad_pid = D.persistenceid LEFT JOIN CatEstados AS E ON A.catestado_pid = E.persistenceid LEFT JOIN CatPais AS F ON A.catpais_pid = F.persistenceid LEFT JOIN CatParentesco AS G ON A.catparentezco_pid = G.persistenceid LEFT JOIN CatTitulo AS H ON A.cattitulo_pid = H.persistenceid LEFT JOIN CatPadreTrabaja AS I ON A.cattrabaja_pid = I.persistenceid LEFT JOIN CatVive AS J ON A.vive_pid = J.persistenceid WHERE A.desconozcodatospadres IS NOT NULL AND A.caseid = ? AND A.vencido = true AND G.descripcion = 'Madre';";
	public static final String GET_CONTACTO_EMERGENCIA_VENCIDO="SELECT A.persistenceId, A.persistenceVersion, A.nombre, A.parentesco,A.telefono,A.telefonocelular, B.descripcion AS casoemergencia,C.descripcion AS otroparentesco  FROM Contactoemergencias AS A LEFT JOIN CatCasoDeEmergencia AS B ON A.catcasodeemergencia_pid = B.persistenceid LEFT JOIN CATPARENTESCO AS C ON A.catparentesco_pid = C.persistenceid WHERE A.caseid = ? AND A.vencido = true; ";
	public static final String GET_HERMANOS_VENCIDOS = "SELECT caseid,nombres,apellidos,fechanacimiento,isestudia,escuelaestudia,istrabaja,empresatrabaja FROM HERMANO WHERE CASEID = ? AND vencido = true"
	public static final String GET_INFORMACION_ESCOLAR_VENCIDO = "SELECT ehe.caseid,ehe.anofin, ehe.anoinicio,ehe.promedio,ehe.ciudad,ehe.estadostring AS estadoextranjero,ehe.otraescuela, grado.descripcion AS grado, escuela.descripcion as escuela, estados.descripcion as estado FROM ESCUELASHASESTADO AS ehe LEFT JOIN CATGRADOACADEMICO AS grado ON ehe.grado_pid = grado.persistenceid LEFT JOIN CATBACHILLERATOS AS escuela ON ehe.escuela_pid = escuela.persistenceid LEFT JOIN CATESTADOS AS estados ON ehe.estado_pid = estados.persistenceid LEFT JOIN CATPAIS as pais ON ehe.pais_pid = pais.persistenceid WHERE ehe.caseid = ? AND ehe.vencido = true"
	public static final String GET_UNIVERSIDADES_VENCIDO = "SELECT caseid,nombre,carrera,anoinicio,anofin,motivosuspension FROM UNIVERSIDADES WHERE CASEID = ? AND vencido = true"
	public static final String GET_IDIOMA_VENCIDO = "SELECT ih.caseid, ih.otroidioma,idioma.descripcion AS idiomahablas,conversacion.descripcion AS nivelconversacion, escritura.descripcion AS nivelescritura, traduccion.descripcion AS niveltraduccion,lectura.descripcion AS nivellectura FROM IDIOMASHABLAS AS ih LEFT JOIN CATIDIOMA AS idioma ON ih.catidioma_pid = idioma.persistenceid LEFT JOIN CATCONVERSACION AS conversacion ON ih.catconversacion_pid = conversacion.persistenceid LEFT JOIN CATESCRITURA AS escritura ON ih.catescritura_pid = escritura.persistenceid LEFT JOIN CATTRADUCCION AS traduccion ON ih.cattraduccion_pid = traduccion.persistenceid LEFT JOIN CATLECTURA AS lectura ON ih.catlectura_pid = lectura.persistenceid WHERE ih.CASEID = ? AND ih.vencido = true"
	public static final String GET_TERAPIA_VENCIDO = "SELECT  terapia.caseid,terapia.tipoterapia,terapia.cuantotiempo,terapia.recibidoterapiastring,terapia.otraterapia,cattipoterapia.descripcion AS tipodeterapia,recibidoterapia.descripcion AS hasrecibidoterapia FROM TERAPIA AS terapia LEFT JOIN CATTIPOTERAPIA AS cattipoterapia ON terapia.cattipoterapia_pid = cattipoterapia.persistenceid LEFT JOIN CATTERAPIA AS recibidoterapia ON  terapia.cattipoterapia_pid = recibidoterapia.persistenceid WHERE terapia.CASEID = ? AND terapia.vencido = true"
	public static final String GET_GRUPOSOCIAL_VENCIDO = "SELECT gs.caseid, gs.nombre,aficiliacion.descripcion AS afiliacion, tiempo.descripcion AS tiempo, club.descripcion AS pertenecesaunclub, gruposocial.descripcion AS gruposocial FROM GRUPOSOCIAL AS gs LEFT JOIN CATAFILIACION AS aficiliacion ON gs.catafiliacion_pid = aficiliacion.persistenceid LEFT JOIN CATCUANTOTIEMPO AS tiempo ON gs.catcuantotiempo_pid = tiempo.persistenceid LEFT JOIN CATPERTENECESAUNCLUB AS club ON gs.catpertenecesorganizacion_pid = club.persistenceid LEFT JOIN CATGRUPOSOCIAL as gruposocial ON gs.cattipoorganizacion_pid = gruposocial.persistenceid WHERE gs.caseid = ? AND gs.vencido = true"
	public static final String GET_PARIENTE_EGRESADO_VENCIDO = "SELECT pea.caseid,pea.nombre, pea.apellidos,pea.carrera,pea.correo,catcampus.descripcion AS campus, catparentesco.descripcion AS parentesco, catdiploma.descripcion AS diploma FROM PARIENTEEGRESADOANAHUAC AS pea LEFT JOIN CATCAMPUS AS catcampus ON pea.catcampus_pid = catcampus.persistenceid LEFT JOIN CATPARENTESCO AS catparentesco ON pea.catparentesco_pid = catparentesco.persistenceid LEFT JOIN CATDIPLOMA AS catdiploma ON pea.catdiploma_pid = catdiploma.persistenceid WHERE pea.CASEID = ? AND pea.vencido = true"
	public static final String GET_INFO_CONSULTA_RESULTADOS_COUNT_MANUAL = "SELECT COUNT(DISTINCT detsol.idbanner) AS registros FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) AND DETSOL.vencido IS NOT true  LEFT JOIN  catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN  CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN  CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN  CatResidencia AS R ON R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID LEFT JOIN  CatTipoAdmision AS TA ON TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno AS TAL ON TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID LEFT JOIN sesionaspirante saw ON saw.username= SOLAD.correoelectronico LEFT JOIN  pruebas p ON p.sesion_pid=saw.sesiones_pid AND p.iseliminado=false LEFT JOIN cattipoprueba tipo ON tipo.persistenceid=p.cattipoprueba_pid LEFT JOIN responsabledisponible rd ON rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE]";
	public static final String GET_INFO_CONSULTA_RESULTADOS_MANUAL = "SELECT SOLAD.urlfoto, CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, TO_CHAR( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad          AS ciudadvives, paisvives.descripcion AS paisvives, STRING_AGG( tipo.descripcion || ' '|| TO_CHAR( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, R.descripcion AS residensia, SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER, SOLAD.curp, SOLAD.PERSISTENCEID          id, campusEstudio.descripcion AS campus, campus.descripcion        AS campussede, CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END                 AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END                     AS preparatoria, gestionescolar.NOMBRE   AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL, TAL.descripcion         AS tipoDeAlumno, campus.grupoBonita, TA.descripcion   AS tipoadmision, SOLAD.CASEID     AS caseid FROM       SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) AND DETSOL.vencido IS NOT true  LEFT JOIN  catcampus campusEstudio ON         campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN  CATGESTIONESCOLAR gestionescolar ON         gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN  CATPERIODO periodo ON         periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID LEFT JOIN  CATESTADOs estado ON         estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN  catbachilleratos prepa ON         prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN  CatResidencia AS R ON         R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID LEFT JOIN  CatTipoAdmision AS TA ON         TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN  CatTipoAlumno AS TAL ON         TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN  catcampus campus ON         campus.persistenceid=SOLAD.CATCAMPUS_PID LEFT JOIN  sesionaspirante saw ON         saw.username= SOLAD.correoelectronico LEFT JOIN  pruebas p ON         p.sesion_pid=saw.sesiones_pid AND        p.iseliminado=false LEFT JOIN  cattipoprueba tipo ON         tipo.persistenceid=p.cattipoprueba_pid LEFT JOIN  responsabledisponible rd ON         rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN  catpais paisvives ON         paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY   paisvives.descripcion, r.descripcion, solad.promediogeneral, detsol.idbanner, solad.curp, solad.persistenceid, campusestudio.descripcion, campus.descripcion, estado.descripcion, periodo.descripcion, prepa.descripcion, gestionescolar.nombre, tal.descripcion, campus.grupobonita, ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	/***********************MARIO ICEDO FIN*******************************/
	public static final String UPDATE_IDIOMA_REGISTRO_BY_USERNAME = "INSERT INTO idioma (persistenceId , persistenceVersion   , idioma, usuario ) values (case when (SELECT max(persistenceId)+1 from idioma ) is null then 1 else (SELECT max(persistenceId)+1 from idioma) end,0,?, ?);";
	public static final String UPDATE_TABLE_CATREGISTRO = "CREATE TABLE idioma (persistenceId bigserial, persistenceVersion bigint DEFAULT 0, idioma CHARACTER VARYING(255), usuario CHARACTER VARYING(255), PRIMARY KEY (persistenceId) )";
	public static final String SELECT_IDIOMA_BY_USERNAME = "SELECT idioma FROM idioma WHERE usuario = ?;"
	public static final String SELECT_SITUACION_SALUD = "SELECT auto.problemassaludatencioncontinua AS situacion_discapacidad, auto.hasRecibidoAlgunaTerapia AS tipo_terapia, cd.descripcion AS cat_situacion_discapacidad_descripcion, cps.descripcion AS cat_persona_saludable_descripcion, ct.descripcion AS cat_terapia_descripcion FROM autodescripcionV2 AS auto INNER JOIN CatDiscapacidad AS cd ON auto.catvivesestadodiscapacidad_pid = cd.persistenceid INNER JOIN CatPersonaSaludable cps ON auto.catpersonasaludable_pid = cps.persistenceid INNER JOIN CatTerapia AS ct ON auto.catrecibidoterapia_pid = ct.persistenceid WHERE auto.caseid = ?";
	public static final String SELECT_RECOMENDACIONES_CONCLUSIONES = "SELECT tp.resumenSalud AS salud, tp.conclusioneinvp AS conclusiones_recomendaciones, tp.interpretacioninvp AS interpretacion, cc.descripcion AS cursos_recomendados FROM testpsicometrico AS tp INNER JOIN testpsicometri_custosrecomend AS tc ON tp.persistenceid = tc.testpsicometrico_pid INNER JOIN catcursos AS cc ON tc.catcursos_pid = cc.persistenceid WHERE tp.caseid = ? and tp.countRechazo = ?"
	public static final String GET_ESTADOS_PREPARATORIA = "SELECT DISTINCT cb.estado as estado FROM CatBachilleratos cb WHERE isEliminado = false AND pais = 'México' AND cb.estado IS NOT NULL AND cb.estado != '' ORDER BY estado ASC";
	public static final String GET_ESTADO_BY_CLAVE = "SELECT clave, descripcion FROM CatEstados WHERE clave = ?";
	public static final String GET_CIUDAD_BY_CODIGO_POSTAL = "SELECT ciudad FROM CatCodigoPostal WHERE codigopostal = ? LIMIT 1";
	public static final String GET_INFO_BY_CODIGO_POSTAL_AND_CLAVE_ESTADO = "SELECT C.ciudad, E.clave, E.descripcion FROM CatCodigoPostal  C JOIN CatEstados E ON E.descripcion = C.estado WHERE C.codigopostal = ? AND E.clave = ? LIMIT 1";
	public static final String GET_INFORMACION_REPORTE_SOLICITUD_RESPALDO = "SELECT cCampus.descripcion AS campusCursar1, cPeriodo.descripcion AS periodo, cPOtroCampus.descripcion AS presentasteEnOtroCampus, cGestionEscolar.nombre AS licenciatura, cGestionEscolar.isMedicina, cLugarExamen.descripcion AS lugarExamen, saRespaldo.caseid, saRespaldo.estadoExtranjero, saRespaldo.primernombre, saRespaldo.segundonombre, saRespaldo.apellidopaterno, saRespaldo.apellidomaterno, saRespaldo.correoelectronico, saRespaldo.fechanacimiento, cSexo.descripcion AS sexo, cNacionalidad.descripcion AS nacionalidad, cReligion.descripcion AS religion, saRespaldo.curp, cEstadoCivil.descripcion AS estadoCivil, saRespaldo.telefonocelular, cPais.descripcion AS pais, saRespaldo.codigopostal, saRespaldo.foto, saRespaldo.urlFoto, cEstados.descripcion AS estado, saRespaldo.ciudad, saRespaldo.delegacionmunicipio, saRespaldo.colonia, saRespaldo.calle, saRespaldo.calle2, saRespaldo.numexterior, saRespaldo.numinterior, saRespaldo.telefono, saRespaldo.otrotelefonocontacto, saRespaldo.bachillerato AS nombreBachillerato, saRespaldo.paisbachillerato, saRespaldo.estadobachillerato, saRespaldo.ciudadbachillerato, saRespaldo.promediogeneral, saRespaldo.resultadopaa, cBachilleratos.descripcion AS bachilleratoExt, cBachilleratos.ciudad AS ciudadBachilleratoExt, cBachilleratos.estado AS estadoBachilleratoExt, cBachilleratos.pais AS paisBachilleratoExt, cBachilleratos.descripcion AS descripcionBachilleratoExt, cVive.descripcion AS vive, ptRespaldo.caseid AS caseidPadresTutor, ptRespaldo.istutor, ptRespaldo.desconozcodatospadres, cPadreTrabaja.descripcion AS TrabajaPadresTutor, cTitulo.descripcion AS tituloPadresTutor, ptRespaldo.nombre AS nombrePadresTutor, ptRespaldo.apellidos AS apellidoPadresTutor, cParentezco.descripcion AS parentezcoPadresTutor, cParentezcoEmergencia.descripcion AS parentescoEmergencia, ptRespaldo.correoelectronico AS correoPadresTutor, cEscolaridad.descripcion AS escolaridadPadresTutor, ptRespaldo.puesto AS ocupacionPadresTutor, ptRespaldo.empresatrabaja, cEgresadoUniv.descripcion AS egresoUniversidadAnahuacPadresTutor, cEgresadoUniv.clave, cPaisTutor.descripcion AS paisPadresTutor, ptRespaldo.codigopostal AS codigoPostalPadresTutor, cEstadoTutor.descripcion AS estadoPadresTutor, ptRespaldo.ciudad AS ciudadPadresTutor, ptRespaldo.delegacionmunicipio AS delegacionPadresTutor, ptRespaldo.colonia AS coloniaPadresTutor, ptRespaldo.calle AS callePadresTutor, ptRespaldo.numeroexterior AS numExteriorPadresTutor, ptRespaldo.numerointerior AS numInteriorPadresTutor, ptRespaldo.telefono AS telefonoPadresTutor, cEmergenciaRespaldo.nombre AS nombreEmergencia, cEmergenciaRespaldo.telefono AS telefonoEmergencia, cEmergenciaRespaldo.telefonocelular AS telefonocelularEmergencia FROM   solicituddeadmisionrespaldo saRespaldo inner join catGestionEscolar cGestionEscolar ON saRespaldo.catgestionescolar_pid = cGestionEscolar.persistenceid inner join catsexo cSexo ON saRespaldo.catsexo_pid = cSexo.persistenceid inner join catnacionalidad cNacionalidad ON saRespaldo.catnacionalidad_pid = cNacionalidad.persistenceid inner join catreligion cReligion ON saRespaldo.catreligion_pid = cReligion.persistenceid inner join catestadocivil cEstadoCivil ON saRespaldo.catestadocivil_pid = cEstadoCivil.persistenceid inner join catpais cPais ON saRespaldo.catpais_pid = cPais.persistenceid inner join catestados cEstados ON saRespaldo.catestado_pid = cEstados.persistenceid inner join catbachilleratos cBachilleratos ON saRespaldo.catbachilleratos_pid = cBachilleratos.persistenceid inner join catperiodo cPeriodo ON saRespaldo.catperiodo_pid = cPeriodo.persistenceid inner join catpresentasteenotrocampus cPOtroCampus ON saRespaldo.catpresentasteenotrocampus_pid = cPOtroCampus.persistenceid inner join catlugarexamen cLugarExamen ON saRespaldo.catlugarexamen_pid = cLugarExamen.persistenceid inner join catcampus cCampus ON saRespaldo.catcampus_pid = cCampus.persistenceid left join padrestutorrespaldo ptRespaldo ON CASE WHEN saRespaldo.countrechazos IS NULL THEN 0 ELSE saRespaldo.countrechazos END = ptRespaldo.countintento AND saRespaldo.caseid :: INTEGER = ptRespaldo.caseid :: INTEGER left join cattitulo cTitulo ON ptRespaldo.cattitulo_pid = cTitulo.persistenceid left join catparentesco cParentezco ON ptRespaldo.catparentezco_pid = cParentezco.persistenceid left join catescolaridad cEscolaridad ON ptRespaldo.catescolaridad_pid = cEscolaridad.persistenceid left join catpadretrabaja cPadreTrabaja ON ptRespaldo.cattrabaja_pid = cPadreTrabaja.persistenceid left join categresadouniversidadanahuac cEgresadoUniv ON ptRespaldo.categresoanahuac_pid = cEgresadoUniv.persistenceid left join catpais cPaisTutor ON ptRespaldo.catpais_pid = cPaisTutor.persistenceid left join catestados cEstadoTutor ON ptRespaldo.catestado_pid = cEstadoTutor.persistenceid left join catvive cVive ON ptRespaldo.vive_pid = cVive.persistenceid left join contactoemergenciasrespaldo cEmergenciaRespaldo ON cEmergenciaRespaldo.catparentesco_pid = cParentezco.persistenceid left join catparentesco cParentezcoEmergencia ON cParentezcoEmergencia.persistenceid  = cEmergenciaRespaldo.catparentesco_pid WHERE saRespaldo.caseid = ?";

	public static final UPDATE_SECCION_INFORMACION_PERSONAL = "UPDATE [TABLA] SET primerNombre = ?, segundoNombre = ?, apellidoPaterno = ?, apellidoMaterno = ?, correoElectronico = ?, fechaNacimiento = ?, catsexo_pid = ?, catnacionalidad_pid = ?, catreligion_pid = ?, curp = ?, catestadocivil_pid = ?. telefonoCelular = ? WHERE caseid = ? AND correoelectronico = ?";
	public static final UPDATE_SECCION_DOMICILIO_PERMANENTE = "UPDATE [TABLA] SET catpais_pid = ?, codigopostal = ?, [ESTADO] , ciudad = ?, delegacionmunicipio = ?, colonia = ?, calle = ?, calle2 = ?, numexterior = ?, numinterior = ?, telefono = ?, otrotelefonocontacto = ? WHERE caseid = ? AND correoElectronico = ?";
	public static final UPDATE_SECCION_INFORMACION_BACHILLERATO = "UPDATE [TABLA] SET catbachilleratos_pid = ?, bachillerato = ?, paisbachillerato = ?, estadobachillerato = ?, ciudadbachillerato = ?, promediogeneral = ? WHERE caseid = ? AND correoElectronico = ?";
	public static final UPDATE_SECCION_INFORMACION_TUTOR = "UPDATE [TABLA] SET cattitulo_pid = ?, nombre = ?, apellidos = ?, catparentezco_pid = ?, otroparentesco = ?, correoelectronico = ?, catescolaridad_pid = ?, categresoanahuac_pid = ?, catcampusegreso_pid = ?, cattrabaja_pid = ?, empresatrabaja = ?, giroempresa = ?, puesto = ? [WHERE];";
	public static final UPDATE_SECCION_DOMICILIO_TUTOR = "UPDATE [TABLA] SET catpais_pid = ?, codigopostal = ?, [ESTADO], ciudad = ?, delegacionmunicipio = ?, colonia = ?, calle = ?, numeroexterior = ?, numerointerior = ?, telefono = ? [WHERE]";
	public static final UPDATE_SECCION_INFORMACION_PADRE = "UPDATE [TABLA] SET cattitulo_pid = ?, nombre = ?, apellidos = ?, correoelectronico = ?, catescolaridad_pid = ?, categresoanahuac_pid = ?, catcampusegreso_pid = ?, cattrabaja_pid = ?, giroempresa = ?, puesto = ? [WHERE]";
	public static final UPDATE_SECCION_DOMICILIO_PADRE = "UPDATE [TABLA] SET catpais_pid = ?, codigopostal = ?, [ESTADO], ciudad = ?, delegacionmunicipio = ?, colonia = ?, calle = ?, numeroexterior = ?, numerointerior = ?, telefono = ?, vivecontigo = ? [WHERE]";
	public static final UPDATE_SECCION_INFORMACION_MADRE = "UPDATE [TABLA] SET cattitulo_pid = ?, nombre = ?, apellidos = ?, correoelectronico = ?, catescolaridad_pid = ?, categresoanahuac_pid = ?, catcampusegreso_pid = ?, cattrabaja_pid = ?, giroempresa = ?, puesto = ? [WHERE]";
	public static final UPDATE_SECCION_DOMICILIO_MADRE = "UPDATE [TABLA] SET catpais_pid = ?, codigopostal = ?, [ESTADO], ciudad = ?, delegacionmunicipio = ?, colonia = ?, calle = ?, numeroexterior = ?, numerointerior = ?, telefono = ?, vivecontigo = ? [WHERE]";
	public static final UPDATE_SECCION_CONTACTO_EMERGENCIA = "UPDATE [TABLA] SET nombre = ?, parentesco = ?, telefono = ? WHERE caseid = ? AND catparentesco_pid = ?";
}

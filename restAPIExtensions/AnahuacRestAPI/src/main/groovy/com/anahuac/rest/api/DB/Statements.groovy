package com.anahuac.rest.api.DB

class Statements {
	public static final String DELETE_CATGESTIONESCOLAR="UPDATE CATGESTIONESCOLAR SET ISELIMINADO=true WHERE persistenceid=?";
	
	public static final String INSERT_CATLICENCIATURA="INSERT INTO CATLICENCIATURA (CLAVE,DESCRIPCION,FECHACREACION,ISELIMINADO,PERSISTENCEVERSION,USUARIOCREACION,PERSISTENCEID) VALUES (?,?,?,?,?,?,?);"
	
	public static final String GET_DETALLESOLICITUD="select IdBanner,ObservacionesRechazo,ObservacionesListaRoja,ObservacionesCambio,ordenpago  from detallesolicitud where caseid=(select concat(caseid,'') from SOLICITUDDEADMISION where correoelectronico=?  ORDER BY persistenceid desc limit 1)"
	
	public static final String GET_CAT_NOTIFICACIONES_CAMPUS_PROCESO_CODIGO="SELECT * from catnotificaciones where caseid=(SELECT max(caseid) FROM procesocaso where campus = ? and proceso='CatNotificaciones') and codigo=?"
	
	public static final String GET_FIRMA_PERSISTENCEID="SELECT * FROM CATNOTIFICACIONESFIRMA where persistenceId=?"
	
	public static final String GET_TASK_USERID_NAME="WITH filter (userid,taskname ) AS (VALUES (?,? ) ) SELECT DISTINCT pi.tenantid, pi.id, pi.name, pi.startedby, fi.name AS taskname FROM process_instance pi INNER JOIN public.flownode_instance fi ON pi.id = fi.rootcontainerid AND fi.name=(SELECT taskname FROM filter) AND (fi.assigneeid=0 OR fi.assigneeid=(SELECT userid FROM filter)) AND fi.statename = 'ready'LEFT JOIN public.actor actor ON actor.id=fi.actorid LEFT JOIN public.actormember amember ON amember.actorid=actor.id LEFT JOIN public.role rol ON rol.id=amember.roleid LEFT JOIN public.group_ grupo ON grupo.id=amember.groupid LEFT JOIN public.user_ usuario ON usuario.id=amember.userid INNER JOIN public.user_membership um ON (um.roleid=rol.id OR  grupo.id=um.groupid) AND (amember.groupid>0 OR  amember.roleid>0) AND um.userid= (SELECT userid FROM filter)"
	
	public static final String INSERT_CAT_NOTIFICACIONES_FIRMA="INSERT INTO CATNOTIFICACIONESFIRMA (PERSISTENCEID, CARGO, CORREO, GRUPO, NOMBRECOMPLETO, PERSISTENCEVERSION, SHOWCARGO, SHOWCORREO, SHOWGRUPO, SHOWTELEFONO, SHOWTITULO, TELEFONO, TITULO, CAMPUS, FACEBOOK, TWITTER, APELLIDO, BANNER, isEliminar) VALUES ((SELECT count(persistenceid)+1 from CATNOTIFICACIONESFIRMA ), ?, ?, ?, ?, 0, ?, ?, ?, ?, ?, ?, ?, ? ,?,?,?,?,false) RETURNING persistenceid;";
	
	public static final String UPDATE_CAT_NOTIFICACIONES_FIRMA="UPDATE CATNOTIFICACIONESFIRMA SET  CARGO = ?, CORREO = ?, GRUPO = ?, NOMBRECOMPLETO = ?,  SHOWCARGO = ?, SHOWCORREO = ?, SHOWGRUPO = ?, SHOWTELEFONO = ?, SHOWTITULO = ?, TELEFONO = ?, TITULO = ?, CAMPUS = ?, FACEBOOK = ?, TWITTER = ?, APELLIDO = ?, BANNER = ? WHERE PERSISTENCEID = ?;"
	
	public static final String DELETE_CAT_NOTIFICACIONES_FIRMA="UPDATE CATNOTIFICACIONESFIRMA SET  ISELIMINAR = true WHERE PERSISTENCEID = ?;"
	
	public static final String GET_CAT_NOTIFICACION_FIRMA="SELECT PERSISTENCEID, CARGO, CORREO, GRUPO, NOMBRECOMPLETO, PERSISTENCEVERSION, SHOWCARGO, SHOWCORREO, SHOWGRUPO, SHOWTELEFONO, SHOWTITULO, TELEFONO, TITULO, CAMPUS, FACEBOOK, TWITTER, APELLIDO, BANNER FROM CATNOTIFICACIONESFIRMA [WHERE] [ORDERBY] [LIMITOFFSET];"
	
	public static final String GET_CAMPUS_ID_FROM_CLAVE="SELECT persistenceid as campus_id FROM CATCAMPUS where grupoBonita=? limit 1 "
	
	public static final String GET_VALIDACION_PAIS=  "SELECT COUNT(PERSISTENCEID) as total FROM [TABLA] WHERE clave=? AND isEliminado=false";
		
	public static final String GET_IDBANNER_BY_IDBANNER="SELECT idbanner FROM DETALLESOLICITUD where idbanner=?;"
	
//	public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	
	public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	
//	public static final String GET_ASPIRANTES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia, campusEstudio.clave as claveCampus, gestionescolar.clave as claveLicenciatura FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	
	public static final String GET_ASPIRANTES_MIGRADOS="SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, TAL.descripcion as tipoDeAlumno, catcampus.descripcion as transferencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	
	public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS="SELECT CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, catcampus.descripcion as transferencia, STRING_AGG( tipo.descripcion || '  ' || to_char( p.aplicacion , 'DD/MM/YYYY') || '   ' || case when tipo.persistenceid=1 then rd.horario  else p.entrada ||' - '||p.salida end, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes,STRING_AGG((select concat(count( CASE WHEN paseL.asistencia THEN 1 END),'-', tipo.descripcion) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, prepa.estado [TIPOALUMNO]  [ORDERBY] [LIMITOFFSET]"
	
	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS="SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion as tipoadmision , R.descripcion as residensia, catcampus.descripcion as transferencia, STRING_AGG( tipo.descripcion || '  ' || to_char( p.aplicacion , 'DD/MM/YYYY') || '   ' || case when tipo.persistenceid=1 then rd.horario  else p.entrada ||' - '||p.salida end, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre [TIPOALUMNO]  [ORDERBY] [LIMITOFFSET]"
	
	public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS2="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID   [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID  [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER left join sesionaspirante saw  on  saw.username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid [WHERE]"	
	
	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES=" SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]"
	
	public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES = "SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion,STRING_AGG((select concat(count(CASE WHEN paseL.asistencia THEN 1 END),'-', tipo.descripcion) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio ,prepa.estado[TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]";
	
	//public static final String GET_ASPIRANTES_EN_PROCESO_FECHAS_SESIONES = "SELECT * FROM (SELECT TO_CHAR(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días \" HH24 \"horas \" MI \"minutos \"') AS tiempoultimamodificacion, sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro'THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion AS tipoadmision , R.descripcion AS residensia, catcampus.descripcion AS transferencia, STRING_AGG( tipo.descripcion || ' ' || TO_CHAR( p.aplicacion , 'DD/MM/YYYY') || ' ' || CASE WHEN tipo.persistenceid=1 THEN rd.horario ELSE p.entrada ||' - '||p.salida END, ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, STRING_AGG((SELECT  srd.responsableid FROM responsabledisponible srd  WHERE srd.prueba_pid = p.persistenceid  AND saw.responsabledisponible_pid = srd.persistenceid OR (srd.prueba_pid = p.persistenceid AND p.cattipoprueba_pid != 1) LIMIT 1 ) ||'' ,',' ORDER BY p.cattipoprueba_pid asc) as responsables, s.nombre AS nombre_sesion, (CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F'OR clave ='E')) ELSE CASE WHEN s.tipo LIKE '%R%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (SELECT String_AGG(R.descripcion, ',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'F')) ELSE (SELECT String_AGG(R.descripcion,',') FROM catresidencia AS R WHERE isEliminado = false AND (clave = 'R'OR clave ='E')) END END END END END END ) AS tipo_sesion, s.fecha_inicio AS fecha_sesion,STRING_AGG((select concat(count(CASE WHEN paseL.asistencia THEN 1 END),'-', tipo.descripcion) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.username =  saw.username AND P.cattipoprueba_pid = P2.cattipoprueba_pid )||'',',' ORDER BY p.cattipoprueba_pid asc) as asistencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS]  LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = da.CATTIPOADMISION_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = da.CATRESIDENCIA_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = da.CATTIPOALUMNO_PID LEFT JOIN SolicitudDeAdmision as SA on SA.PERSISTENCEID = sda.CATCAMPUS_PID LEFT JOIN CatCampus catcampus ON catcampus .persistenceid=sda.CATCAMPUS_PID left join sesionaspirante saw  on  saw. username= sda.correoelectronico LEFT JOIN sesiones s on s.persistenceid= saw.sesiones_pid left join pruebas p on p.sesion_pid=saw.sesiones_pid left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY tiempoultimamodificacion,sda.fechasolicitudenviada, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion , campus.descripcion , gestionescolar.NOMBRE , periodo.DESCRIPCION , estado.DESCRIPCION , sda.bachillerato, prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, TA.descripcion  , R.descripcion, catcampus.descripcion, sda.persistenceid, da.observacionesRechazo, da.idbanner,sda.telefonocelular,da.TIPOALUMNO,sda.ESTATUSSOLICITUD,sda.PROMEDIOGENERAL,estado.DESCRIPCION,periodo.DESCRIPCION,gestionescolar.DESCRIPCION,prepa.DESCRIPCION,campus.DESCRIPCION,sda.curp,sda.correoelectronico ,sda.primernombre, s.nombre, s.tipo, s.fecha_inicio [TIPOALUMNO]  [ORDERBY] ) AS datos [RESIDENCIA] [LIMITOFFSET]";
	
	public static final String GET_ASPIRANTE_TRANSFERENCIA="SELECT campusanterior, campusnuevo FROM catbitacoratransferencias where correoaspirante=? order by persistenceid desc  limit 1"
	
	public static final String GET_ASPIRANTE_ASISTENCIA="WITH FILTER (username) as (values(?)) SELECT paselista.persistenceid, paselista.asistencia, pruebas.cattipoprueba_pid, ctp.descripcion FROM paselista paselista INNER JOIN pruebas pruebas ON pruebas.persistenceid=paselista.prueba_pid INNER JOIN cattipoprueba ctp ON ctp.persistenceid=pruebas.cattipoprueba_pid WHERE username=(SELECT username from filter) and paselista.asistencia=true"
	
	public static final String GET_INFOCARTATEMPORAL_PLANTILLA="WITH FILTER (correo) as (values(?))select * from infocartatemporal where curp=(SELECT curp from SOLICITUDDEADMISION where correoelectronico=(SELECT correo from filter) limit 1) OR  numerodematricula=(SELECT idbanner from detallesolicitud d left join SOLICITUDDEADMISION s on s.caseid=d.caseid::bigint where s.correoelectronico=(SELECT correo from filter) limit 1)"
	
	public static final String GET_DOCUMENTOSTEXTOS_BY_CAMPUSPID="SELECT * FROM catdocumentostextos where campus_pid=(SELECT persistenceid FROM catcampus where grupobonita=? and iseliminado=false limit 1)"
	
//	public static final String GET_SOLICITUDES_EN_PROCESO=    "SELECT sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, estado.DESCRIPCION AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_SOLICITUDES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_SOLICITUDES_EN_PROCESO = "SELECT to_char(CURRENT_TIMESTAMP - TO_TIMESTAMP(sda.fechaultimamodificacion, 'YYYY-MM-DDTHH:MI'), 'DD \"días\" HH24 \"horas\" MI \"minutos\"') AS tiempoultimamodificacion, sda.fechaultimamodificacion, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campus, campus.descripcion AS campussede, gestionescolar.NOMBRE AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN CatPais AS catPais ON catPais.persistenceid=sda.CATPAIS_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]"; 
	/*************DANIEL CERVANTES***********************/
	//public static final String GET_CATCAMPUS="SELECT * FROM CATCAMPUS [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATCAMPUS="SELECT  c.*, p.descripcion as pais, e.clave as cEstado, e.descripcion as dEstado FROM CATCAMPUS c left join CATPAIS p ON c.PAIS_PID  = p.PERSISTENCEID  left join CATESTADOS e ON  e.PERSISTENCEID  = c.ESTADO_PID  [WHERE] [ORDERBY] [LIMITOFFSET]"
	//public static final String GET_CATCAMPUS="SELECT * FROM CATCAMPUS c left join CATPAIS p ON c.PAIS_PID  = p.PERSISTENCEID  left join CATESTADOS e ON  e.PERSISTENCEID  = c.ESTADO_PID  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPAIS="SELECT * FROM CATPAIS [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATESTADOS="SELECT * FROM CATESTADOS [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATBACHILLERATO="SELECT * FROM CATBACHILLERATOS  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATCIUDAD="SELECT c.*, b.descripcion as campus FROM CATCIUDAD c left join CATCAMPUS b on b.PERSISTENCEID = c.CAMPUS_PID  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATFILTRADOCATALOGOSAUTODESCRIPCION = "SELECT * FROM [CATALOGOAD] [WHERE] [ORDERBY] [LIMITOFFSET]"
	/*************DANIEL CERVANTES FIN*******************/
	/*************JUAN ESQUER***********************/
	public static final String GET_CATTITULO="SELECT * FROM CATTITULO  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATESTADOCIVIL ="SELECT * FROM CATESTADOCIVIL  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATTIPOPRUEBA = "SELECT * FROM CATTIPOPRUEBA [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPSICOLOGO = "SELECT * FROM CATPSICOLOGO  [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_USER_BONITA = "SELECT DISTINCT u.id, u.firstname, u.lastname FROM user_ u INNER JOIN user_membership um ON um.userid=u.id INNER JOIN role r ON r.id=um.roleid [ROLE] INNER JOIN group_ g ON g.id=um.groupid [GROUP] [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATGESTIONESCOLAR = "SELECT GE.*, campus.descripcion as nombreCampus FROM CATGESTIONESCOLAR as GE  LEFT JOIN catcampus campus ON campus.grupoBonita = GE.campus [CAMPUS]  [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String INSERT_SESION="INSERT INTO SESIONES ( persistenceid,persistenceversion,NOMBRE, DESCRIPCION, FECHA_INICIO, ISMEDICINA, PREPARATORIA_PID, ESTADO_PID, PAIS_PID, BORRADOR, CAMPUS_PID, TIPO,CIUDAD_PID,Ultimo_dia_inscripcion, isEliminado) VALUES ( case when (SELECT max(persistenceId)+1 from SESIONES ) is null then 1 else (SELECT max(persistenceId)+1 from SESIONES) end,0,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?);";
	public static final String UPDATE_SESION="UPDATE SESIONES set NOMBRE=?, DESCRIPCION=?, FECHA_INICIO=?, ISMEDICINA=?, PREPARATORIA_PID=?, ESTADO_PID=?, PAIS_PID=?, BORRADOR=?, CAMPUS_PID=?, TIPO=?, CIUDAD_PID=?, Ultimo_dia_inscripcion=?, isEliminado=? WHERE persistenceId=?"
	public static final String INSERT_PRUEBA="INSERT INTO PRUEBAS ( persistenceid,NOMBRE, APLICACION, ENTRADA, SALIDA, REGISTRADOS, ULTIMO_DIA_INSCRIPCION, CUPO, LUGAR, CAMPUS_PID, CALLE, NUMERO_INT, NUMERO_EXT, COLONIA, CODIGO_POSTAL, MUNICIPIO, PAIS_PID, ESTADO_PID, ISELIMINADO, SESION_PID, DURACION, DESCRIPCION, cattipoprueba_pid, online) VALUES ( case when (SELECT max(persistenceId)+1 from PRUEBAS ) is null then 1 else (SELECT max(persistenceId)+1 from PRUEBAS) end,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?);"
	public static final String UPDATE_PRUEBA="UPDATE PRUEBAS SET NOMBRE=?, APLICACION=?, ENTRADA=?, SALIDA=?, REGISTRADOS=?, ULTIMO_DIA_INSCRIPCION=?, CUPO=?, LUGAR=?, CAMPUS_PID=?, CALLE=?, NUMERO_INT=?, NUMERO_EXT=?, COLONIA=?, CODIGO_POSTAL=?, MUNICIPIO=?, PAIS_PID=?, ESTADO_PID=?, ISELIMINADO=?, SESION_PID=?, DURACION=?, DESCRIPCION=?, cattipoprueba_pid=?, online=? WHERE PERSISTENCEID=?"
	public static final String VALIDAR_FECHA_PRUEBA_REGISTRADOS="SELECT * FROM pruebas where registrados>0 and persistenceid=?"
	public static final String INSERT_RESPONSABLEDISPONIBLE="INSERT INTO RESPONSABLEDISPONIBLE ( persistenceid,persistenceversion,HORARIO, DISPONIBLE, RESPONSABLEID, PRUEBA_PID, licenciaturas) VALUES ( case when (SELECT max(persistenceId)+1 from RESPONSABLEDISPONIBLE ) is null then 1 else (SELECT max(persistenceId)+1 from RESPONSABLEDISPONIBLE) end,0,?, ?, ?, ?, ?);"
	public static final String UPDATE_RESPONSABLEDISPONIBLE="UPDATE RESPONSABLEDISPONIBLE SET HORARIO=?, DISPONIBLE=?, RESPONSABLEID=?, PRUEBA_PID=?, licenciaturas=?, iseliminado=? WHERE PERSISTENCEID=?";
	public static final String DELETEIFBEFORECREATED="UPDATE responsabledisponible  set iseliminado=true where prueba_pid=? and responsableid=?"
	public static final String UPDATE_SESION_FECHA="UPDATE SESIONES SET FECHA_INICIO=(SELECT MIN(aplicacion) FROM PRUEBAS p WHERE p.SESION_PID = ? and p.iseliminado=false) WHERE persistenceid=?"
	public static final String UPDATE_PRUEBA_FECHA="UPDATE pruebas pruebas set ultimo_dia_inscripcion=(SELECT max(ultimo_dia_inscripcion) FROM pruebas where sesion_pid=? and iseliminado=false) where sesion_pid=?"
	public static final String DELETE_IF_CAMBIO_DURACION="DELETE FROM RESPONSABLEDISPONIBLE WHERE PRUEBA_PID=?"
	public static final String DELETEHORARIOSRESPONSABLE="DELETE FROM RESPONSABLEDISPONIBLE WHERE persistenceId=?"
	public static final String GET_SESIONES_CALENDARIO="SELECT s.persistenceid AS id, CASE WHEN p.entrada IS NULL THEN concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' 00:00' ) ELSE concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.entrada ) END AS start_date, CASE WHEN p.entrada IS NULL THEN concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' 23:00' ) ELSE concat(TO_CHAR( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.salida) END AS end_date, CASE WHEN s.BORRADOR THEN concat(s.nombre, ' <i class=\"small material-icons\">do_not_disturb</i>' ) ELSE concat(s.nombre, ' <i class=\"small material-icons\">language</i>' ) END AS text, CASE WHEN TO_TIMESTAMP(s.ultimo_dia_inscripcion, 'YYYY-MM-DD HH24:MI:SS')<=now() THEN '#969696'ELSE CASE WHEN s.tipo LIKE '%R,F,E%'OR  s.tipo LIKE '%R,E,F%'OR  s.tipo LIKE '%F,R,E%'OR  s.tipo LIKE '%F,E,R%'OR  s.tipo LIKE '%E,F,R%'OR  s.tipo LIKE '%E,R,F%'THEN '#660066'ELSE CASE WHEN s.tipo LIKE '%R,F%'OR  s.tipo LIKE '%F,R%'THEN '#33cc33'ELSE CASE WHEN s.tipo LIKE '%E,F%'OR  s.tipo LIKE '%F,E%'THEN '#0099ff'ELSE CASE WHEN s.tipo LIKE '%R%'THEN '#cc3300'ELSE CASE WHEN s.tipo LIKE '%E%'THEN '#cc6600'ELSE CASE WHEN s.tipo LIKE '%F%'THEN '#ff3300'ELSE'#ff5900'END END END END END END END AS color FROM SESIONES s LEFT JOIN PRUEBAS p ON p.SESION_PID =s.persistenceid AND (SELECT fa.persistenceid FROM pruebas fa WHERE fa.sesion_pid= s.persistenceid LIMIT 1 )=p.persistenceid [WHERE]"
	public static final String GET_SESIONES_CALENDARIOASPIRANTE="SELECT s.persistenceid as id, case when p.entrada is null then  concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' 00:00' ) else concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.entrada ) end as start_date, case when p.entrada is null then  concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' 23:00' ) else concat(to_char( s.FECHA_INICIO, 'MM/DD/YYYY'),' ',p.salida) end as end_date, case when s.BORRADOR then concat(s.nombre, '' ) else concat(s.nombre, '' ) end as text, case when s.fecha_inicio<now() then '#969696'else '#ff5900' end as color FROM SESIONES s INNER JOIN PRUEBAS p on p.SESION_PID =s.persistenceid and p.iseliminado=false and (SELECT fa.persistenceid FROM pruebas fa WHERE fa.sesion_pid= s.persistenceid AND fa.iseliminado=false and fa.cattipoprueba_pid!=1 LIMIT 1 )=p.persistenceid and p.registrados<p.cupo and p.cattipoprueba_pid!=1 [WHERE]"
	public static final String GET_SESION_ID="SELECT s.* FROM SESIONES s WHERE persistenceId=? and s.iseliminado!=true"
	public static final String GET_PRUEBAS_SESION_PID="SELECT p.*, r.horario, r.RESPONSABLEID , r.DISPONIBLE, c.descripcion as tipo, r.persistenceId as rid, r.ocupado, r.licenciaturas  FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE  r on r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid where p.SESION_PID =? AND p.iseliminado=false ORDER BY r.horario"
	public static final String GET_REGISTRADOS_CUPO="SELECT p.registrados, p.cupo from pruebas p where p.sesion_pid=? and cattipoprueba_pid!=1"
	public static final String UPDATE_REGISTRADOS="UPDATE PRUEBAS SET REGISTRADOS=(SELECT registrados+1 FROM pruebas WHERE sesion_pid=? and cattipoprueba_pid!=1 LIMIT 1) where  sesion_pid=? and cattipoprueba_pid!=1"
	public static final String UPDATE_REGISTRADOS_INV="UPDATE PRUEBAS SET REGISTRADOS=(SELECT registrados-1 FROM pruebas WHERE sesion_pid=? and cattipoprueba_pid!=1 LIMIT 1) where  sesion_pid=? and cattipoprueba_pid!=1"
	public static final String INSERT_sesionaspirante="INSERT INTO sesionaspirante (persistenceid,persistenceversion,username,sesiones_pid,responsabledisponible_pid) VALUES ( case when (SELECT max(persistenceId)+1 from sesionaspirante ) is null then 1 else (SELECT max(persistenceId)+1 from sesionaspirante) end,0,?,?,?)"
	public static final String UPDATE_sesionaspirante="UPDATE sesionaspirante SET username=?,sesiones_pid=?,responsabledisponible_pid=? WHERE persistenceid=?"
	public static final String GET_SESIONASPIRANTE="SELECT * FROM sesionaspirante where username=?"
	public static final String GET_PRUEBAS_ASPIRANTE="SELECT p.persistenceid as prueba_pid FROM sesionaspirante sa inner join pruebas p on p.sesion_pid=sa.sesiones_pid and p.iseliminado=false  where username=?"
	public static final String GET_ASISTENCIA_PRUEBA_FALTA="SELECT asistencia, fecha, prueba_pid FROM paselista where username=? and prueba_pid=?"
	public static final String UPDATE_OCUPADO_RESPONSABLE_DISPONIBLE="update RESPONSABLEDISPONIBLE set OCUPADO=true where persistenceid=?"
	public static final String UPDATE_OCUPADO_RESPONSABLE_DISPONIBLE_INV="update RESPONSABLEDISPONIBLE set OCUPADO=false where persistenceid=?"
	public static final String GET_OCUPADO_RESPONSABLE_DISPONIBLE="SELECT persistenceId FROM RESPONSABLEDISPONIBLE where persistenceid=? and ocupado=true"
	public static final String GET_DATOS_SESION_USERNAME="select p.aplicacion, tipo.descripcion, p.lugar, case when tipo.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, s.nombre as snombre, s.descripcion as sdescripcion, p.nombre as pnombre, p.descripcion as pdescripcion, p.municipio, p.colonia, p.codigo_postal,p.numero_int,p.calle, p.online from sesionaspirante sa LEFT JOIN sesiones s on s.persistenceid= sa.sesiones_pid left join pruebas p on p.sesion_pid=sa.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=sa.responsabledisponible_pid  where sa.username=?"
	public static final String UPDATE_REGISTRADOS_PRUEBAS="UPDATE PRUEBAS set registrados=(SELECT registrados+1 FROM pruebas where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?) ) where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?)"
	public static final String UPDATE_REGISTRADOS_PRUEBAS_INV="UPDATE PRUEBAS set registrados=(SELECT registrados-1 FROM pruebas where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?) ) where persistenceid=(SELECT prueba_pid FROM RESPONSABLEDISPONIBLE WHERE persistenceid=?)"
	public static final String GET_PRUEBAS_SESION_PID_ASPIRANTE="SELECT p.*, r.horario, r.RESPONSABLEID , r.DISPONIBLE, c.descripcion as tipo, r.persistenceId as rid, r.ocupado, r.licenciaturas  FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE  r on r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid where p.SESION_PID =? AND p.iseliminado=false AND p.cattipoprueba_pid!=1 ORDER BY r.horario"
	public static final String GET_PRUEBAS_SESION_ENTREVISTA_ASPIRANTE="SELECT p.*, r.horario, r.RESPONSABLEID , r.DISPONIBLE, c.descripcion   AS tipo, r.persistenceId AS rid, r.ocupado, r.licenciaturas, disponibles.disponibles FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE r ON r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false LEFT JOIN cattipoprueba c ON c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN (SELECT p.persistenceid  AS prueba_pid, COUNT(r.ocupado) AS disponibles FROM PRUEBAS p LEFT JOIN RESPONSABLEDISPONIBLE r ON r.PRUEBA_PID =p.PERSISTENCEID AND r.iseliminado=false WHERE p.SESION_PID =? AND p.iseliminado=false AND p.cattipoprueba_pid=1 AND r.disponible=true AND ocupado=false AND  (r.licenciaturas ='' or r.licenciaturas is null or r.licenciaturas like '%' || (SELECT g.descripcion from solicituddeadmision sda LEFT JOIN CATGESTIONESCOLAR g ON g.persistenceid=sda.CATGESTIONESCOLAR_PID where sda.correoelectronico=? limit 1) ||'%') GROUP BY p.persistenceid ORDER BY p.registrados ASC) disponibles ON disponibles.prueba_pid=p.persistenceid WHERE p.SESION_PID =? AND  (r.licenciaturas ='' or r.licenciaturas is null or r.licenciaturas like '%' || (SELECT g.descripcion from solicituddeadmision sda LEFT JOIN CATGESTIONESCOLAR g ON g.persistenceid=sda.CATGESTIONESCOLAR_PID where sda.correoelectronico=? limit 1) ||'%') AND p.iseliminado=false AND p.cattipoprueba_pid=1 AND r.disponible=true AND ocupado=false ORDER BY p.registrados ASC, disponibles.disponibles DESC";
	public static final String GET_HORARIOS_PRUEBAS_ENTREVISTA_ASPIRANTE="WITH FILTER (prueba_pid,aspirante) as (values (?,?)) SELECT r.horario, max(r.RESPONSABLEID) AS RESPONSABLEID , r.DISPONIBLE, max(r.persistenceId) AS rid, r.ocupado, '' AS licenciaturas FROM RESPONSABLEDISPONIBLE r WHERE r.PRUEBA_PID = (SELECT prueba_pid from filter) AND r.iseliminado=false AND r.ocupado=false AND r.disponible=true AND (r.licenciaturas =''OR  r.licenciaturas IS NULL OR  r.licenciaturas LIKE '%' || (SELECT g.nombre FROM solicituddeadmision sda LEFT JOIN CATGESTIONESCOLAR g ON g.persistenceid=sda.CATGESTIONESCOLAR_PID WHERE sda.correoelectronico=(SELECT aspirante from filter) limit 1) ||'%') GROUP BY r.horario, r.DISPONIBLE, r.ocupado ORDER BY r.horario ASC"
	public static final String INSERT_CATBITACORACORREOS="INSERT INTO CATBITACORACORREOS  (persistenceid, persistenceversion,codigo,de,estatus,fechacreacion,mensaje,para,campus) values (case when (SELECT max(persistenceId)+1 from CATBITACORACORREOS ) is null then 1 else (SELECT max(persistenceId)+1 from CATBITACORACORREOS ) end,0,?,?,?,now(),?,?,?)"
	public static final String PALETTE_COLOR_1="SELECT  '#660066' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND  (clave='E' OR  clave='R' OR  clave='F')"
	public static final String PALETTE_COLOR_2="SELECT  '#33cc33' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND    (clave='R' OR  clave='F')"
	public static final String PALETTE_COLOR_3="SELECT  '#0099ff' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND    (clave='E' OR  clave='F')"
	public static final String PALETTE_COLOR_4="SELECT  '#ff5900' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND    (clave='E' OR  clave='R')"
	public static final String PALETTE_COLOR_5="SELECT  '#cc3300' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND     clave='R'"
	public static final String PALETTE_COLOR_6="SELECT  '#cc6600' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND     clave='E'";
	public static final String PALETTE_COLOR_7="SELECT  '#ff3300' AS color, STRING_AGG(descripcion,',') as descripcion FROM CATRESIDENCIA WHERE iseliminado=false AND     clave='F'"
	public static final String REVISAR_DISPONIBLE_RESPONSABLE="WITH FILTER (aplicacion, responsable, prueba, fi, ff ) AS (VALUES (?, ?, ?, ?, ? ) ) SELECT p.aplicacion, p.entrada, p.salida, rd.RESPONSABLEID FROM SESIONES s INNER JOIN PRUEBAS p ON p.sesion_pid=s.persistenceid INNER JOIN RESPONSABLEDISPONIBLE rd ON rd.PRUEBA_PID=p.persistenceid WHERE aplicacion= TO_DATE((SELECT aplicacion FROM filter),'YYYY-MM-DD') AND RESPONSABLEID= (SELECT responsable FROM filter) AND P.persistenceid!= (SELECT prueba FROM filter) AND ((TO_TIMESTAMP((SELECT fi FROM filter), 'YYYY-MM-DD HH24:MI') >= TO_TIMESTAMP(p.aplicacion||' '||p.entrada, 'YYYY-MM-DD HH24:MI') AND TO_TIMESTAMP((SELECT fi FROM filter), 'YYYY-MM-DD HH24:MI') <TO_TIMESTAMP(p.aplicacion||' '||p.salida, 'YYYY-MM-DD HH24:MI')) OR  (TO_TIMESTAMP((SELECT ff FROM filter), 'YYYY-MM-DD HH24:MI') > TO_TIMESTAMP(p.aplicacion||' '||p.entrada, 'YYYY-MM-DD HH24:MI') AND TO_TIMESTAMP((SELECT ff FROM filter), 'YYYY-MM-DD HH24:MI')<=TO_TIMESTAMP(p.aplicacion||' '||p.salida, 'YYYY-MM-DD HH24:MI'))) AND P.ISELIMINADO = FALSE AND rd.iseliminado=false limit 1"
	/*************JUAN ESQUER FIN*******************/
	/***********************JESUS OSUNA********************************/
	public static final String GET_CATESCOLARIDAD = "SELECT * FROM CATESCOLARIDAD [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATSEXO = "SELECT * FROM CATSEXO [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPARENTESCO = "SELECT * FROM CATPARENTESCO [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATDESCUENTOS = "SELECT c.*, b.descripcion as bachilleratos FROM CATDESCUENTOS c left join CATBACHILLERATOS b on b.PERSISTENCEID = c.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN CATCAMPUS a on a.grupobonita=c.campus [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATNACIONALIDAD = "SELECT * FROM CATNACIONALIDAD [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATGENERICO = "SELECT * FROM [CATALOGO] [WHERE] [ORDERBY] [LIMITOFFSET]"
	
	/*************************JOSECARLOSFELIXIBARRA********************/
	public static final String GET_CATPARENTESCTO = "SELECT * FROM CATPARENTESCO  [WHERE] [ORDERBY] [LIMITOFFSET]"
	
	public static final String GET_INFO_CONSULTA_RESULTADOS = " SELECT CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion, inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_INFO_CONSULTA_RESULTADOS = " SELECT SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion, inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion [ORDERBY] [LIMITOFFSET]";
	
	public static final String GET_INFO_CONSULTA_SIN_RESULTADOS = " SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN SOLAD.estadobachillerato ELSE prepa.estado END AS procedencia, SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, SOLAD.ESTATUSSOLICITUD, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion,  r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_INFO_CONSULTA_SIN_RESULTADOS = " SELECT SOLAD.apellidopaterno, SOLAD.apellidomaterno, SOLAD.primernombre, SOLAD.segundonombre, SOLAD.ESTATUSSOLICITUD, to_char( TO_TIMESTAMP(SOLAD.fechasolicitudenviada, 'YYYY-MM-DDTHH:MI'), 'DD/MM/YYYY') AS fechaSolicitudEnviadaFormato, SOLAD.telefonocelular, SOLAD.ciudad as ciudadvives,paisvives.descripcion as paisvives, STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] GROUP BY paisvives.descripcion,  r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion [ORDERBY] [LIMITOFFSET]";
	//v3 public static final String GET_INFO_CONSULTA_RESULTADOS = "SELECT STRING_AGG( tipo.descripcion || ' ' || to_char( p.aplicacion , 'DD/MM/YYYY'), ',' ORDER BY tipo.descripcion , p.aplicacion, horario ) fechasExamenes, INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid [WHERE] GROUP BY inftemp.persistenceid, r.descripcion,solad.promediogeneral,detsol.idbanner,solad.curp,solad.persistenceid,campusestudio.descripcion,estado.descripcion,periodo.descripcion,prepa.descripcion,gestionescolar.nombre,tal.descripcion,campus.grupobonita,ta.descripcion [ORDERBY] [LIMITOFFSET]";
	//v2 public static final String GET_INFO_CONSULTA_RESULTADOS = "SELECT INFTEMP.*,R.descripcion as residensia,SOLAD.PROMEDIOGENERAL, DETSOL.IDBANNER,SOLAD.curp, SOLAD.PERSISTENCEID id, campusEstudio.descripcion AS campus,CASE WHEN estado.DESCRIPCION ISNULL THEN SOLAD.estadoextranjero ELSE estado.DESCRIPCION END AS estado, periodo.DESCRIPCION AS ingreso, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN SOLAD.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, gestionescolar.NOMBRE AS licenciatura, SOLAD.CORREOELECTRONICO AS EMAIL,TAL.descripcion as tipoDeAlumno, campus.grupoBonita, TA.descripcion as tipoadmision, SOLAD.CASEID as caseid FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID [WHERE] [ORDERBY] [LIMITOFFSET]";
	//v1 public static final String GET_INFO_CONSULTA_RESULTADOS = "SELECT INFTEMP.*, DETSOL.IDBANNER, SOLAD.PERSISTENCEID id, SOLAD.CORREOELECTRONICO AS EMAIL FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE] [ORDERBY] [LIMITOFFSET]";
	
	public static final String GET_INFO_CONSULTA_RESULTADOS_COUNT = "SELECT COUNT(*) AS registros FROM InfoCarta AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE]";
	public static final String GET_INFO_CONSULTA_SIN_RESULTADOS_COUNT = "SELECT  COUNT(*) AS registros FROM SOLICITUDDEADMISION AS SOLAD INNER JOIN DETALLESOLICITUD AS DETSOL ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID LEFT JOIN catpais paisvives ON paisvives.persistenceid = SOLAD.catpais_pid [WHERE] ";
	//v1public static final String GET_INFO_CONSULTA_RESULTADOS_COUNT = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=SOLAD.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=SOLAD.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =SOLAD.CATPERIODO_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =SOLAD.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =SOLAD.CATBACHILLERATOS_PID LEFT JOIN CatResidencia  as R on R.PERSISTENCEID = DETSOL.CATRESIDENCIA_PID  LEFT JOIN CatTipoAdmision  as TA on TA.PERSISTENCEID = DETSOL.CATTIPOADMISION_PID LEFT JOIN CatTipoAlumno  as TAL on TAL.PERSISTENCEID = DETSOL.CATTIPOALUMNO_PID LEFT JOIN catcampus campus ON campus.persistenceid=SOLAD.CATCAMPUS_PID left join sesionaspirante saw  on  saw.username= SOLAD.correoelectronico left join pruebas p on p.sesion_pid=saw.sesiones_pid and p.iseliminado=false left join cattipoprueba tipo on tipo.persistenceid=p.cattipoprueba_pid left join responsabledisponible rd on rd.persistenceid=saw.responsabledisponible_pid  [WHERE]";
	
	/*************************JOSECARLOSFELIXIBARRA FIN****************/
	
	public static final String GET_TIPOPRUEBA = "SELECT c.persistenceid as tipoprueba_pid FROM PRUEBAS AS P LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid WHERE P.persistenceid = ?";
	public static final String GET_SESIONESASPIRANTE = "SELECT * from ( SELECT SA.*,RD.responsableid,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE SA.sesiones_pid = ? AND P.persistenceid = ? AND rd.responsableid = ?  AND (CAST( P.aplicacion AS DATE) >= CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(P.aplicacion as DATE) + integer '1') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)) [ENTREVISTA]  [WHERE] [ORDERBY] ) as datos where tieneOtraAsistencia = 0 [LIMITOFFSET]"
	//public static final String GET_SESIONESCALENDARIZADAS = "select * from (SELECT DISTINCT(P.persistenceid)  as pruebas_id,   P.nombre, P.aplicacion, ( CASE WHEN s.tipo LIKE '%R,F,E%'OR  s.tipo LIKE '%R,E,F%'OR  s.tipo LIKE '%F,R,E%'OR  s.tipo LIKE '%F,E,R%'OR  s.tipo LIKE '%E,F,R%'OR  s.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR  s.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR  s.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN s.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, S.persistenceid as sesiones_id, P.lugar, P.registrados as alumnos_generales, S.nombre as nombre_sesion, c.descripcion as tipo_prueba, P.cupo, P.entrada,P.salida FROM PRUEBAS as P  LEFT JOIN SESIONES as S on P.sesion_pid = S.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as RD on RD.prueba_pid = P.persistenceid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid WHERE P.ISELIMINADO = FALSE AND RD.responsableid = ? AND ( CAST(P.aplicacion AS DATE) >= CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(P.aplicacion as DATE) + integer '1') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)) [WHERE] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESCALENDARIZADAS_REGISTRADOS = "select * from (SELECT DISTINCT(Pruebas.persistenceid)  as pruebas_id,   Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR  Sesion.tipo LIKE '%R,E,F%'OR  Sesion.tipo LIKE '%F,R,E%'OR  Sesion.tipo LIKE '%F,E,R%'OR  Sesion.tipo LIKE '%E,F,R%'OR  Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR  Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR  Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion, ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as ResponsableD on ResponsableD.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid WHERE Pruebas.ISELIMINADO = FALSE AND ResponsableD.responsableid = ? AND ( CAST(Pruebas.aplicacion AS DATE) >= CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(Pruebas.aplicacion as DATE) + integer '1') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(Pruebas.aplicacion as DATE) + integer '2') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(Pruebas.aplicacion as DATE) + integer '3') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(Pruebas.aplicacion as DATE) + integer '4') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) OR (CAST(Pruebas.aplicacion as DATE) + integer '5') = CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)) [WHERE] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String EXT_SESIONESCALENDARIZADAS_REGISTRADOS = "(SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid AND rd.responsableid = ResponsableD.responsableid  GROUP BY sa.presistenceid,sda.caseid,p.persistenceid   ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME  LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia = 'true'  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid  GROUP BY sa.presistenceid, sda.caseid,p.persistenceid   ORDER BY SA.persistenceid) as asistencia  ) as CONTEO ) as registrados"
	public static final String GET_ASPIRANTESDELASESION = "SELECT sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  prepa.DESCRIPCION AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid   WHERE sda.correoelectronico = ?";
	
	public static final String INSERT_PASEDELISTA = "INSERT INTO PaseLista (persistenceid,prueba_pid,username,asistencia,fecha,usuarioPaseLista) VALUES ( case when (SELECT max(persistenceId)+1 from PaseLista ) is null then 1 else (SELECT max(persistenceId)+1 from PaseLista) end,?,?,?,CAST(NOW() as varchar),?) "
	public static final String UPDATE_PASEDELISTA = "update PaseLista set asistencia = ?, fecha = CAST(NOW() as varchar), usuarioPaseLista = ? where prueba_pid = ? and username = ?" 
	
	public static final String UPDATEPREPASOLICITUDDEADMISION = "UPDATE SOLICITUDDEADMISION  SET catbachilleratos_pid = ? WHERE persistenceid = ?"
	
	
	public static final String GET_SESIONESCALENDARIZADASPASADAS = "select * from (SELECT P.nombre, P.aplicacion, ( CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN s.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, P.persistenceid as pruebas_id, S.persistenceid as sesiones_id, P.lugar, P.registrados as alumnos_generales, S.nombre as nombre_sesion, c.descripcion as tipo_prueba, P.cupo, P.entrada,P.salida, campus.descripcion AS campus, count(CASE WHEN PL.asistencia THEN 1 END) as asistencias, (select String_AGG(distinct rd.responsableid::varchar,',') from responsabledisponible as rd where rd.isEliminado = false and rd.prueba_pid = P.persistenceid) as responsables FROM PRUEBAS as P LEFT JOIN SESIONES as S on P.sesion_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.prueba_pid = P.persistenceid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN catcampus campus ON campus.persistenceid=s.campus_pid [CAMPUS] WHERE P.ISELIMINADO = FALSE AND campus.descripcion is not null AND CAST(P.aplicacion AS DATE) [ORDEN] CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)  [WHERE] [GROUPBY] [HAVING] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESCALENDARIZADASPASADAS_REGISTRADOS = "select * from (SELECT Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR Sesion.tipo LIKE '%R,E,F%'OR Sesion.tipo LIKE '%F,R,E%'OR Sesion.tipo LIKE '%F,E,R%'OR Sesion.tipo LIKE '%E,F,R%'OR Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Pruebas.persistenceid as pruebas_id, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion,ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, campus.descripcion AS campus, count(CASE WHEN PaseLista.asistencia THEN 1 END) as asistencias, (select String_AGG(distinct rd.responsableid::varchar,',') from responsabledisponible as rd where rd.isEliminado = false and rd.prueba_pid = Pruebas.persistenceid) as responsables, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN PaseLista as PaseLista on PaseLista.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid LEFT JOIN catcampus campus ON campus.persistenceid= Sesion.campus_pid [CAMPUS] WHERE Pruebas.ISELIMINADO = FALSE AND campus.descripcion is not null AND CAST(Pruebas.aplicacion AS DATE) [ORDEN] CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE)  [WHERE] [GROUPBY] [HAVING] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESASPIRANTEPASADAS = "SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,RD.responsableid,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE SA.sesiones_pid = ? AND P.persistenceid = ? [REPORTE]   [ENTREVISTA]  [WHERE] [ORDERBY] ) as datos where tieneOtraAsistencia = 0 [LIMITOFFSET] "
	public static final String GET_SESIONESCALENDARIZADASREPORTE = "select * from (SELECT DISTINCT(P.persistenceid)  as pruebas_id,   P.nombre, P.aplicacion, ( CASE WHEN s.tipo LIKE '%R,F,E%'OR s.tipo LIKE '%R,E,F%'OR s.tipo LIKE '%F,R,E%'OR s.tipo LIKE '%F,E,R%'OR s.tipo LIKE '%E,F,R%'OR s.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN s.tipo LIKE '%R,F%'OR s.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN s.tipo LIKE '%E,F%'OR s.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN s.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN s.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN s.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, S.persistenceid as sesiones_id, P.lugar, P.registrados as alumnos_generales, S.nombre as nombre_sesion, c.descripcion as tipo_prueba, P.cupo, P.entrada,P.salida, count(CASE WHEN PL.asistencia THEN 1 END) as asistencias FROM PRUEBAS as P  LEFT JOIN SESIONES as S on P.sesion_pid = S.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as RD on RD.prueba_pid = P.persistenceid LEFT JOIN PaseLista as PL on PL.prueba_pid = P.persistenceid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid WHERE P.ISELIMINADO = FALSE AND RD.responsableid = ? AND CAST(P.aplicacion AS DATE) < CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) [WHERE] [GROUPBY] [HAVING] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	public static final String GET_SESIONESCALENDARIZADASREPORTE_REGISTRADOS = "select * from (SELECT DISTINCT(Pruebas.persistenceid)  as pruebas_id,   Pruebas.nombre, Pruebas.aplicacion, ( CASE WHEN Sesion.tipo LIKE '%R,F,E%'OR Sesion.tipo LIKE '%R,E,F%'OR Sesion.tipo LIKE '%F,R,E%'OR Sesion.tipo LIKE '%F,E,R%'OR Sesion.tipo LIKE '%E,F,R%'OR Sesion.tipo LIKE '%E,R,F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false ) ELSE CASE WHEN Sesion.tipo LIKE '%R,F%'OR Sesion.tipo LIKE '%F,R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='R')) ELSE CASE WHEN Sesion.tipo LIKE '%E,F%'OR Sesion.tipo LIKE '%F,E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F' OR clave ='E'))ELSE CASE WHEN Sesion.tipo LIKE '%R%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R')) ELSE CASE WHEN Sesion.tipo LIKE '%E%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'E')) ELSE CASE WHEN Sesion.tipo LIKE '%F%'THEN (select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'F')) ELSE(select String_AGG(R.descripcion,',') from catresidencia as R where isEliminado = false and (clave = 'R' OR clave ='E'))END END END END END END ) as residencia, Sesion.persistenceid as sesiones_id, Pruebas.lugar, Pruebas.registrados as alumnos_generales, Sesion.nombre as nombre_sesion, ctipoprueba.descripcion as tipo_prueba, Pruebas.cupo, Pruebas.entrada,Pruebas.salida, count(CASE WHEN PaseLista.asistencia THEN 1 END) as asistencias, [COUNTASPIRANTES] FROM PRUEBAS as Pruebas  LEFT JOIN SESIONES as Sesion on Pruebas.sesion_pid = Sesion.persistenceid LEFT JOIN RESPONSABLEDISPONIBLE as ResponsableD on  ResponsableD.prueba_pid = Pruebas.persistenceid LEFT JOIN PaseLista as PaseLista on PaseLista.prueba_pid = Pruebas.persistenceid LEFT JOIN cattipoprueba ctipoprueba on ctipoprueba.PERSISTENCEID =Pruebas.cattipoprueba_pid WHERE Pruebas.ISELIMINADO = FALSE AND  ResponsableD.responsableid = ? AND CAST(Pruebas.aplicacion AS DATE) < CAST(TO_CHAR(NOW(),'YYYY-MM-DD') as DATE) [WHERE] [GROUPBY] [HAVING] [ORDERBY] ) as datos [RESIDENCIA] [LIMITOFFSET]";
	
	public static final String EXT_SESIONESCALENDARIZADAS="(SELECT COUNT(*) as registros from( SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid       GROUP BY p.persistenceid,sa.username, sa.presistenceid HAVING ((select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) = 0) ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,(select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia = 'true'  AND S.persistenceid = Sesion.persistenceid AND P.persistenceid = Pruebas.persistenceid        GROUP BY p.persistenceid,sa.username, sa.presistenceid ORDER BY SA.persistenceid ASC ) as asistencia  ) as CONTEO) as registrados"
	
	public static final String GET_ASPIRANTEEXAMENESTERMINADOS = "SELECT sda.aceptado, sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  prepa.DESCRIPCION AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid   WHERE  sda.estatusSolicitud = 'Carga y consulta de resultados' [WHERE] [ORDERBY] [LIMITOFFSET] "
	public static final String COUNT_ASPIRANTEEXAMENTERMINADOS = "SELECT COUNT(asistencias) as registros from (SELECT count(1) as asistencias, PL.username as Aspirante, sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  prepa.DESCRIPCION AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN SESIONES as S on S.campus_pid = campus.persistenceid LEFT JOIN Pruebas as P on P.sesion_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.prueba_pid = P.PERSISTENCEID  WHERE PL.usuarioPaseLista IS NOT NULL  and PL.username = sda.correoelectronico and PL.asistencia = true [WHERE]  group by PL.username, sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion , gestionescolar.nombre ,  prepa.DESCRIPCION , sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion, sx.descripcion, CPO.descripcion, R.descripcion having count(1) >= 2 ) as datos"
	public static final String UPDATE_ASPIRANTEACEPTADO = "update SOLICITUDDEADMISION set aceptado = ? where caseId = ?"
	
	public static final String GET_PRUEBAS = "select P.nombre, P.aplicacion, P.entrada, P.salida, tp.descripcion as tipo_prueba from pruebas as P LEFT JOIN CatTipoPrueba as tp on P.cattipoprueba_pid = tp.persistenceId  where P.persistenceId =  ?"
	
	public static final String GET_PERIODOSACTIVOS = "SELECT clave, descripcion, fechainicio, fechafin FROM CATPERIODO WHERE  ISELIMINADO = false AND [TIPO] = TRUE  AND  NOW() BETWEEN CAST(FECHAINICIO as DATE) AND CAST(FECHAFIN as DATE)  [ID] ORDER BY FECHAFIN    LIMIT ?";
	public static final String GET_PERIODOSSIGUIENTES = "SELECT COUNT(*) as registros FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE  AND  CAST(FECHAINICIO as DATE)  >   CAST( [FECHA] as DATE) [ID] ";
	public static final String GET_VALIDARCLAVEPERIODO = "SELECT COUNT(PERSISTENCEID) AS TOTAL FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE  AND CLAVE = ? [ID]";
	
	public static final String GET_DAY = "select TO_CHAR( NOW(),'YYYY-MM-DD') as fecha"
	
	public static final String UPDATE_PAGOEXAMEN = "update catpagodeexamendeadmision set deshabilitarpagodeexamendeadmision = ? "
	
	public static final String UPDATE_LUGAREXAMEN= "update SwitchLugarExamen set activado = ? "
	
	public static final String UPDATE_DETALLE_SOLICITUD="UPDATE detallesolicitud SET [SETS] ";
	
	public static final String GET_ASPIRANTEPRUEBAASISTIOYREAGENDO = "[COUNT] SELECT * from ( SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia,sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID  LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = ? AND P.persistenceid = ? [REPORTE]   [ENTREVISTA]  [WHERE] [HAVING] ORDER BY SA.persistenceid ASC  ) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username = SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia,sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE sda.caseid is not null AND PL.asistencia = 'true'  AND S.persistenceid = ? AND P.persistenceid = ? [REPORTE]   [ENTREVISTA]  [WHERE]  [GROUPBY] ORDER BY SA.persistenceid ASC ) as asistencia  [COUNTFIN] [ORDERBY] [LIMITOFFSET] "
	
	public static final String GET_ASPIRANTEPRUEBAASISTIOYREAGENDOACTIVOS = "[COUNT] SELECT * from ( SELECT SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where  paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia, sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado FROM responsabledisponible as RD left join PRUEBAS  as P on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SESIONES as S on S.persistenceid = P.sesion_pid LEFT JOIN sesionaspirante as SA on SA.sesiones_pid = S.persistenceid LEFT JOIN PaseLista as PL on PL.USERNAME = SA.USERNAME  AND PL.prueba_pid = P.persistenceid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = SA.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID  LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid WHERE sda.caseid is not null AND SA.sesiones_pid = ? AND P.persistenceid = ? AND rd.responsableid = ? [ENTREVISTA]  [WHERE]) as datos where tieneOtraAsistencia = 0   UNION  select * from (SELECT distinct on (SA.persistenceid) SA.*,RD.prueba_pid, P.aplicacion, P.nombre as nombre_prueba,P.Lugar as lugar_prueba, c.descripcion as tipo_prueba, case when C.persistenceid=1 then rd.horario  else concat(p.entrada,' - ',p.salida) end as horario, c.persistenceid as tipoprueba_pid, PL.asistencia, (select count( CASE WHEN paseL.asistencia THEN 1 END) from PaseLista as paseL INNER JOIN PRUEBAS as P2 on paseL.prueba_pid = P2.persistenceid where paseL.prueba_pid != P.persistenceid and paseL.username =  SA.USERNAME AND P.cattipoprueba_pid = P2.cattipoprueba_pid) as tieneOtraAsistencia, sda.curp,estado.DESCRIPCION as procedencia,sda.caseId, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.telefonocelular, sda.correoelectronico, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura,  CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, da.TIPOALUMNO, sda.caseid, da.idbanner, campus.grupoBonita, le.descripcion as lugarexamen, sx.descripcion as sexo, CPO.descripcion as periodo, R.descripcion as residencia, da.cbCoincide,CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END as preparatoriaEstado from PASELISTA PL LEFT JOIN PRUEBAS P on PL.prueba_pid = P.persistenceId LEFT JOIN SESIONES S on S.persistenceid = P.sesion_pid LEFT JOIN responsabledisponible as RD on P.persistenceid = RD.prueba_pid LEFT JOIN cattipoprueba c on c.PERSISTENCEID =p.cattipoprueba_pid LEFT JOIN SOLICITUDDEADMISION sda ON sda.correoelectronico = PL.USERNAME LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID LEFT JOIN catPeriodo as CPO on CPO.persistenceid = sda.CATPERIODO_PID LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID LEFT JOIN catSexo as sx on sx.persistenceid = sda.CATSEXO_PID LEFT JOIN CATRESIDENCIA as R on R.persistenceid = da.catresidencia_pid LEFT JOIN catLugarExamen as le on le.persistenceid = sda.CATLUGAREXAMEN_PID LEFT JOIN sesionaspirante as SA on SA.username = PL.username  WHERE PL.asistencia = 'true' AND sda.caseid is not null  AND S.persistenceid = ? AND P.persistenceid = ?   [ENTREVISTA]  [WHERE]  [GROUPBY] ORDER BY SA.persistenceid) as asistencia  [COUNTFIN]  [ORDERBY] [LIMITOFFSET]"
	
	/***********************JESUS OSUNA FIN********************************/
	/*************JOSÉ GARCÍA***********************/
	public static final String GET_CATPROPEDEUTICO ="SELECT p.*, c.descripcion AS campus FROM CATPROPEDEUTICO p INNER JOIN CATCAMPUS c ON p.CAMPUS_PID = c.PERSISTENCEID  [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String INSERT_BITACORA_PAGO = "INSERT INTO CATBITACORAMETODOPAGO(persistenceid, estatus, eventos, fechaMovimiento, iseliminado, mediopago, monto, notransaccion, observaciones, usuarioaspirante, persistenceversion, caseid, campus, nombrepago) VALUES (case when (SELECT max(persistenceId)+1 from CATBITACORAMETODOPAGO ) is null then 1 else (SELECT max(persistenceId)+1 from CATBITACORAMETODOPAGO) end, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ? , ?)";
	public static final String GET_BITACORA_PAGO =" SELECT *, estatus,  fechaMovimiento, medioPago, monto, noTransaccion, observaciones, usuarioAspirante, caseId, nombrePago FROM CATBITACORAMETODOPAGO [WHERE] GROUP BY persistenceId, estatus,  fechaMovimiento, medioPago, monto, noTransaccion, observaciones, usuarioAspirante, caseId [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_BITACORA_PAGO = "SELECT COUNT(PERSISTENCEID) as registros FROM CATBITACORAMETODOPAGO [WHERE]";
	public static final String GET_VALIDACION_CLAVE = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE LOWER(CLAVE) = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_CLAVE_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE LOWER(CLAVE) = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";
	public static final String GET_VALIDACION_ORDEN = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ORDEN::Integer = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_ORDEN_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ORDEN::Integer = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";
	public static final String GET_VALIDACION_IDBANNER = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ID = ? AND ISELIMINADO = false";
	public static final String GET_VALIDACION_IDBANNER_EDIT = "SELECT COUNT(PERSISTENCEID) AS  total FROM [TABLA] WHERE ID = ? AND ISELIMINADO = false AND PERSISTENCEID <> ?";
	public static final String GET_CAT_NACIONALIDAD = "SELECT * FROM CATNACIONALIDAD [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String CLEAR_INFO_CARTA_TEMPORAL = "DELETE FROM INFOCARTATEMPORAL";
//	public static final String GET_INFO_CARTA_TEMPORAL = "SELECT INFTEMP.*, DETSOL.IDBANNER, DETSOL.PERSISTENCEID AS id FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER [WHERE] [ORDERBY]";
	public static final String GET_INFO_CARTA_TEMPORAL = "SELECT INFTEMP.*, DETSOL.IDBANNER, SOLAD.PERSISTENCEID id, SOLAD.CORREOELECTRONICO AS EMAIL FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_INFO_CARTA_TEMPORAL_NO_RESULTADOS = "SELECT SOLAD.estatussolicitud, SOLAD.CORREOELECTRONICO AS EMAIL, (DETSOL.IDBANNER IS NULL) AS idnocoincide, (SOLAD.estatussolicitud <> 'Carga y consulta de resultados') AS estatusincorrecto,  INFTEMP.*  FROM InfoCartaTemporal AS INFTEMP LEFT JOIN DETALLESOLICITUD AS DETSOL ON(INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER) LEFT JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE] [ORDERBY] [LIMITOFFSET]"
//	public static final String GET_INFO_CARTA_TEMPORAL_COUNT = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER [WHERE]";
	public static final String GET_INFO_CARTA_TEMPORAL_COUNT = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP INNER JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER  INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE]";
	public static final String GET_INFO_CARTA_TEMPORAL_COUNT_NO_RESULTADOS = "SELECT COUNT(*) AS registros FROM InfoCartaTemporal AS INFTEMP LEFT JOIN DETALLESOLICITUD AS DETSOL ON(INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER) LEFT JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE]";
	public static final String SELECCIONAR_CARTA = "UPDATE InfoCartaTemporal SET SELECCIONADO = ? WHERE PERSISTENCEID = ?";
	public static final String SELECCIONAR_TODAS_CARTAS = "UPDATE InfoCartaTemporal SET SELECCIONADO = ?";
	public static final String GET_CARTAS_A_ENVIAR = "SELECT INFTEMP.*, DETSOL.IDBANNER, SOLAD.PERSISTENCEID id,SOLAD.estatussolicitud, SOLAD.CORREOELECTRONICO AS EMAIL FROM InfoCartaTemporal AS INFTEMP LEFT JOIN DETALLESOLICITUD AS DETSOL ON INFTEMP.NUMERODEMATRICULA = DETSOL.IDBANNER INNER JOIN SOLICITUDDEADMISION AS SOLAD ON SOLAD.CASEID = CAST(DETSOL.CASEID AS BIGINT) [WHERE]";
	/*************JOSÉ GARCÍA FIN***********************/
	/***********************ERIC ROSAS*******************************/
	public static final String GET_CATPERIODO = "SELECT P.* FROM CATPERIODO as P [WHERE] [ORDERBY] [LIMITOFFSET]"
	/***********************ERIC ROSAS FIN********************************/
	/***********************ARTURO ZAMORANO*******************************/
	public static final String GET_LAST_FECHA_EXAMEN = "SELECT TO_CHAR(E.aplicacion, 'YYYY-MM-DD') AS fechaFinal, E.salida, A.username, F.descripcion FROM SESIONASPIRANTE AS A LEFT JOIN SESIONES AS D ON A.sesiones_pid = D.persistenceid LEFT JOIN PRUEBAS AS E ON E.sesion_pid = D.persistenceid LEFT JOIN CATTIPOPRUEBA AS F ON E.cattipoprueba_pid = F.persistenceid WHERE A.username = ?";
	public static final String GET_FIRST_FECHA_EXAMEN = "SELECT TO_CHAR(D.fecha_inicio, 'YYYY-MM-DD') AS fecha_inicio, E.entrada, A.username, F.descripcion FROM SESIONASPIRANTE AS A LEFT JOIN SESIONES AS D ON A.sesiones_pid = D.persistenceid LEFT JOIN PRUEBAS AS E ON E.sesion_pid = D.persistenceid LEFT JOIN CATTIPOPRUEBA AS F ON E.cattipoprueba_pid = F.persistenceid WHERE A.username = ? LIMIT 1";
	public static final String GET_CATCIUDAD_CUSTOM="SELECT C.persistenceid, C.caseid, C.clave, C.descripcion, C.estado, C.fechacreacion, C.iseliminado, C.orden, C.pais, C.persistenceversion, C.region, C.usuariocreacion, C.campus_pid, C.isestado, B.persistenceid AS persistenceidB, B.clave AS claveB, B.descripcion AS descripcionB, B.fechacreacion AS fechacreacionB, B.fechaimplementacion AS fechaimplementacionB, B.id AS idB, B.iseliminado AS iseliminadoB, B.isenabled AS isenabledB, B.persistenceversion AS persistenceversionB, B.urlautordatos AS urlautordatosB, B.urlavisoprivacidad AS urlavisoprivacidadB, B.urldatosveridicos AS urldatosveridicosB, B.usuariobanner AS usuariobannerB, B.grupobonita AS grupobonitaB, B.orden AS ordenB, B.calle AS calleB, B.codigopostal AS codigopostalB, B.colonia AS coloniaB, B.municipio AS municipioB, B.numeroexterior AS numeroexteriorB, B.numerointerior AS numerointeriorB, B.estado_pid AS estado_pidB, B.pais_pid AS pais_pidB, B.email AS emailB, B.urlimagen AS urlimagenB FROM CATCIUDAD C LEFT JOIN CATCAMPUS B ON B.PERSISTENCEID = C.CAMPUS_PID [WHERE] [ORDERBY] [LIMITOFFSET]"
	public static final String GET_CATPROPEDEUTICO_GRAL="SELECT A.persistenceid, A.clave, A.descripcion, A.id, A.persistenceversion, STRING_AGG(CONCAT(C.descripcion,' (',B.tipoperiodo,')'),', ') AS campus FROM CatPropedeuticoGral A LEFT JOIN CatRelacionCampusTipo B ON B.catpropedeuticogral_pid = A.persistenceid AND B.isEliminado=false LEFT JOIN CatCampus C ON C.persistenceid = B.catcampus_pid [WHERE] GROUP BY A.persistenceid, A.clave, A.descripcion, A.id, A.persistenceversion [ORDERBY] [LIMITOFFSET]";
	public static final String GET_CATPROPEDEUTICO_RELACION_TIPO="SELECT C.clave, C.descripcion, D.usuariocreacion, A.persistenceid AS persistenceIdCatRecibirAtencionEspiritual, D.persistenceid, D.fechainicio, D.fechafinal, B.descripcion AS campus, A.tipoperiodo, D.idioma FROM CatRelacionCampusTipo A LEFT JOIN CatCampus B ON B.persistenceid = A.catcampus_pid INNER JOIN CatPropedeuticoGral C ON A.catpropedeuticogral_pid = C.persistenceid AND C.isEliminado = false LEFT JOIN CatPropedeutico D ON D.persistenceidcatrecibiratencionespiritual = A.persistenceid [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_CATPERIODO_BY_ID="SELECT persistenceid, clave, descripcion, fechacreacion, fechaimportacion, iseliminado, isenabled, persistenceversion, usuariobanner, campus, nombrecampus, campus_pid, iscuatrimestral, fechafin, fechainicio, isanual, ispropedeutico, issemestral, activo, id FROM catPeriodo WHERE persistenceid = ?";
	public static final String GET_CATPROPEDEUTICO_BY_FECHA = "SELECT B.grupobonita, A.tipoperiodo, D.persistenceid, D.clave, C.descripcion, D.fechacreacion, D.fechaejecucion, D.iseliminado, D.persistenceversion, D.usuariocreacion, D.catperiodo_pid, D.fechafinal, D.fechainicio, D.nombrecampus, D.campus_pid, D.persistenceidcatrecibiratencionespiritual FROM CatRelacionCampusTipo A LEFT JOIN CatCampus B ON B.persistenceid = A.catcampus_pid INNER JOIN CatPropedeuticoGral C ON A.catpropedeuticogral_pid = C.persistenceid AND C.isEliminado = false LEFT JOIN CatPropedeutico D ON D.persistenceidcatrecibiratencionespiritual = A.persistenceid WHERE B.grupobonita = ? AND A.tipoperiodo = ? AND (TO_TIMESTAMP(D.fechainicio, 'YYYY-MM-DD\"T\"HH24:MI:SS') > NOW() AND TO_TIMESTAMP(D.fechafinal, 'YYYY-MM-DD\"T\"HH24:MI:SS') <= TO_TIMESTAMP(?, 'YYYY-MM-DD\"T\"HH24:MI:SS') ) AND D.idioma = ?";
	public static final String GET_PERIODO_ACTIVO_FINAL = "SELECT persistenceid, clave, descripcion, fechacreacion, fechaimportacion, iseliminado, isenabled, persistenceversion, usuariobanner, campus, nombrecampus, campus_pid, iscuatrimestral, fechafin, fechainicio, isanual, ispropedeutico, issemestral, activo, id FROM CATPERIODO WHERE ISELIMINADO = false AND [TIPO] = TRUE AND NOW() BETWEEN CAST(FECHAINICIO AS DATE) AND CAST(FECHAFIN AS DATE) AND activo = true ORDER BY FECHAFIN LIMIT 3";
	public static final String GET_HUBSPOT_KEY_BY_CAMPUS = "SELECT A.persistenceid, A.conekta, A.crispchat, A.iseliminado, A.mailgun, A.persistenceversion, A.campus_pid, A.conektapublickey, A.mailguncorreo, A.mailgundominio, A.hubspotkey FROM catApiKey A LEFT JOIN CATCAMPUS B ON A.campus_pid = B.PERSISTENCEID WHERE B.CLAVE = ?";
	public static final String GET_USERS_BY_USERNAME = "SELECT tenantid, id, enabled, username, password, firstname, lastname, title, jobtitle, manageruserid, createdby, creationdate, lastupdate, iconid FROM user_ WHERE LOWER(username) LIKE LOWER(CONCAT('%',?,'%'))";
	public static final String GET_CODIGO_POSTAL_EXISTENTE = "SELECT COUNT(codigopostal) resultado from CatCodigoPostal WHERE codigopostal = ? AND LOWER(estado) = ? AND LOWER(municipio) = ? AND LOWER(ciudad) = ? AND LOWER(asentamiento) = ? AND LOWER(tipoasentamiento) = ?";
	public static final String GET_CODIGO_POSTAL = "";
	/***********************ARTURO ZAMORANO FIN*******************************/
	/***********************MARIO ICEDO*******************************/
	public static final String GET_SOLICITUDES_TRANSFERENCIA="SELECT  CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion, prepa.estado [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_SOLICITUDES_TRANSFERENCIA="SELECT tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion [ORDERBY] [LIMITOFFSET]";
	//public static final String GET_COUNT_SOLICITUDES_TRASNFERENCIA="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_SOLICITUDES_TRANSFERENCIA="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String UPDATE_DATOS_TRASNFERENCIA="UPDATE SOLICITUDDEADMISION SET catcampus_pid = ?, catgestionescolar_pid = ?, catpropedeutico_pid = ?, catperiodo_pid = ?, catcampusestudio_pid = ? WHERE caseid = ?";
	public static final String INSERT_BITACORA_TRANSFERENCIA="INSERT INTO CATBITACORATRANSFERENCIAS (persistenceid, persistenceversion, aspirante, correoAspirante, valorOriginal, valorCambio, fechaCreacion, usuarioCreacion, campusAnterior, campusNuevo,licenciatura,periodo,estatus,caseid,idbanner) VALUES (case when (SELECT max(persistenceId)+1 from CATBITACORATRANSFERENCIAS) is null then 1 else (SELECT max(persistenceId)+1 from CATBITACORATRANSFERENCIAS) end,0,?,?,?,?,now(),?,?,?,?,?,?,?,?)";
	public static final String GET_BITACORA_TRANSFERENCIA="SELECT *, aspirante, correoaspirante, fechacreacion,usuariocreacion, valorcambio,valororiginal,campusanterior,campusnuevo,estatus,licenciatura,periodo,idbanner,caseid FROM CATBITACORATRANSFERENCIAS [WHERE] [campus] GROUP BY persistenceId, persistenceversion, aspirante, correoaspirante,fechacreacion,usuariocreacion,valorcambio,valororiginal,licenciatura,periodo,estatus,caseid [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_BITACORA_TRANSFERENCIA="SELECT COUNT(PERSISTENCEID) as registros FROM CATBITACORATRANSFERENCIAS [WHERE] [campus]";
	public static final String GET_USUARIOS_REGISTRADOS="SELECT   sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion AS campussede, campus.descripcion        AS campus, gestionescolar.nombre     AS licenciatura, periodo.descripcion       AS ingreso, estado.descripcion        AS estado, prepa.descripcion         AS prepacatalogo, prepa.persistenceid       AS idPrepa, CASE WHEN prepa.descripcion = 'Otro' THEN sda.estadobachillerato ELSE prepa.estado END AS procedencia, CASE WHEN prepa.descripcion = 'Otro' THEN sda.bachillerato ELSE prepa.descripcion END AS preparatoria, sda.promediogeneral, sda.estatussolicitud, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, le.descripcion           AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion   AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion         AS paisexamen, prope.descripcion        AS propedeutico, sexo.descripcion         AS sexo, sda.paisbachillerato, sda.estadobachillerato, sda.ciudadbachillerato, sda.fechanacimiento, sda.estadoextranjero,sda.bachillerato, cta.descripcion as tipoAdmision, tipoalumno.descripcion as tipoalumno, sda.ciudad as ciudadvives, paisvives.descripcion as paisvives,sda.resultadoPAA,sda.tienePAA, da.cbCoincide,da.observacionesListaRoja,da.descuento  FROM  solicituddeadmision sda LEFT JOIN catcampus campus ON        campus.persistenceid=sda.catcampus_pid [CAMPUS] LEFT JOIN catcampus campusestudio ON        campusestudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN catgestionescolar gestionescolar ON        gestionescolar.persistenceid=sda.catgestionescolar_pid [PROGRAMA] LEFT JOIN catperiodo periodo ON        periodo.persistenceid =sda.catperiodo_pid [INGRESO] LEFT JOIN catestados estado ON        estado.persistenceid =sda.catestado_pid [ESTADO] LEFT JOIN catbachilleratos prepa ON        prepa.persistenceid =sda.catbachilleratos_pid [BACHILLERATO] LEFT JOIN detallesolicitud da ON        sda.caseid::integer=da.caseid::integer LEFT JOIN catlugarexamen le ON        le.persistenceid = sda.catlugarexamen_pid LEFT JOIN catestados estadoexamen ON        estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON        pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON        ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON        ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON        prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON        residencia.persistenceid = da.catresidencia_pid LEFT JOIN catsexo sexo ON sexo.persistenceid = sda.catsexo_pid  LEFT JOIN catpais paisvives ON paisvives.persistenceid = sda.catpais_pid LEFT JOIN catciudad ciudadvives on ciudadvives.descripcion = sda.ciudad LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision cta ON cta.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY  sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusestudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.descripcion, estado.descripcion, prepa.persistenceid, prepa.descripcion, sda.promediogeneral, sda.estatussolicitud, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacioneslistaroja, da.observacionesrechazo, da.idbanner, campus.grupobonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion, sexo.descripcion, sda.paisbachillerato, sda.estadobachillerato, sda.ciudadbachillerato, sda.fechanacimiento, sda.estadoextranjero,sda.bachillerato,cta.descripcion, tipoalumno.descripcion,ciudadvives.descripcion, paisvives.descripcion, sda.resultadoPAA,sda.tienePAA, da.cbCoincide, da.observacionesListaRoja,da.descuento [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_USUARIOS_REGISTRADOS="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	public static final String UPDATE_USUARIOS_REGISTRADOS="UPDATE solicituddeadmision SET    primernombre = ?, segundonombre = ?, apellidopaterno = ?, apellidomaterno = ?, correoelectronico = ?, catcampusestudio_pid = ?, catgestionescolar_pid = ?, catperiodo_pid = ?, catpropedeutico_pid = ?, catcampus_pid = ?, catsexo_pid = ?, fechanacimiento = ?,  catbachilleratos_pid = ?, bachillerato = ?, paisbachillerato = ?, estadobachillerato = ?, ciudadbachillerato = ?, promediogeneral = ?, catEstadoExamen_pid = ?, ciudadexamen_pid = ?, catpaisexamen_pid = ?  WHERE  caseid = ?";
	public static final String GET_PROPEDEUTICOS_NO_FECHA="SELECT CPRO.DESCRIPCION AS PROPE, CPRO.fechainicio, CPRO.fechafinal, CC.descripcion, CC.grupobonita  FROM CATPROPEDEUTICOGRAL CPG LEFT JOIN CATRELACIONCAMPUSTIPO RCT ON CPG.persistenceid = RCT.catpropedeuticogral_pid LEFT JOIN CATCAMPUS CC ON RCT.catcampus_pid = CC.persistenceid AND RCT.ISELIMINADO=false LEFT JOIN CatPropedeutico CPRO ON CPRO.persistenceidcatrecibiratencionespiritual = RCT.persistenceid WHERE CPG.ISELIMINADO=false AND CPRO.fechainicio IS NULL AND cc.grupobonita IN ([CAMPUS] GROUP BY CPRO.DESCRIPCION, CPRO.fechainicio, CPRO.fechafinal, CC.descripcion, CC.grupobonita"
	public static final String GET_USUARIOS_RECHAZADOS_COMITE="SELECT tipoalumno.descripcion AS tipoalumno, tipoadmision.descripcion AS tipoadmision,da.idbanner, sda.persistenceid, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion AS campussede, campus.descripcion AS campus, gestionescolar.nombre AS licenciatura, periodo.DESCRIPCION AS ingreso, CASE WHEN estado.DESCRIPCION ISNULL THEN sda.estadoextranjero ELSE estado.DESCRIPCION END AS estado, CASE WHEN prepa.DESCRIPCION = 'Otro' THEN sda.bachillerato ELSE prepa.DESCRIPCION END AS preparatoria, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion AS residencia, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion AS lugarexamen, ciudadestado.descripcion AS ciudadestado, ciudadpais.descripcion AS ciudadpais, estadoexamen.descripcion AS estadoexamen, pais.descripcion AS paisexamen, prope.descripcion AS propedeutico FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] GROUP BY tipoalumno.descripcion, tipoadmision.descripcion,da.idbanner, sda.apellidopaterno, sda.apellidomaterno, sda.primernombre, sda.segundonombre, sda.correoelectronico, sda.curp, campusEstudio.descripcion, campus.descripcion, gestionescolar.nombre, periodo.DESCRIPCION, estado.DESCRIPCION, prepa.DESCRIPCION, sda.PROMEDIOGENERAL, sda.ESTATUSSOLICITUD, residencia.descripcion, sda.caseid, sda.telefonocelular, da.observacionesListaRoja, da.observacionesRechazo, da.idbanner, campus.grupoBonita, le.descripcion, ciudadestado.descripcion, ciudadpais.descripcion, estadoexamen.descripcion, pais.descripcion, sda.persistenceid, prope.descripcion [ORDERBY] [LIMITOFFSET]";
	public static final String GET_COUNT_USUARIOS_RECHAZADOS_COMITE="SELECT COUNT(sda.persistenceid) as registros FROM SOLICITUDDEADMISION sda LEFT JOIN catcampus campus ON campus.persistenceid=sda.CATCAMPUS_PID [CAMPUS] LEFT JOIN catcampus campusEstudio ON campusEstudio.persistenceid=sda.catcampusestudio_pid LEFT JOIN CATGESTIONESCOLAR gestionescolar ON gestionescolar.persistenceid=sda.CATGESTIONESCOLAR_PID [PROGRAMA] LEFT JOIN CATPERIODO periodo ON periodo.PERSISTENCEID =sda.CATPERIODO_PID [INGRESO] LEFT JOIN CATESTADOs estado ON estado.persistenceid =sda.CATESTADO_PID [ESTADO] LEFT JOIN catbachilleratos prepa ON prepa.PERSISTENCEID =sda.CATBACHILLERATOS_PID [BACHILLERATO] LEFT JOIN detallesolicitud da ON sda.caseid::INTEGER=da.caseid::INTEGER LEFT JOIN catlugarexamen le ON le.persistenceid = sda.catlugarexamen_pid LEFT JOIN CATESTADOs estadoexamen ON estadoexamen.persistenceid = sda.catestadoexamen_pid LEFT JOIN catpais pais ON pais.persistenceid = sda.catpaisexamen_pid LEFT JOIN catciudad ciudadestado ON ciudadestado.persistenceid = sda.ciudadexamen_pid LEFT JOIN catciudad ciudadpais ON ciudadpais.persistenceid = sda.ciudadexamenpais_pid LEFT JOIN catpropedeutico prope ON prope.persistenceid = sda.catpropedeutico_pid LEFT JOIN catresidencia residencia ON residencia.persistenceid = da.catresidencia_pid  LEFT JOIN cattipoalumno tipoalumno ON tipoalumno.persistenceid = da.cattipoalumno_pid LEFT JOIN cattipoadmision tipoadmision ON tipoadmision.persistenceid = da.cattipoadmision_pid [TIPOALUMNO] [WHERE] [ORDERBY] [LIMITOFFSET]";
	/***********************MARIO ICEDO FIN*******************************/
}
